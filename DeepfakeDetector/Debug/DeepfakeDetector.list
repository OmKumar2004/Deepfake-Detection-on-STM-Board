
DeepfakeDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ac  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025a70  08005660  08005660  00006660  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b0d0  0802b0d0  0002e3e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802b0d0  0802b0d0  0002c0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b0d8  0802b0d8  0002e3e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b0d8  0802b0d8  0002c0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802b0dc  0802b0dc  0002c0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000013e0  20000000  0802b0e0  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002e3e0  2**0
                  CONTENTS
 10 .bss          000259e4  200013e0  200013e0  0002e3e0  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20026dc4  20026dc4  0002e3e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002e3e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007bc8  00000000  00000000  0002e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aaa  00000000  00000000  00035fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  00037a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025040  00000000  00000000  00038098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008756  00000000  00000000  0005d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de8e2  00000000  00000000  0006582e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00144110  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000043b  00000000  00000000  00144196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000015a0  00000000  00000000  001445d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00145b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200013e0 	.word	0x200013e0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005640 	.word	0x08005640

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200013e4 	.word	0x200013e4
 80001e8:	08005640 	.word	0x08005640

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b0a0      	sub	sp, #128	@ 0x80
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fa91 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f91b 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f99d 	bl	8000864 <MX_GPIO_Init>
  MX_CRC_Init();
 800052a:	f000 f987 	bl	800083c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  // Initialize AI
  ai_error err;
//  const ai_handle acts[] = { activations };
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800052e:	2100      	movs	r1, #0
 8000530:	487f      	ldr	r0, [pc, #508]	@ (8000730 <main+0x218>)
 8000532:	f001 fc95 	bl	8001e60 <ai_network_create>
 8000536:	4603      	mov	r3, r0
 8000538:	657b      	str	r3, [r7, #84]	@ 0x54
  if (err.type != AI_ERROR_NONE) {
 800053a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <main+0x2e>
    Error_Handler();
 8000542:	f000 f9c3 	bl	80008cc <Error_Handler>
  }

  // Use the proper initialization macro for parameters
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8000546:	f001 fd8b 	bl	8002060 <ai_network_data_weights_get>
 800054a:	4602      	mov	r2, r0
 800054c:	f107 031c 	add.w	r3, r7, #28
 8000550:	4611      	mov	r1, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f001 fd50 	bl	8001ff8 <ai_network_data_weights_buffer_get>
 8000558:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800055c:	4975      	ldr	r1, [pc, #468]	@ (8000734 <main+0x21c>)
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fd14 	bl	8001f8c <ai_network_data_activations_buffer_get>
    AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
    AI_NETWORK_DATA_ACTIVATIONS(activations)
  );

  if (!ai_network_init(network, &params)) {
 8000564:	4b72      	ldr	r3, [pc, #456]	@ (8000730 <main+0x218>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f107 021c 	add.w	r2, r7, #28
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fcc0 	bl	8001ef4 <ai_network_init>
 8000574:	4603      	mov	r3, r0
 8000576:	f083 0301 	eor.w	r3, r3, #1
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <main+0x6c>
    Error_Handler();
 8000580:	f000 f9a4 	bl	80008cc <Error_Handler>

//  if (!ai_network_init(network, acts)) {
//    Error_Handler();
//  }

  ai_input = ai_network_inputs_get(network, NULL);
 8000584:	4b6a      	ldr	r3, [pc, #424]	@ (8000730 <main+0x218>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fc7e 	bl	8001e8c <ai_network_inputs_get>
 8000590:	4603      	mov	r3, r0
 8000592:	4a69      	ldr	r2, [pc, #420]	@ (8000738 <main+0x220>)
 8000594:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8000596:	4b66      	ldr	r3, [pc, #408]	@ (8000730 <main+0x218>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fc8f 	bl	8001ec0 <ai_network_outputs_get>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a65      	ldr	r2, [pc, #404]	@ (800073c <main+0x224>)
 80005a6:	6013      	str	r3, [r2, #0]

  while (1)
  {
    for (int img_idx = 0; img_idx < NUM_IMAGES; ++img_idx)
 80005a8:	2300      	movs	r3, #0
 80005aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80005ac:	e0b6      	b.n	800071c <main+0x204>
    {
      const uint8_t* raw = images[img_idx];
 80005ae:	4a64      	ldr	r2, [pc, #400]	@ (8000740 <main+0x228>)
 80005b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b6:	66bb      	str	r3, [r7, #104]	@ 0x68
      float mean[3] = {0.485f, 0.456f, 0.406f};
 80005b8:	4a62      	ldr	r2, [pc, #392]	@ (8000744 <main+0x22c>)
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	ca07      	ldmia	r2, {r0, r1, r2}
 80005c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      float std[3] = {0.229f, 0.224f, 0.225f};
 80005c4:	4a60      	ldr	r2, [pc, #384]	@ (8000748 <main+0x230>)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//      for (int i = 0; i < IMG_SIZE; ++i)
//        input_data[i] = raw[i] / 255.0f;
      int idx = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	67bb      	str	r3, [r7, #120]	@ 0x78
      for (int c = 0; c < 3; ++c) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80005d6:	e048      	b.n	800066a <main+0x152>
        for (int h = 0; h < 64; ++h) {
 80005d8:	2300      	movs	r3, #0
 80005da:	673b      	str	r3, [r7, #112]	@ 0x70
 80005dc:	e03f      	b.n	800065e <main+0x146>
          for (int w = 0; w < 64; ++w) {
 80005de:	2300      	movs	r3, #0
 80005e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80005e2:	e036      	b.n	8000652 <main+0x13a>
            int hwc_index = h * 64 * 3 + w * 3 + c;  // HWC format in raw data
 80005e4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	019b      	lsls	r3, r3, #6
 80005ee:	4619      	mov	r1, r3
 80005f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80005f2:	4613      	mov	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	4413      	add	r3, r2
 80005f8:	440b      	add	r3, r1
 80005fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80005fc:	4413      	add	r3, r2
 80005fe:	65bb      	str	r3, [r7, #88]	@ 0x58
            input_data[idx++] = (raw[hwc_index] / 255.0f - mean[c]) / std[c]; // Converting to [0-1], then apply mean/std normalization
 8000600:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000602:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	ee07 3a90 	vmov	s15, r3
 800060c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000610:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800074c <main+0x234>
 8000614:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000618:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	3380      	adds	r3, #128	@ 0x80
 800061e:	443b      	add	r3, r7
 8000620:	3b70      	subs	r3, #112	@ 0x70
 8000622:	edd3 7a00 	vldr	s15, [r3]
 8000626:	ee77 6a67 	vsub.f32	s13, s14, s15
 800062a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	3380      	adds	r3, #128	@ 0x80
 8000630:	443b      	add	r3, r7
 8000632:	3b7c      	subs	r3, #124	@ 0x7c
 8000634:	ed93 7a00 	vldr	s14, [r3]
 8000638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800063e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000642:	4a43      	ldr	r2, [pc, #268]	@ (8000750 <main+0x238>)
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	edc3 7a00 	vstr	s15, [r3]
          for (int w = 0; w < 64; ++w) {
 800064c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800064e:	3301      	adds	r3, #1
 8000650:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000654:	2b3f      	cmp	r3, #63	@ 0x3f
 8000656:	ddc5      	ble.n	80005e4 <main+0xcc>
        for (int h = 0; h < 64; ++h) {
 8000658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800065a:	3301      	adds	r3, #1
 800065c:	673b      	str	r3, [r7, #112]	@ 0x70
 800065e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000660:	2b3f      	cmp	r3, #63	@ 0x3f
 8000662:	ddbc      	ble.n	80005de <main+0xc6>
      for (int c = 0; c < 3; ++c) {
 8000664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000666:	3301      	adds	r3, #1
 8000668:	677b      	str	r3, [r7, #116]	@ 0x74
 800066a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800066c:	2b02      	cmp	r3, #2
 800066e:	ddb3      	ble.n	80005d8 <main+0xc0>
          }
        }
      }

      ai_input[0].data = input_data;
 8000670:	4b31      	ldr	r3, [pc, #196]	@ (8000738 <main+0x220>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a36      	ldr	r2, [pc, #216]	@ (8000750 <main+0x238>)
 8000676:	605a      	str	r2, [r3, #4]
      ai_output[0].data = output_data;
 8000678:	4b30      	ldr	r3, [pc, #192]	@ (800073c <main+0x224>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a35      	ldr	r2, [pc, #212]	@ (8000754 <main+0x23c>)
 800067e:	605a      	str	r2, [r3, #4]
      ai_i32 batch;
      batch = ai_network_run(network, ai_input, ai_output);
 8000680:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <main+0x218>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a2c      	ldr	r2, [pc, #176]	@ (8000738 <main+0x220>)
 8000686:	6811      	ldr	r1, [r2, #0]
 8000688:	4a2c      	ldr	r2, [pc, #176]	@ (800073c <main+0x224>)
 800068a:	6812      	ldr	r2, [r2, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fc6d 	bl	8001f6c <ai_network_run>
 8000692:	6678      	str	r0, [r7, #100]	@ 0x64
      if (batch != 1) {
 8000694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000696:	2b01      	cmp	r3, #1
 8000698:	d001      	beq.n	800069e <main+0x186>
        Error_Handler();
 800069a:	f000 f917 	bl	80008cc <Error_Handler>
      }

      float fake = output_data[0];
 800069e:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <main+0x23c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	663b      	str	r3, [r7, #96]	@ 0x60
      float real = output_data[1];
 80006a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <main+0x23c>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	65fb      	str	r3, [r7, #92]	@ 0x5c

      if (real > fake) {
 80006aa:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80006ae:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80006b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ba:	dd0c      	ble.n	80006d6 <main+0x1be>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);  // Green on
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c2:	4825      	ldr	r0, [pc, #148]	@ (8000758 <main+0x240>)
 80006c4:	f000 fd02 	bl	80010cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ce:	4822      	ldr	r0, [pc, #136]	@ (8000758 <main+0x240>)
 80006d0:	f000 fcfc 	bl	80010cc <HAL_GPIO_WritePin>
 80006d4:	e00b      	b.n	80006ee <main+0x1d6>
      } else {
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);  // Red on
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006dc:	481e      	ldr	r0, [pc, #120]	@ (8000758 <main+0x240>)
 80006de:	f000 fcf5 	bl	80010cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e8:	481b      	ldr	r0, [pc, #108]	@ (8000758 <main+0x240>)
 80006ea:	f000 fcef 	bl	80010cc <HAL_GPIO_WritePin>
      }

      HAL_Delay(500); // Show result for 1s
 80006ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006f2:	f000 fa19 	bl	8000b28 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006fc:	4816      	ldr	r0, [pc, #88]	@ (8000758 <main+0x240>)
 80006fe:	f000 fce5 	bl	80010cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000708:	4813      	ldr	r0, [pc, #76]	@ (8000758 <main+0x240>)
 800070a:	f000 fcdf 	bl	80010cc <HAL_GPIO_WritePin>
      HAL_Delay(500);
 800070e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000712:	f000 fa09 	bl	8000b28 <HAL_Delay>
    for (int img_idx = 0; img_idx < NUM_IMAGES; ++img_idx)
 8000716:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000718:	3301      	adds	r3, #1
 800071a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800071c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800071e:	2b0b      	cmp	r3, #11
 8000720:	f77f af45 	ble.w	80005ae <main+0x96>
    }
    break;
 8000724:	bf00      	nop
 8000726:	2300      	movs	r3, #0
//    /* USER CODE END WHILE */
//
//    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8000728:	4618      	mov	r0, r3
 800072a:	3780      	adds	r7, #128	@ 0x80
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20026c6c 	.word	0x20026c6c
 8000734:	20001404 	.word	0x20001404
 8000738:	20026c70 	.word	0x20026c70
 800073c:	20026c74 	.word	0x20026c74
 8000740:	20000000 	.word	0x20000000
 8000744:	08005660 	.word	0x08005660
 8000748:	0800566c 	.word	0x0800566c
 800074c:	437f0000 	.word	0x437f0000
 8000750:	2001ac64 	.word	0x2001ac64
 8000754:	20026c64 	.word	0x20026c64
 8000758:	40021800 	.word	0x40021800

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	@ 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	@ 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f004 ff3c 	bl	80055e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <SystemClock_Config+0xd8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a2a      	ldr	r2, [pc, #168]	@ (8000834 <SystemClock_Config+0xd8>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <SystemClock_Config+0xd8>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <SystemClock_Config+0xdc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a24      	ldr	r2, [pc, #144]	@ (8000838 <SystemClock_Config+0xdc>)
 80007a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <SystemClock_Config+0xdc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2310      	movs	r3, #16
 80007c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007d0:	23b4      	movs	r3, #180	@ 0xb4
 80007d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d8:	2304      	movs	r3, #4
 80007da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fcdd 	bl	80011a0 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ec:	f000 f86e 	bl	80008cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f0:	f000 fc86 	bl	8001100 <HAL_PWREx_EnableOverDrive>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007fa:	f000 f867 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2105      	movs	r1, #5
 800081c:	4618      	mov	r0, r3
 800081e:	f000 ff37 	bl	8001690 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000828:	f000 f850 	bl	80008cc <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	3750      	adds	r7, #80	@ 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_CRC_Init+0x20>)
 8000842:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <MX_CRC_Init+0x24>)
 8000844:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_CRC_Init+0x20>)
 8000848:	f000 fa77 	bl	8000d3a <HAL_CRC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000852:	f000 f83b 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200013fc 	.word	0x200013fc
 8000860:	40023000 	.word	0x40023000

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_GPIO_Init+0x60>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <MX_GPIO_Init+0x60>)
 8000882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000886:	6313      	str	r3, [r2, #48]	@ 0x30
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_GPIO_Init+0x60>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800089a:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <MX_GPIO_Init+0x64>)
 800089c:	f000 fc16 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80008a0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80008a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_GPIO_Init+0x64>)
 80008b8:	f000 fa5c 	bl	8000d74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40021800 	.word	0x40021800

080008cc <Error_Handler>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_Delay(500);
	}
}
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <Error_Handler+0x8>

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0b      	ldr	r2, [pc, #44]	@ (8000964 <HAL_CRC_MspInit+0x3c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10d      	bne.n	8000956 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_CRC_MspInit+0x40>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a09      	ldr	r2, [pc, #36]	@ (8000968 <HAL_CRC_MspInit+0x40>)
 8000944:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <HAL_CRC_MspInit+0x40>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023000 	.word	0x40023000
 8000968:	40023800 	.word	0x40023800

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f891 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f4:	f7ff ffea 	bl	80009cc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f004 fdeb 	bl	80055f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fd79 	bl	8000518 <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	200013e0 	.word	0x200013e0
  ldr r2, =_sidata
 8000a34:	0802b0e0 	.word	0x0802b0e0
  ldr r2, =_sbss
 8000a38:	200013e0 	.word	0x200013e0
  ldr r4, =_ebss
 8000a3c:	20026dc4 	.word	0x20026dc4

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <HAL_Init+0x40>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <HAL_Init+0x40>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	@ (8000a84 <HAL_Init+0x40>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f931 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	200f      	movs	r0, #15
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff ff2e 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f93b 	bl	8000d22 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f911 	bl	8000cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000030 	.word	0x20000030
 8000ae0:	20000038 	.word	0x20000038
 8000ae4:	20000034 	.word	0x20000034

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000038 	.word	0x20000038
 8000b0c:	20026c78 	.word	0x20026c78

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20026c78 	.word	0x20026c78

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff ffee 	bl	8000b10 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffde 	bl	8000b10 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000038 	.word	0x20000038

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	@ 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	@ 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff8e 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff47 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff5c 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff8e 	bl	8000c28 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffb0 	bl	8000c90 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e00e      	b.n	8000d6a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	795b      	ldrb	r3, [r3, #5]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d105      	bne.n	8000d62 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff fde3 	bl	8000928 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e177      	b.n	8001080 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8166 	bne.w	800107a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d017      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80c0 	beq.w	800107a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b66      	ldr	r3, [pc, #408]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	4a65      	ldr	r2, [pc, #404]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0a:	4b63      	ldr	r3, [pc, #396]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a61      	ldr	r2, [pc, #388]	@ (800109c <HAL_GPIO_Init+0x328>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a58      	ldr	r2, [pc, #352]	@ (80010a0 <HAL_GPIO_Init+0x32c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d037      	beq.n	8000fb2 <HAL_GPIO_Init+0x23e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a57      	ldr	r2, [pc, #348]	@ (80010a4 <HAL_GPIO_Init+0x330>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d031      	beq.n	8000fae <HAL_GPIO_Init+0x23a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a56      	ldr	r2, [pc, #344]	@ (80010a8 <HAL_GPIO_Init+0x334>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d02b      	beq.n	8000faa <HAL_GPIO_Init+0x236>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a55      	ldr	r2, [pc, #340]	@ (80010ac <HAL_GPIO_Init+0x338>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x232>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a54      	ldr	r2, [pc, #336]	@ (80010b0 <HAL_GPIO_Init+0x33c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x22e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a53      	ldr	r2, [pc, #332]	@ (80010b4 <HAL_GPIO_Init+0x340>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x22a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a52      	ldr	r2, [pc, #328]	@ (80010b8 <HAL_GPIO_Init+0x344>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x226>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a51      	ldr	r2, [pc, #324]	@ (80010bc <HAL_GPIO_Init+0x348>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x222>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a50      	ldr	r2, [pc, #320]	@ (80010c0 <HAL_GPIO_Init+0x34c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x21e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4f      	ldr	r2, [pc, #316]	@ (80010c4 <HAL_GPIO_Init+0x350>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	e012      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f8e:	230a      	movs	r3, #10
 8000f90:	e010      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f92:	2308      	movs	r3, #8
 8000f94:	e00e      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00c      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e00a      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x240>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	@ (800109c <HAL_GPIO_Init+0x328>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80010c8 <HAL_GPIO_Init+0x354>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a34      	ldr	r2, [pc, #208]	@ (80010c8 <HAL_GPIO_Init+0x354>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b32      	ldr	r3, [pc, #200]	@ (80010c8 <HAL_GPIO_Init+0x354>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a29      	ldr	r2, [pc, #164]	@ (80010c8 <HAL_GPIO_Init+0x354>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001026:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <HAL_GPIO_Init+0x354>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104a:	4a1f      	ldr	r2, [pc, #124]	@ (80010c8 <HAL_GPIO_Init+0x354>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <HAL_GPIO_Init+0x354>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001074:	4a14      	ldr	r2, [pc, #80]	@ (80010c8 <HAL_GPIO_Init+0x354>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f ae84 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40021c00 	.word	0x40021c00
 80010c0:	40022000 	.word	0x40022000
 80010c4:	40022400 	.word	0x40022400
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	619a      	str	r2, [r3, #24]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <HAL_PWREx_EnableOverDrive+0x90>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_PWREx_EnableOverDrive+0x90>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	@ 0x40
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <HAL_PWREx_EnableOverDrive+0x90>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <HAL_PWREx_EnableOverDrive+0x94>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800112c:	f7ff fcf0 	bl	8000b10 <HAL_GetTick>
 8001130:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001132:	e009      	b.n	8001148 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001134:	f7ff fcec 	bl	8000b10 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001142:	d901      	bls.n	8001148 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e01f      	b.n	8001188 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <HAL_PWREx_EnableOverDrive+0x98>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001154:	d1ee      	bne.n	8001134 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff fcd8 	bl	8000b10 <HAL_GetTick>
 8001160:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001162:	e009      	b.n	8001178 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001164:	f7ff fcd4 	bl	8000b10 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001172:	d901      	bls.n	8001178 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e007      	b.n	8001188 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <HAL_PWREx_EnableOverDrive+0x98>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001180:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001184:	d1ee      	bne.n	8001164 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	420e0040 	.word	0x420e0040
 8001198:	40007000 	.word	0x40007000
 800119c:	420e0044 	.word	0x420e0044

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e267      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d075      	beq.n	80012aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011be:	4b88      	ldr	r3, [pc, #544]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d00c      	beq.n	80011e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ca:	4b85      	ldr	r3, [pc, #532]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d112      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d6:	4b82      	ldr	r3, [pc, #520]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011e2:	d10b      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	4b7e      	ldr	r3, [pc, #504]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d05b      	beq.n	80012a8 <HAL_RCC_OscConfig+0x108>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d157      	bne.n	80012a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e242      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001204:	d106      	bne.n	8001214 <HAL_RCC_OscConfig+0x74>
 8001206:	4b76      	ldr	r3, [pc, #472]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a75      	ldr	r2, [pc, #468]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e01d      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x98>
 800121e:	4b70      	ldr	r3, [pc, #448]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6f      	ldr	r2, [pc, #444]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b6d      	ldr	r3, [pc, #436]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6c      	ldr	r2, [pc, #432]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001238:	4b69      	ldr	r3, [pc, #420]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a68      	ldr	r2, [pc, #416]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b66      	ldr	r3, [pc, #408]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a65      	ldr	r2, [pc, #404]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800124e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fc5a 	bl	8000b10 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fc56 	bl	8000b10 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	@ 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e207      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b5b      	ldr	r3, [pc, #364]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0xc0>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fc46 	bl	8000b10 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fc42 	bl	8000b10 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	@ 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1f3      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b51      	ldr	r3, [pc, #324]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0xe8>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d063      	beq.n	800137e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012b6:	4b4a      	ldr	r3, [pc, #296]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c2:	4b47      	ldr	r3, [pc, #284]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d11c      	bne.n	8001308 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ce:	4b44      	ldr	r3, [pc, #272]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d116      	bne.n	8001308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	4b41      	ldr	r3, [pc, #260]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x152>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1c7      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b3b      	ldr	r3, [pc, #236]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4937      	ldr	r1, [pc, #220]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	e03a      	b.n	800137e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <HAL_RCC_OscConfig+0x244>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fbfb 	bl	8000b10 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fbf7 	bl	8000b10 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e1a8      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4925      	ldr	r1, [pc, #148]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001352:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <HAL_RCC_OscConfig+0x244>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fbda 	bl	8000b10 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fbd6 	bl	8000b10 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e187      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d036      	beq.n	80013f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d016      	beq.n	80013c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <HAL_RCC_OscConfig+0x248>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fbba 	bl	8000b10 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbb6 	bl	8000b10 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e167      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_RCC_OscConfig+0x240>)
 80013b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x200>
 80013be:	e01b      	b.n	80013f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_RCC_OscConfig+0x248>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fba3 	bl	8000b10 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	e00e      	b.n	80013ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff fb9f 	bl	8000b10 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d907      	bls.n	80013ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e150      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
 80013e0:	40023800 	.word	0x40023800
 80013e4:	42470000 	.word	0x42470000
 80013e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	4b88      	ldr	r3, [pc, #544]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80013ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1ea      	bne.n	80013ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8097 	beq.w	8001534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140a:	4b81      	ldr	r3, [pc, #516]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10f      	bne.n	8001436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b7d      	ldr	r3, [pc, #500]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	4a7c      	ldr	r2, [pc, #496]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	@ 0x40
 8001426:	4b7a      	ldr	r3, [pc, #488]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001432:	2301      	movs	r3, #1
 8001434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	4b77      	ldr	r3, [pc, #476]	@ (8001614 <HAL_RCC_OscConfig+0x474>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001442:	4b74      	ldr	r3, [pc, #464]	@ (8001614 <HAL_RCC_OscConfig+0x474>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a73      	ldr	r2, [pc, #460]	@ (8001614 <HAL_RCC_OscConfig+0x474>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb5f 	bl	8000b10 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7ff fb5b 	bl	8000b10 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e10c      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	4b6a      	ldr	r3, [pc, #424]	@ (8001614 <HAL_RCC_OscConfig+0x474>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x2ea>
 800147c:	4b64      	ldr	r3, [pc, #400]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001480:	4a63      	ldr	r2, [pc, #396]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	@ 0x70
 8001488:	e01c      	b.n	80014c4 <HAL_RCC_OscConfig+0x324>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b05      	cmp	r3, #5
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x30c>
 8001492:	4b5f      	ldr	r3, [pc, #380]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001496:	4a5e      	ldr	r2, [pc, #376]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6713      	str	r3, [r2, #112]	@ 0x70
 800149e:	4b5c      	ldr	r3, [pc, #368]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0x324>
 80014ac:	4b58      	ldr	r3, [pc, #352]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b0:	4a57      	ldr	r2, [pc, #348]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b8:	4b55      	ldr	r3, [pc, #340]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014bc:	4a54      	ldr	r2, [pc, #336]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80014be:	f023 0304 	bic.w	r3, r3, #4
 80014c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d015      	beq.n	80014f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fb20 	bl	8000b10 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f7ff fb1c 	bl	8000b10 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e0cb      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ea:	4b49      	ldr	r3, [pc, #292]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0ee      	beq.n	80014d4 <HAL_RCC_OscConfig+0x334>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff fb0a 	bl	8000b10 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f7ff fb06 	bl	8000b10 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e0b5      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	4b3e      	ldr	r3, [pc, #248]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1ee      	bne.n	8001500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d105      	bne.n	8001534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001528:	4b39      	ldr	r3, [pc, #228]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	4a38      	ldr	r2, [pc, #224]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 800152e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80a1 	beq.w	8001680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800153e:	4b34      	ldr	r3, [pc, #208]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b08      	cmp	r3, #8
 8001548:	d05c      	beq.n	8001604 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d141      	bne.n	80015d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001552:	4b31      	ldr	r3, [pc, #196]	@ (8001618 <HAL_RCC_OscConfig+0x478>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fada 	bl	8000b10 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fad6 	bl	8000b10 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e087      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	4b27      	ldr	r3, [pc, #156]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	019b      	lsls	r3, r3, #6
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	3b01      	subs	r3, #1
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a0:	061b      	lsls	r3, r3, #24
 80015a2:	491b      	ldr	r1, [pc, #108]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_RCC_OscConfig+0x478>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff faaf 	bl	8000b10 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff faab 	bl	8000b10 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e05c      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x416>
 80015d4:	e054      	b.n	8001680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_RCC_OscConfig+0x478>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fa98 	bl	8000b10 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fa94 	bl	8000b10 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e045      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_RCC_OscConfig+0x470>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x444>
 8001602:	e03d      	b.n	8001680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e038      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000
 8001618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800161c:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <HAL_RCC_OscConfig+0x4ec>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d028      	beq.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d121      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d11a      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800164c:	4013      	ands	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001654:	4293      	cmp	r3, r2
 8001656:	d111      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	3b01      	subs	r3, #1
 8001666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d107      	bne.n	800167c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800

08001690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0cc      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b68      	ldr	r3, [pc, #416]	@ (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d90c      	bls.n	80016cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b65      	ldr	r3, [pc, #404]	@ (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b63      	ldr	r3, [pc, #396]	@ (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0b8      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e4:	4b59      	ldr	r3, [pc, #356]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a58      	ldr	r2, [pc, #352]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016fc:	4b53      	ldr	r3, [pc, #332]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a52      	ldr	r2, [pc, #328]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001708:	4b50      	ldr	r3, [pc, #320]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	494d      	ldr	r1, [pc, #308]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d044      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b47      	ldr	r3, [pc, #284]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d119      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e07f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d003      	beq.n	800174e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174a:	2b03      	cmp	r3, #3
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4b3f      	ldr	r3, [pc, #252]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b3b      	ldr	r3, [pc, #236]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e067      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176e:	4b37      	ldr	r3, [pc, #220]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f023 0203 	bic.w	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4934      	ldr	r1, [pc, #208]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	4313      	orrs	r3, r2
 800177e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff f9c6 	bl	8000b10 <HAL_GetTick>
 8001784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	e00a      	b.n	800179e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff f9c2 	bl	8000b10 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e04f      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 020c 	and.w	r2, r3, #12
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1eb      	bne.n	8001788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d20c      	bcs.n	80017d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e032      	b.n	800183e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e4:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4916      	ldr	r1, [pc, #88]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	490e      	ldr	r1, [pc, #56]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001816:	f000 f821 	bl	800185c <HAL_RCC_GetSysClockFreq>
 800181a:	4602      	mov	r2, r0
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	490a      	ldr	r1, [pc, #40]	@ (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	5ccb      	ldrb	r3, [r1, r3]
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	4a09      	ldr	r2, [pc, #36]	@ (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f926 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00
 800184c:	40023800 	.word	0x40023800
 8001850:	080296a8 	.word	0x080296a8
 8001854:	20000030 	.word	0x20000030
 8001858:	20000034 	.word	0x20000034

0800185c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800185c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001860:	b090      	sub	sp, #64	@ 0x40
 8001862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001874:	4b59      	ldr	r3, [pc, #356]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	2b08      	cmp	r3, #8
 800187e:	d00d      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x40>
 8001880:	2b08      	cmp	r3, #8
 8001882:	f200 80a1 	bhi.w	80019c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x34>
 800188a:	2b04      	cmp	r3, #4
 800188c:	d003      	beq.n	8001896 <HAL_RCC_GetSysClockFreq+0x3a>
 800188e:	e09b      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001890:	4b53      	ldr	r3, [pc, #332]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001892:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001894:	e09b      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001896:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001898:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800189a:	e098      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800189c:	4b4f      	ldr	r3, [pc, #316]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018a6:	4b4d      	ldr	r3, [pc, #308]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d028      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b2:	4b4a      	ldr	r3, [pc, #296]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	2200      	movs	r2, #0
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018c4:	2100      	movs	r1, #0
 80018c6:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018c8:	fb03 f201 	mul.w	r2, r3, r1
 80018cc:	2300      	movs	r3, #0
 80018ce:	fb00 f303 	mul.w	r3, r0, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	4a43      	ldr	r2, [pc, #268]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80018d6:	fba0 1202 	umull	r1, r2, r0, r2
 80018da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018dc:	460a      	mov	r2, r1
 80018de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e2:	4413      	add	r3, r2
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e8:	2200      	movs	r2, #0
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	61fa      	str	r2, [r7, #28]
 80018ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018f6:	f7fe fc79 	bl	80001ec <__aeabi_uldivmod>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4613      	mov	r3, r2
 8001900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001902:	e053      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001904:	4b35      	ldr	r3, [pc, #212]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	2200      	movs	r2, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	617a      	str	r2, [r7, #20]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001916:	f04f 0b00 	mov.w	fp, #0
 800191a:	4652      	mov	r2, sl
 800191c:	465b      	mov	r3, fp
 800191e:	f04f 0000 	mov.w	r0, #0
 8001922:	f04f 0100 	mov.w	r1, #0
 8001926:	0159      	lsls	r1, r3, #5
 8001928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800192c:	0150      	lsls	r0, r2, #5
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	ebb2 080a 	subs.w	r8, r2, sl
 8001936:	eb63 090b 	sbc.w	r9, r3, fp
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001946:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800194a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800194e:	ebb2 0408 	subs.w	r4, r2, r8
 8001952:	eb63 0509 	sbc.w	r5, r3, r9
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	00eb      	lsls	r3, r5, #3
 8001960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001964:	00e2      	lsls	r2, r4, #3
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
 800196a:	eb14 030a 	adds.w	r3, r4, sl
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	eb45 030b 	adc.w	r3, r5, fp
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001982:	4629      	mov	r1, r5
 8001984:	028b      	lsls	r3, r1, #10
 8001986:	4621      	mov	r1, r4
 8001988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800198c:	4621      	mov	r1, r4
 800198e:	028a      	lsls	r2, r1, #10
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001996:	2200      	movs	r2, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	60fa      	str	r2, [r7, #12]
 800199c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a0:	f7fe fc24 	bl	80001ec <__aeabi_uldivmod>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4613      	mov	r3, r2
 80019aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019ac:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x180>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	3301      	adds	r3, #1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80019bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019c6:	e002      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3740      	adds	r7, #64	@ 0x40
 80019d4:	46bd      	mov	sp, r7
 80019d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	017d7840 	.word	0x017d7840

080019e8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	488e      	ldr	r0, [pc, #568]	@ (8001c30 <network_configure_activations+0x248>)
 80019f8:	f000 fbce 	bl	8002198 <ai_platform_get_activations_map>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 810c 	beq.w	8001c1c <network_configure_activations+0x234>
    /* Updating activations (byte) offsets */
    
    serving_default_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 6240);
 8001a04:	4b8a      	ldr	r3, [pc, #552]	@ (8001c30 <network_configure_activations+0x248>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8001a0c:	4a89      	ldr	r2, [pc, #548]	@ (8001c34 <network_configure_activations+0x24c>)
 8001a0e:	6093      	str	r3, [r2, #8]
    serving_default_input0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6240);
 8001a10:	4b87      	ldr	r3, [pc, #540]	@ (8001c30 <network_configure_activations+0x248>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8001a18:	4a86      	ldr	r2, [pc, #536]	@ (8001c34 <network_configure_activations+0x24c>)
 8001a1a:	60d3      	str	r3, [r2, #12]
    in_pad_0_output_array.data = AI_PTR(g_network_activations_map[0] + 55392);
 8001a1c:	4b84      	ldr	r3, [pc, #528]	@ (8001c30 <network_configure_activations+0x248>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8001a24:	3360      	adds	r3, #96	@ 0x60
 8001a26:	4a84      	ldr	r2, [pc, #528]	@ (8001c38 <network_configure_activations+0x250>)
 8001a28:	6093      	str	r3, [r2, #8]
    in_pad_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 55392);
 8001a2a:	4b81      	ldr	r3, [pc, #516]	@ (8001c30 <network_configure_activations+0x248>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8001a32:	3360      	adds	r3, #96	@ 0x60
 8001a34:	4a80      	ldr	r2, [pc, #512]	@ (8001c38 <network_configure_activations+0x250>)
 8001a36:	60d3      	str	r3, [r2, #12]
    pad_0_output_array.data = AI_PTR(g_network_activations_map[0] + 52272);
 8001a38:	4b7d      	ldr	r3, [pc, #500]	@ (8001c30 <network_configure_activations+0x248>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
 8001a40:	3330      	adds	r3, #48	@ 0x30
 8001a42:	4a7e      	ldr	r2, [pc, #504]	@ (8001c3c <network_configure_activations+0x254>)
 8001a44:	6093      	str	r3, [r2, #8]
    pad_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 52272);
 8001a46:	4b7a      	ldr	r3, [pc, #488]	@ (8001c30 <network_configure_activations+0x248>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
 8001a4e:	3330      	adds	r3, #48	@ 0x30
 8001a50:	4a7a      	ldr	r2, [pc, #488]	@ (8001c3c <network_configure_activations+0x254>)
 8001a52:	60d3      	str	r3, [r2, #12]
    transpose_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001a54:	4b76      	ldr	r3, [pc, #472]	@ (8001c30 <network_configure_activations+0x248>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a79      	ldr	r2, [pc, #484]	@ (8001c40 <network_configure_activations+0x258>)
 8001a5a:	6093      	str	r3, [r2, #8]
    transpose_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001a5c:	4b74      	ldr	r3, [pc, #464]	@ (8001c30 <network_configure_activations+0x248>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a77      	ldr	r2, [pc, #476]	@ (8001c40 <network_configure_activations+0x258>)
 8001a62:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 52272);
 8001a64:	4b72      	ldr	r3, [pc, #456]	@ (8001c30 <network_configure_activations+0x248>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
 8001a6c:	3330      	adds	r3, #48	@ 0x30
 8001a6e:	4a75      	ldr	r2, [pc, #468]	@ (8001c44 <network_configure_activations+0x25c>)
 8001a70:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 52272);
 8001a72:	4b6f      	ldr	r3, [pc, #444]	@ (8001c30 <network_configure_activations+0x248>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
 8001a7a:	3330      	adds	r3, #48	@ 0x30
 8001a7c:	4a71      	ldr	r2, [pc, #452]	@ (8001c44 <network_configure_activations+0x25c>)
 8001a7e:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 52380);
 8001a80:	4b6b      	ldr	r3, [pc, #428]	@ (8001c30 <network_configure_activations+0x248>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
 8001a88:	339c      	adds	r3, #156	@ 0x9c
 8001a8a:	4a6f      	ldr	r2, [pc, #444]	@ (8001c48 <network_configure_activations+0x260>)
 8001a8c:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 52380);
 8001a8e:	4b68      	ldr	r3, [pc, #416]	@ (8001c30 <network_configure_activations+0x248>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 434c 	add.w	r3, r3, #52224	@ 0xcc00
 8001a96:	339c      	adds	r3, #156	@ 0x9c
 8001a98:	4a6b      	ldr	r2, [pc, #428]	@ (8001c48 <network_configure_activations+0x260>)
 8001a9a:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 54428);
 8001a9c:	4b64      	ldr	r3, [pc, #400]	@ (8001c30 <network_configure_activations+0x248>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f503 4354 	add.w	r3, r3, #54272	@ 0xd400
 8001aa4:	339c      	adds	r3, #156	@ 0x9c
 8001aa6:	4a69      	ldr	r2, [pc, #420]	@ (8001c4c <network_configure_activations+0x264>)
 8001aa8:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 54428);
 8001aaa:	4b61      	ldr	r3, [pc, #388]	@ (8001c30 <network_configure_activations+0x248>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 4354 	add.w	r3, r3, #54272	@ 0xd400
 8001ab2:	339c      	adds	r3, #156	@ 0x9c
 8001ab4:	4a65      	ldr	r2, [pc, #404]	@ (8001c4c <network_configure_activations+0x264>)
 8001ab6:	60d3      	str	r3, [r2, #12]
    in_pad_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c30 <network_configure_activations+0x248>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a64      	ldr	r2, [pc, #400]	@ (8001c50 <network_configure_activations+0x268>)
 8001abe:	6093      	str	r3, [r2, #8]
    in_pad_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001ac0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c30 <network_configure_activations+0x248>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a62      	ldr	r2, [pc, #392]	@ (8001c50 <network_configure_activations+0x268>)
 8001ac6:	60d3      	str	r3, [r2, #12]
    pad_5_output_array.data = AI_PTR(g_network_activations_map[0] + 16384);
 8001ac8:	4b59      	ldr	r3, [pc, #356]	@ (8001c30 <network_configure_activations+0x248>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001ad0:	4a60      	ldr	r2, [pc, #384]	@ (8001c54 <network_configure_activations+0x26c>)
 8001ad2:	6093      	str	r3, [r2, #8]
    pad_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 16384);
 8001ad4:	4b56      	ldr	r3, [pc, #344]	@ (8001c30 <network_configure_activations+0x248>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001adc:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <network_configure_activations+0x26c>)
 8001ade:	60d3      	str	r3, [r2, #12]
    transpose_6_output_array.data = AI_PTR(g_network_activations_map[0] + 34880);
 8001ae0:	4b53      	ldr	r3, [pc, #332]	@ (8001c30 <network_configure_activations+0x248>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 4308 	add.w	r3, r3, #34816	@ 0x8800
 8001ae8:	3340      	adds	r3, #64	@ 0x40
 8001aea:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <network_configure_activations+0x270>)
 8001aec:	6093      	str	r3, [r2, #8]
    transpose_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 34880);
 8001aee:	4b50      	ldr	r3, [pc, #320]	@ (8001c30 <network_configure_activations+0x248>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 4308 	add.w	r3, r3, #34816	@ 0x8800
 8001af6:	3340      	adds	r3, #64	@ 0x40
 8001af8:	4a57      	ldr	r2, [pc, #348]	@ (8001c58 <network_configure_activations+0x270>)
 8001afa:	60d3      	str	r3, [r2, #12]
    conv2d_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001afc:	4b4c      	ldr	r3, [pc, #304]	@ (8001c30 <network_configure_activations+0x248>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a56      	ldr	r2, [pc, #344]	@ (8001c5c <network_configure_activations+0x274>)
 8001b02:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001b04:	4b4a      	ldr	r3, [pc, #296]	@ (8001c30 <network_configure_activations+0x248>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a54      	ldr	r2, [pc, #336]	@ (8001c5c <network_configure_activations+0x274>)
 8001b0a:	60d3      	str	r3, [r2, #12]
    conv2d_7_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 144);
 8001b0c:	4b48      	ldr	r3, [pc, #288]	@ (8001c30 <network_configure_activations+0x248>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3390      	adds	r3, #144	@ 0x90
 8001b12:	4a53      	ldr	r2, [pc, #332]	@ (8001c60 <network_configure_activations+0x278>)
 8001b14:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 144);
 8001b16:	4b46      	ldr	r3, [pc, #280]	@ (8001c30 <network_configure_activations+0x248>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3390      	adds	r3, #144	@ 0x90
 8001b1c:	4a50      	ldr	r2, [pc, #320]	@ (8001c60 <network_configure_activations+0x278>)
 8001b1e:	60d3      	str	r3, [r2, #12]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 2192);
 8001b20:	4b43      	ldr	r3, [pc, #268]	@ (8001c30 <network_configure_activations+0x248>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8001b28:	4a4e      	ldr	r2, [pc, #312]	@ (8001c64 <network_configure_activations+0x27c>)
 8001b2a:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2192);
 8001b2c:	4b40      	ldr	r3, [pc, #256]	@ (8001c30 <network_configure_activations+0x248>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 6309 	add.w	r3, r3, #2192	@ 0x890
 8001b34:	4a4b      	ldr	r2, [pc, #300]	@ (8001c64 <network_configure_activations+0x27c>)
 8001b36:	60d3      	str	r3, [r2, #12]
    in_pad_10_output_array.data = AI_PTR(g_network_activations_map[0] + 10384);
 8001b38:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <network_configure_activations+0x248>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 8001b40:	3310      	adds	r3, #16
 8001b42:	4a49      	ldr	r2, [pc, #292]	@ (8001c68 <network_configure_activations+0x280>)
 8001b44:	6093      	str	r3, [r2, #8]
    in_pad_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 10384);
 8001b46:	4b3a      	ldr	r3, [pc, #232]	@ (8001c30 <network_configure_activations+0x248>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 8001b4e:	3310      	adds	r3, #16
 8001b50:	4a45      	ldr	r2, [pc, #276]	@ (8001c68 <network_configure_activations+0x280>)
 8001b52:	60d3      	str	r3, [r2, #12]
    pad_10_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b54:	4b36      	ldr	r3, [pc, #216]	@ (8001c30 <network_configure_activations+0x248>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a44      	ldr	r2, [pc, #272]	@ (8001c6c <network_configure_activations+0x284>)
 8001b5a:	6093      	str	r3, [r2, #8]
    pad_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001b5c:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <network_configure_activations+0x248>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a42      	ldr	r2, [pc, #264]	@ (8001c6c <network_configure_activations+0x284>)
 8001b62:	60d3      	str	r3, [r2, #12]
    transpose_11_output_array.data = AI_PTR(g_network_activations_map[0] + 10368);
 8001b64:	4b32      	ldr	r3, [pc, #200]	@ (8001c30 <network_configure_activations+0x248>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 8001b6c:	4a40      	ldr	r2, [pc, #256]	@ (8001c70 <network_configure_activations+0x288>)
 8001b6e:	6093      	str	r3, [r2, #8]
    transpose_11_output_array.data_start = AI_PTR(g_network_activations_map[0] + 10368);
 8001b70:	4b2f      	ldr	r3, [pc, #188]	@ (8001c30 <network_configure_activations+0x248>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 5322 	add.w	r3, r3, #10368	@ 0x2880
 8001b78:	4a3d      	ldr	r2, [pc, #244]	@ (8001c70 <network_configure_activations+0x288>)
 8001b7a:	60d3      	str	r3, [r2, #12]
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c30 <network_configure_activations+0x248>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a3c      	ldr	r2, [pc, #240]	@ (8001c74 <network_configure_activations+0x28c>)
 8001b82:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001b84:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <network_configure_activations+0x248>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a3a      	ldr	r2, [pc, #232]	@ (8001c74 <network_configure_activations+0x28c>)
 8001b8a:	60d3      	str	r3, [r2, #12]
    conv2d_12_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 288);
 8001b8c:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <network_configure_activations+0x248>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001b94:	4a38      	ldr	r2, [pc, #224]	@ (8001c78 <network_configure_activations+0x290>)
 8001b96:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 288);
 8001b98:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <network_configure_activations+0x248>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001ba0:	4a35      	ldr	r2, [pc, #212]	@ (8001c78 <network_configure_activations+0x290>)
 8001ba2:	60d3      	str	r3, [r2, #12]
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[0] + 2336);
 8001ba4:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <network_configure_activations+0x248>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8001bac:	4a33      	ldr	r2, [pc, #204]	@ (8001c7c <network_configure_activations+0x294>)
 8001bae:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2336);
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <network_configure_activations+0x248>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 8001bb8:	4a30      	ldr	r2, [pc, #192]	@ (8001c7c <network_configure_activations+0x294>)
 8001bba:	60d3      	str	r3, [r2, #12]
    pool_14_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <network_configure_activations+0x248>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c80 <network_configure_activations+0x298>)
 8001bc2:	6093      	str	r3, [r2, #8]
    pool_14_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <network_configure_activations+0x248>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c80 <network_configure_activations+0x298>)
 8001bca:	60d3      	str	r3, [r2, #12]
    transpose_15_output_array.data = AI_PTR(g_network_activations_map[0] + 1024);
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <network_configure_activations+0x248>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c84 <network_configure_activations+0x29c>)
 8001bd6:	6093      	str	r3, [r2, #8]
    transpose_15_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1024);
 8001bd8:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <network_configure_activations+0x248>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001be0:	4a28      	ldr	r2, [pc, #160]	@ (8001c84 <network_configure_activations+0x29c>)
 8001be2:	60d3      	str	r3, [r2, #12]
    reduce_16_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <network_configure_activations+0x248>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a27      	ldr	r2, [pc, #156]	@ (8001c88 <network_configure_activations+0x2a0>)
 8001bea:	6093      	str	r3, [r2, #8]
    reduce_16_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001bec:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <network_configure_activations+0x248>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a25      	ldr	r2, [pc, #148]	@ (8001c88 <network_configure_activations+0x2a0>)
 8001bf2:	60d3      	str	r3, [r2, #12]
    reduce_16_Mul_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <network_configure_activations+0x248>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3340      	adds	r3, #64	@ 0x40
 8001bfa:	4a24      	ldr	r2, [pc, #144]	@ (8001c8c <network_configure_activations+0x2a4>)
 8001bfc:	6093      	str	r3, [r2, #8]
    reduce_16_Mul_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <network_configure_activations+0x248>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3340      	adds	r3, #64	@ 0x40
 8001c04:	4a21      	ldr	r2, [pc, #132]	@ (8001c8c <network_configure_activations+0x2a4>)
 8001c06:	60d3      	str	r3, [r2, #12]
    gemm_18_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8001c08:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <network_configure_activations+0x248>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a20      	ldr	r2, [pc, #128]	@ (8001c90 <network_configure_activations+0x2a8>)
 8001c0e:	6093      	str	r3, [r2, #8]
    gemm_18_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8001c10:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <network_configure_activations+0x248>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <network_configure_activations+0x2a8>)
 8001c16:	60d3      	str	r3, [r2, #12]
    return true;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e005      	b.n	8001c28 <network_configure_activations+0x240>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8001c1c:	2213      	movs	r2, #19
 8001c1e:	2130      	movs	r1, #48	@ 0x30
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fb0d 	bl	8002240 <ai_platform_network_set_error>
  return false;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20026c7c 	.word	0x20026c7c
 8001c34:	2000003c 	.word	0x2000003c
 8001c38:	2000004c 	.word	0x2000004c
 8001c3c:	2000005c 	.word	0x2000005c
 8001c40:	2000006c 	.word	0x2000006c
 8001c44:	200001fc 	.word	0x200001fc
 8001c48:	2000020c 	.word	0x2000020c
 8001c4c:	2000007c 	.word	0x2000007c
 8001c50:	2000008c 	.word	0x2000008c
 8001c54:	2000009c 	.word	0x2000009c
 8001c58:	200000ac 	.word	0x200000ac
 8001c5c:	2000021c 	.word	0x2000021c
 8001c60:	2000022c 	.word	0x2000022c
 8001c64:	200000bc 	.word	0x200000bc
 8001c68:	200000cc 	.word	0x200000cc
 8001c6c:	200000dc 	.word	0x200000dc
 8001c70:	200000ec 	.word	0x200000ec
 8001c74:	2000023c 	.word	0x2000023c
 8001c78:	2000024c 	.word	0x2000024c
 8001c7c:	200000fc 	.word	0x200000fc
 8001c80:	2000010c 	.word	0x2000010c
 8001c84:	2000011c 	.word	0x2000011c
 8001c88:	2000012c 	.word	0x2000012c
 8001c8c:	2000013c 	.word	0x2000013c
 8001c90:	2000014c 	.word	0x2000014c

08001c94 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4864      	ldr	r0, [pc, #400]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001ca4:	f000 fa24 	bl	80020f0 <ai_platform_get_weights_map>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80b8 	beq.w	8001e20 <network_configure_weights+0x18c>
    /* Updating weights (byte) offsets */
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8001cb0:	4b61      	ldr	r3, [pc, #388]	@ (8001e38 <network_configure_weights+0x1a4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cb8:	4a5f      	ldr	r2, [pc, #380]	@ (8001e38 <network_configure_weights+0x1a4>)
 8001cba:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5d      	ldr	r2, [pc, #372]	@ (8001e38 <network_configure_weights+0x1a4>)
 8001cc2:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8001cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a5b      	ldr	r2, [pc, #364]	@ (8001e38 <network_configure_weights+0x1a4>)
 8001cca:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	@ (8001e3c <network_configure_weights+0x1a8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cd4:	4a59      	ldr	r2, [pc, #356]	@ (8001e3c <network_configure_weights+0x1a8>)
 8001cd6:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 432);
 8001cd8:	4b56      	ldr	r3, [pc, #344]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001ce0:	4a56      	ldr	r2, [pc, #344]	@ (8001e3c <network_configure_weights+0x1a8>)
 8001ce2:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 432);
 8001ce4:	4b53      	ldr	r3, [pc, #332]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001cec:	4a53      	ldr	r2, [pc, #332]	@ (8001e3c <network_configure_weights+0x1a8>)
 8001cee:	60d3      	str	r3, [r2, #12]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8001cf0:	4b53      	ldr	r3, [pc, #332]	@ (8001e40 <network_configure_weights+0x1ac>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cf8:	4a51      	ldr	r2, [pc, #324]	@ (8001e40 <network_configure_weights+0x1ac>)
 8001cfa:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 448);
 8001cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8001d04:	4a4e      	ldr	r2, [pc, #312]	@ (8001e40 <network_configure_weights+0x1ac>)
 8001d06:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 448);
 8001d08:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8001d10:	4a4b      	ldr	r2, [pc, #300]	@ (8001e40 <network_configure_weights+0x1ac>)
 8001d12:	60d3      	str	r3, [r2, #12]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8001d14:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <network_configure_weights+0x1b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d1c:	4a49      	ldr	r2, [pc, #292]	@ (8001e44 <network_configure_weights+0x1b0>)
 8001d1e:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 1600);
 8001d20:	4b44      	ldr	r3, [pc, #272]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001d28:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <network_configure_weights+0x1b0>)
 8001d2a:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1600);
 8001d2c:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001d34:	4a43      	ldr	r2, [pc, #268]	@ (8001e44 <network_configure_weights+0x1b0>)
 8001d36:	60d3      	str	r3, [r2, #12]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8001d38:	4b43      	ldr	r3, [pc, #268]	@ (8001e48 <network_configure_weights+0x1b4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d40:	4a41      	ldr	r2, [pc, #260]	@ (8001e48 <network_configure_weights+0x1b4>)
 8001d42:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 1632);
 8001d44:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8001d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8001e48 <network_configure_weights+0x1b4>)
 8001d4e:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1632);
 8001d50:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8001d58:	4a3b      	ldr	r2, [pc, #236]	@ (8001e48 <network_configure_weights+0x1b4>)
 8001d5a:	60d3      	str	r3, [r2, #12]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <network_configure_weights+0x1b8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d64:	4a39      	ldr	r2, [pc, #228]	@ (8001e4c <network_configure_weights+0x1b8>)
 8001d66:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 6240);
 8001d68:	4b32      	ldr	r3, [pc, #200]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8001d70:	4a36      	ldr	r2, [pc, #216]	@ (8001e4c <network_configure_weights+0x1b8>)
 8001d72:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 6240);
 8001d74:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8001d7c:	4a33      	ldr	r2, [pc, #204]	@ (8001e4c <network_configure_weights+0x1b8>)
 8001d7e:	60d3      	str	r3, [r2, #12]
    reduce_16_Mul_scale_array.format |= AI_FMT_FLAG_CONST;
 8001d80:	4b33      	ldr	r3, [pc, #204]	@ (8001e50 <network_configure_weights+0x1bc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d88:	4a31      	ldr	r2, [pc, #196]	@ (8001e50 <network_configure_weights+0x1bc>)
 8001d8a:	6013      	str	r3, [r2, #0]
    reduce_16_Mul_scale_array.data = AI_PTR(g_network_weights_map[0] + 6304);
 8001d8c:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f503 53c5 	add.w	r3, r3, #6304	@ 0x18a0
 8001d94:	4a2e      	ldr	r2, [pc, #184]	@ (8001e50 <network_configure_weights+0x1bc>)
 8001d96:	6093      	str	r3, [r2, #8]
    reduce_16_Mul_scale_array.data_start = AI_PTR(g_network_weights_map[0] + 6304);
 8001d98:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 53c5 	add.w	r3, r3, #6304	@ 0x18a0
 8001da0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e50 <network_configure_weights+0x1bc>)
 8001da2:	60d3      	str	r3, [r2, #12]
    reduce_16_Mul_bias_array.format |= AI_FMT_FLAG_CONST;
 8001da4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e54 <network_configure_weights+0x1c0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dac:	4a29      	ldr	r2, [pc, #164]	@ (8001e54 <network_configure_weights+0x1c0>)
 8001dae:	6013      	str	r3, [r2, #0]
    reduce_16_Mul_bias_array.data = AI_PTR(g_network_weights_map[0] + 6308);
 8001db0:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f503 53c5 	add.w	r3, r3, #6304	@ 0x18a0
 8001db8:	3304      	adds	r3, #4
 8001dba:	4a26      	ldr	r2, [pc, #152]	@ (8001e54 <network_configure_weights+0x1c0>)
 8001dbc:	6093      	str	r3, [r2, #8]
    reduce_16_Mul_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 6308);
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 53c5 	add.w	r3, r3, #6304	@ 0x18a0
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4a22      	ldr	r2, [pc, #136]	@ (8001e54 <network_configure_weights+0x1c0>)
 8001dca:	60d3      	str	r3, [r2, #12]
    gemm_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8001dcc:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <network_configure_weights+0x1c4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dd4:	4a20      	ldr	r2, [pc, #128]	@ (8001e58 <network_configure_weights+0x1c4>)
 8001dd6:	6013      	str	r3, [r2, #0]
    gemm_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 6312);
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 53c5 	add.w	r3, r3, #6304	@ 0x18a0
 8001de0:	3308      	adds	r3, #8
 8001de2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <network_configure_weights+0x1c4>)
 8001de4:	6093      	str	r3, [r2, #8]
    gemm_18_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 6312);
 8001de6:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 53c5 	add.w	r3, r3, #6304	@ 0x18a0
 8001dee:	3308      	adds	r3, #8
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <network_configure_weights+0x1c4>)
 8001df2:	60d3      	str	r3, [r2, #12]
    gemm_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <network_configure_weights+0x1c8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dfc:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <network_configure_weights+0x1c8>)
 8001dfe:	6013      	str	r3, [r2, #0]
    gemm_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 6440);
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f503 53c9 	add.w	r3, r3, #6432	@ 0x1920
 8001e08:	3308      	adds	r3, #8
 8001e0a:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <network_configure_weights+0x1c8>)
 8001e0c:	6093      	str	r3, [r2, #8]
    gemm_18_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 6440);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <network_configure_weights+0x1a0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 53c9 	add.w	r3, r3, #6432	@ 0x1920
 8001e16:	3308      	adds	r3, #8
 8001e18:	4a10      	ldr	r2, [pc, #64]	@ (8001e5c <network_configure_weights+0x1c8>)
 8001e1a:	60d3      	str	r3, [r2, #12]
    return true;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e005      	b.n	8001e2c <network_configure_weights+0x198>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8001e20:	2212      	movs	r2, #18
 8001e22:	2130      	movs	r1, #48	@ 0x30
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fa0b 	bl	8002240 <ai_platform_network_set_error>
  return false;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20026c80 	.word	0x20026c80
 8001e38:	2000015c 	.word	0x2000015c
 8001e3c:	2000016c 	.word	0x2000016c
 8001e40:	2000017c 	.word	0x2000017c
 8001e44:	2000018c 	.word	0x2000018c
 8001e48:	2000019c 	.word	0x2000019c
 8001e4c:	200001ac 	.word	0x200001ac
 8001e50:	200001bc 	.word	0x200001bc
 8001e54:	200001cc 	.word	0x200001cc
 8001e58:	200001dc 	.word	0x200001dc
 8001e5c:	200001ec 	.word	0x200001ec

08001e60 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	2305      	movs	r3, #5
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2301      	movs	r3, #1
 8001e74:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <ai_network_create+0x28>)
 8001e76:	6839      	ldr	r1, [r7, #0]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fad1 	bl	8002420 <ai_platform_network_create>
 8001e7e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20001330 	.word	0x20001330

08001e8c <ai_network_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d104      	bne.n	8001ea6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <ai_network_inputs_get+0x2c>)
 8001e9e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a06      	ldr	r2, [pc, #24]	@ (8001ebc <ai_network_inputs_get+0x30>)
 8001ea4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8001ea6:	6839      	ldr	r1, [r7, #0]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f9cf 	bl	800224c <ai_platform_inputs_get>
 8001eae:	4603      	mov	r3, r0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20001330 	.word	0x20001330
 8001ebc:	a1c00100 	.word	0xa1c00100

08001ec0 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <ai_network_outputs_get+0x2c>)
 8001ed2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <ai_network_outputs_get+0x30>)
 8001ed8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8001eda:	6839      	ldr	r1, [r7, #0]
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fa2b 	bl	8002338 <ai_platform_outputs_get>
 8001ee2:	4603      	mov	r3, r0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20001330 	.word	0x20001330
 8001ef0:	a1c00100 	.word	0xa1c00100

08001ef4 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8001efe:	6839      	ldr	r1, [r7, #0]
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 facf 	bl	80024a4 <ai_platform_network_init>
 8001f06:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <ai_network_init+0x22>
 8001f12:	2300      	movs	r3, #0
 8001f14:	e026      	b.n	8001f64 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 8001f16:	6839      	ldr	r1, [r7, #0]
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff febb 	bl	8001c94 <network_configure_weights>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf14      	ite	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	2300      	moveq	r3, #0
 8001f2e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8001f30:	6839      	ldr	r1, [r7, #0]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fd58 	bl	80019e8 <network_configure_activations>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fb78 	bl	8002640 <ai_platform_network_post_init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	7afb      	ldrb	r3, [r7, #11]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	72fb      	strb	r3, [r7, #11]

  return ok;
 8001f62:	7afb      	ldrb	r3, [r7, #11]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fb8f 	bl	80026a0 <ai_platform_network_process>
 8001f82:	4603      	mov	r3, r0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8001f8c:	b4b0      	push	{r4, r5, r7}
 8001f8e:	b08f      	sub	sp, #60	@ 0x3c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8001f96:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <ai_network_data_activations_buffer_get+0x60>)
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	623b      	str	r3, [r7, #32]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <ai_network_data_activations_buffer_get+0x64>)
 8001fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	f362 231f 	bfi	r3, r2, #8, #24
 8001fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <ai_network_data_activations_buffer_get+0x68>)
 8001fbc:	f107 040c 	add.w	r4, r7, #12
 8001fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	461d      	mov	r5, r3
 8001fd0:	f107 041c 	add.w	r4, r7, #28
 8001fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fdc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	373c      	adds	r7, #60	@ 0x3c
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bcb0      	pop	{r4, r5, r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	00040440 	.word	0x00040440
 8001ff0:	00019860 	.word	0x00019860
 8001ff4:	08005678 	.word	0x08005678

08001ff8 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 8001ff8:	b4b0      	push	{r4, r5, r7}
 8001ffa:	b08f      	sub	sp, #60	@ 0x3c
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <ai_network_data_weights_buffer_get+0x60>)
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	623b      	str	r3, [r7, #32]
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
 800200e:	2300      	movs	r3, #0
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002012:	f641 1330 	movw	r3, #6448	@ 0x1930
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002018:	2301      	movs	r3, #1
 800201a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800201e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002020:	2204      	movs	r2, #4
 8002022:	f362 231f 	bfi	r3, r2, #8, #24
 8002026:	633b      	str	r3, [r7, #48]	@ 0x30
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <ai_network_data_weights_buffer_get+0x64>)
 800202a:	f107 040c 	add.w	r4, r7, #12
 800202e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	461d      	mov	r5, r3
 800203e:	f107 041c 	add.w	r4, r7, #28
 8002042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002046:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800204a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	373c      	adds	r7, #60	@ 0x3c
 8002052:	46bd      	mov	sp, r7
 8002054:	bcb0      	pop	{r4, r5, r7}
 8002056:	4770      	bx	lr
 8002058:	40040440 	.word	0x40040440
 800205c:	08005688 	.word	0x08005688

08002060 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 8002064:	4b02      	ldr	r3, [pc, #8]	@ (8002070 <ai_network_data_weights_get+0x10>)

}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	200013d4 	.word	0x200013d4

08002074 <ai_buffer_get_size>:
 8002074:	b378      	cbz	r0, 80020d6 <ai_buffer_get_size+0x62>
 8002076:	b410      	push	{r4}
 8002078:	6803      	ldr	r3, [r0, #0]
 800207a:	4a17      	ldr	r2, [pc, #92]	@ (80020d8 <ai_buffer_get_size+0x64>)
 800207c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8002080:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002084:	4293      	cmp	r3, r2
 8002086:	d01e      	beq.n	80020c6 <ai_buffer_get_size+0x52>
 8002088:	6984      	ldr	r4, [r0, #24]
 800208a:	6862      	ldr	r2, [r4, #4]
 800208c:	7d03      	ldrb	r3, [r0, #20]
 800208e:	6941      	ldr	r1, [r0, #20]
 8002090:	f1a3 0301 	sub.w	r3, r3, #1
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800209e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80020a2:	da0b      	bge.n	80020bc <ai_buffer_get_size+0x48>
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d102      	bne.n	80020ae <ai_buffer_get_size+0x3a>
 80020a8:	2802      	cmp	r0, #2
 80020aa:	d007      	beq.n	80020bc <ai_buffer_get_size+0x48>
 80020ac:	2302      	movs	r3, #2
 80020ae:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80020b2:	3301      	adds	r3, #1
 80020b4:	4298      	cmp	r0, r3
 80020b6:	fb01 f202 	mul.w	r2, r1, r2
 80020ba:	d1f3      	bne.n	80020a4 <ai_buffer_get_size+0x30>
 80020bc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80020c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	2900      	cmp	r1, #0
 80020c8:	d0de      	beq.n	8002088 <ai_buffer_get_size+0x14>
 80020ca:	6984      	ldr	r4, [r0, #24]
 80020cc:	6862      	ldr	r2, [r4, #4]
 80020ce:	321f      	adds	r2, #31
 80020d0:	f022 021f 	bic.w	r2, r2, #31
 80020d4:	e7da      	b.n	800208c <ai_buffer_get_size+0x18>
 80020d6:	4770      	bx	lr
 80020d8:	000400c0 	.word	0x000400c0

080020dc <ai_buffer_array_sane>:
 80020dc:	b138      	cbz	r0, 80020ee <ai_buffer_array_sane+0x12>
 80020de:	6843      	ldr	r3, [r0, #4]
 80020e0:	b123      	cbz	r3, 80020ec <ai_buffer_array_sane+0x10>
 80020e2:	8840      	ldrh	r0, [r0, #2]
 80020e4:	3800      	subs	r0, #0
 80020e6:	bf18      	it	ne
 80020e8:	2001      	movne	r0, #1
 80020ea:	4770      	bx	lr
 80020ec:	4618      	mov	r0, r3
 80020ee:	4770      	bx	lr

080020f0 <ai_platform_get_weights_map>:
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d037      	beq.n	8002164 <ai_platform_get_weights_map+0x74>
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	4604      	mov	r4, r0
 80020f8:	b1a0      	cbz	r0, 8002124 <ai_platform_get_weights_map+0x34>
 80020fa:	460f      	mov	r7, r1
 80020fc:	b191      	cbz	r1, 8002124 <ai_platform_get_weights_map+0x34>
 80020fe:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <ai_platform_get_weights_map+0xa4>)
 8002100:	6810      	ldr	r0, [r2, #0]
 8002102:	4298      	cmp	r0, r3
 8002104:	4615      	mov	r5, r2
 8002106:	d00f      	beq.n	8002128 <ai_platform_get_weights_map+0x38>
 8002108:	6855      	ldr	r5, [r2, #4]
 800210a:	b15d      	cbz	r5, 8002124 <ai_platform_get_weights_map+0x34>
 800210c:	682e      	ldr	r6, [r5, #0]
 800210e:	429e      	cmp	r6, r3
 8002110:	d02a      	beq.n	8002168 <ai_platform_get_weights_map+0x78>
 8002112:	f1a1 0001 	sub.w	r0, r1, #1
 8002116:	6025      	str	r5, [r4, #0]
 8002118:	fab0 f080 	clz	r0, r0
 800211c:	0940      	lsrs	r0, r0, #5
 800211e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002120:	42a7      	cmp	r7, r4
 8002122:	d034      	beq.n	800218e <ai_platform_get_weights_map+0x9e>
 8002124:	2000      	movs	r0, #0
 8002126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002128:	1d10      	adds	r0, r2, #4
 800212a:	f7ff ffd7 	bl	80020dc <ai_buffer_array_sane>
 800212e:	2800      	cmp	r0, #0
 8002130:	d0f8      	beq.n	8002124 <ai_platform_get_weights_map+0x34>
 8002132:	88eb      	ldrh	r3, [r5, #6]
 8002134:	429f      	cmp	r7, r3
 8002136:	d1f5      	bne.n	8002124 <ai_platform_get_weights_map+0x34>
 8002138:	f04f 0c00 	mov.w	ip, #0
 800213c:	1f20      	subs	r0, r4, #4
 800213e:	46e6      	mov	lr, ip
 8002140:	68ab      	ldr	r3, [r5, #8]
 8002142:	4463      	add	r3, ip
 8002144:	f10c 0c1c 	add.w	ip, ip, #28
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	b12b      	cbz	r3, 8002158 <ai_platform_get_weights_map+0x68>
 800214c:	f10e 0e01 	add.w	lr, lr, #1
 8002150:	4577      	cmp	r7, lr
 8002152:	f840 3f04 	str.w	r3, [r0, #4]!
 8002156:	d1f3      	bne.n	8002140 <ai_platform_get_weights_map+0x50>
 8002158:	eba7 000e 	sub.w	r0, r7, lr
 800215c:	fab0 f080 	clz	r0, r0
 8002160:	0940      	lsrs	r0, r0, #5
 8002162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002164:	2000      	movs	r0, #0
 8002166:	4770      	bx	lr
 8002168:	1f20      	subs	r0, r4, #4
 800216a:	462a      	mov	r2, r5
 800216c:	2400      	movs	r4, #0
 800216e:	e000      	b.n	8002172 <ai_platform_get_weights_map+0x82>
 8002170:	461c      	mov	r4, r3
 8002172:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8002176:	42b3      	cmp	r3, r6
 8002178:	d0d2      	beq.n	8002120 <ai_platform_get_weights_map+0x30>
 800217a:	f840 3f04 	str.w	r3, [r0, #4]!
 800217e:	1c63      	adds	r3, r4, #1
 8002180:	429f      	cmp	r7, r3
 8002182:	d1f5      	bne.n	8002170 <ai_platform_get_weights_map+0x80>
 8002184:	3402      	adds	r4, #2
 8002186:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800218a:	42b3      	cmp	r3, r6
 800218c:	d1ca      	bne.n	8002124 <ai_platform_get_weights_map+0x34>
 800218e:	2001      	movs	r0, #1
 8002190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002192:	bf00      	nop
 8002194:	a1facade 	.word	0xa1facade

08002198 <ai_platform_get_activations_map>:
 8002198:	2a00      	cmp	r2, #0
 800219a:	d038      	beq.n	800220e <ai_platform_get_activations_map+0x76>
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	4604      	mov	r4, r0
 80021a0:	b1a0      	cbz	r0, 80021cc <ai_platform_get_activations_map+0x34>
 80021a2:	460f      	mov	r7, r1
 80021a4:	b191      	cbz	r1, 80021cc <ai_platform_get_activations_map+0x34>
 80021a6:	4b25      	ldr	r3, [pc, #148]	@ (800223c <ai_platform_get_activations_map+0xa4>)
 80021a8:	6810      	ldr	r0, [r2, #0]
 80021aa:	4298      	cmp	r0, r3
 80021ac:	4615      	mov	r5, r2
 80021ae:	d00f      	beq.n	80021d0 <ai_platform_get_activations_map+0x38>
 80021b0:	6a15      	ldr	r5, [r2, #32]
 80021b2:	b15d      	cbz	r5, 80021cc <ai_platform_get_activations_map+0x34>
 80021b4:	682e      	ldr	r6, [r5, #0]
 80021b6:	429e      	cmp	r6, r3
 80021b8:	d02b      	beq.n	8002212 <ai_platform_get_activations_map+0x7a>
 80021ba:	f1a1 0001 	sub.w	r0, r1, #1
 80021be:	6025      	str	r5, [r4, #0]
 80021c0:	fab0 f080 	clz	r0, r0
 80021c4:	0940      	lsrs	r0, r0, #5
 80021c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021c8:	42a7      	cmp	r7, r4
 80021ca:	d035      	beq.n	8002238 <ai_platform_get_activations_map+0xa0>
 80021cc:	2000      	movs	r0, #0
 80021ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021d0:	f102 000c 	add.w	r0, r2, #12
 80021d4:	f7ff ff82 	bl	80020dc <ai_buffer_array_sane>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d0f7      	beq.n	80021cc <ai_platform_get_activations_map+0x34>
 80021dc:	89eb      	ldrh	r3, [r5, #14]
 80021de:	429f      	cmp	r7, r3
 80021e0:	d1f4      	bne.n	80021cc <ai_platform_get_activations_map+0x34>
 80021e2:	f04f 0c00 	mov.w	ip, #0
 80021e6:	1f20      	subs	r0, r4, #4
 80021e8:	46e6      	mov	lr, ip
 80021ea:	692b      	ldr	r3, [r5, #16]
 80021ec:	4463      	add	r3, ip
 80021ee:	f10c 0c1c 	add.w	ip, ip, #28
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	b12b      	cbz	r3, 8002202 <ai_platform_get_activations_map+0x6a>
 80021f6:	f10e 0e01 	add.w	lr, lr, #1
 80021fa:	4577      	cmp	r7, lr
 80021fc:	f840 3f04 	str.w	r3, [r0, #4]!
 8002200:	d1f3      	bne.n	80021ea <ai_platform_get_activations_map+0x52>
 8002202:	eba7 000e 	sub.w	r0, r7, lr
 8002206:	fab0 f080 	clz	r0, r0
 800220a:	0940      	lsrs	r0, r0, #5
 800220c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800220e:	2000      	movs	r0, #0
 8002210:	4770      	bx	lr
 8002212:	1f20      	subs	r0, r4, #4
 8002214:	462a      	mov	r2, r5
 8002216:	2400      	movs	r4, #0
 8002218:	e000      	b.n	800221c <ai_platform_get_activations_map+0x84>
 800221a:	461c      	mov	r4, r3
 800221c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8002220:	42b3      	cmp	r3, r6
 8002222:	d0d1      	beq.n	80021c8 <ai_platform_get_activations_map+0x30>
 8002224:	f840 3f04 	str.w	r3, [r0, #4]!
 8002228:	1c63      	adds	r3, r4, #1
 800222a:	429f      	cmp	r7, r3
 800222c:	d1f5      	bne.n	800221a <ai_platform_get_activations_map+0x82>
 800222e:	3402      	adds	r4, #2
 8002230:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002234:	42b3      	cmp	r3, r6
 8002236:	d1c9      	bne.n	80021cc <ai_platform_get_activations_map+0x34>
 8002238:	2001      	movs	r0, #1
 800223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800223c:	a1facade 	.word	0xa1facade

08002240 <ai_platform_network_set_error>:
 8002240:	b110      	cbz	r0, 8002248 <ai_platform_network_set_error+0x8>
 8002242:	300c      	adds	r0, #12
 8002244:	f000 bc6e 	b.w	8002b24 <core_set_error>
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop

0800224c <ai_platform_inputs_get>:
 800224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002250:	4b38      	ldr	r3, [pc, #224]	@ (8002334 <ai_platform_inputs_get+0xe8>)
 8002252:	6802      	ldr	r2, [r0, #0]
 8002254:	b085      	sub	sp, #20
 8002256:	4393      	bics	r3, r2
 8002258:	9003      	str	r0, [sp, #12]
 800225a:	9102      	str	r1, [sp, #8]
 800225c:	d160      	bne.n	8002320 <ai_platform_inputs_get+0xd4>
 800225e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8002260:	2b00      	cmp	r3, #0
 8002262:	d04f      	beq.n	8002304 <ai_platform_inputs_get+0xb8>
 8002264:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8002268:	f1ba 0f00 	cmp.w	sl, #0
 800226c:	d04a      	beq.n	8002304 <ai_platform_inputs_get+0xb8>
 800226e:	f04f 0b00 	mov.w	fp, #0
 8002272:	465d      	mov	r5, fp
 8002274:	e016      	b.n	80022a4 <ai_platform_inputs_get+0x58>
 8002276:	9901      	ldr	r1, [sp, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	507a      	str	r2, [r7, r1]
 800227c:	69b1      	ldr	r1, [r6, #24]
 800227e:	684e      	ldr	r6, [r1, #4]
 8002280:	60a3      	str	r3, [r4, #8]
 8002282:	f04f 0201 	mov.w	r2, #1
 8002286:	7522      	strb	r2, [r4, #20]
 8002288:	6961      	ldr	r1, [r4, #20]
 800228a:	6020      	str	r0, [r4, #0]
 800228c:	f369 211f 	bfi	r1, r9, #8, #24
 8002290:	2300      	movs	r3, #0
 8002292:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8002296:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800229a:	f8c4 c004 	str.w	ip, [r4, #4]
 800229e:	3501      	adds	r5, #1
 80022a0:	f10b 0b1c 	add.w	fp, fp, #28
 80022a4:	f8ba 3000 	ldrh.w	r3, [sl]
 80022a8:	42ab      	cmp	r3, r5
 80022aa:	b2aa      	uxth	r2, r5
 80022ac:	d93c      	bls.n	8002328 <ai_platform_inputs_get+0xdc>
 80022ae:	f8da 3004 	ldr.w	r3, [sl, #4]
 80022b2:	00e9      	lsls	r1, r5, #3
 80022b4:	9101      	str	r1, [sp, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d036      	beq.n	8002328 <ai_platform_inputs_get+0xdc>
 80022ba:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80022be:	2e00      	cmp	r6, #0
 80022c0:	d032      	beq.n	8002328 <ai_platform_inputs_get+0xdc>
 80022c2:	f8da 3008 	ldr.w	r3, [sl, #8]
 80022c6:	69b2      	ldr	r2, [r6, #24]
 80022c8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80022cc:	6810      	ldr	r0, [r2, #0]
 80022ce:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80022d2:	68b3      	ldr	r3, [r6, #8]
 80022d4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80022d8:	f002 ffea 	bl	80052b0 <ai_array_to_buffer_fmt>
 80022dc:	69b1      	ldr	r1, [r6, #24]
 80022de:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80022e2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80022e6:	445c      	add	r4, fp
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0c8      	beq.n	800227e <ai_platform_inputs_get+0x32>
 80022ec:	2100      	movs	r1, #0
 80022ee:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80022f2:	6831      	ldr	r1, [r6, #0]
 80022f4:	6059      	str	r1, [r3, #4]
 80022f6:	b111      	cbz	r1, 80022fe <ai_platform_inputs_get+0xb2>
 80022f8:	8849      	ldrh	r1, [r1, #2]
 80022fa:	2900      	cmp	r1, #0
 80022fc:	d1bb      	bne.n	8002276 <ai_platform_inputs_get+0x2a>
 80022fe:	69b1      	ldr	r1, [r6, #24]
 8002300:	2300      	movs	r3, #0
 8002302:	e7bc      	b.n	800227e <ai_platform_inputs_get+0x32>
 8002304:	9803      	ldr	r0, [sp, #12]
 8002306:	2218      	movs	r2, #24
 8002308:	2111      	movs	r1, #17
 800230a:	300c      	adds	r0, #12
 800230c:	f000 fc0a 	bl	8002b24 <core_set_error>
 8002310:	2200      	movs	r2, #0
 8002312:	4610      	mov	r0, r2
 8002314:	9b02      	ldr	r3, [sp, #8]
 8002316:	b103      	cbz	r3, 800231a <ai_platform_inputs_get+0xce>
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	b005      	add	sp, #20
 800231c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002320:	2000      	movs	r0, #0
 8002322:	b005      	add	sp, #20
 8002324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002328:	2a00      	cmp	r2, #0
 800232a:	d0eb      	beq.n	8002304 <ai_platform_inputs_get+0xb8>
 800232c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002330:	6858      	ldr	r0, [r3, #4]
 8002332:	e7ef      	b.n	8002314 <ai_platform_inputs_get+0xc8>
 8002334:	a1c00100 	.word	0xa1c00100

08002338 <ai_platform_outputs_get>:
 8002338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800233c:	4b37      	ldr	r3, [pc, #220]	@ (800241c <ai_platform_outputs_get+0xe4>)
 800233e:	6802      	ldr	r2, [r0, #0]
 8002340:	b085      	sub	sp, #20
 8002342:	4393      	bics	r3, r2
 8002344:	9003      	str	r0, [sp, #12]
 8002346:	9102      	str	r1, [sp, #8]
 8002348:	d15d      	bne.n	8002406 <ai_platform_outputs_get+0xce>
 800234a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800234c:	2b01      	cmp	r3, #1
 800234e:	d94c      	bls.n	80023ea <ai_platform_outputs_get+0xb2>
 8002350:	f04f 0b00 	mov.w	fp, #0
 8002354:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8002358:	465d      	mov	r5, fp
 800235a:	46d8      	mov	r8, fp
 800235c:	e016      	b.n	800238c <ai_platform_outputs_get+0x54>
 800235e:	9a01      	ldr	r2, [sp, #4]
 8002360:	2101      	movs	r1, #1
 8002362:	50b9      	str	r1, [r7, r2]
 8002364:	69b2      	ldr	r2, [r6, #24]
 8002366:	6856      	ldr	r6, [r2, #4]
 8002368:	6020      	str	r0, [r4, #0]
 800236a:	f04f 0201 	mov.w	r2, #1
 800236e:	7522      	strb	r2, [r4, #20]
 8002370:	6960      	ldr	r0, [r4, #20]
 8002372:	f8c4 c004 	str.w	ip, [r4, #4]
 8002376:	f369 201f 	bfi	r0, r9, #8, #24
 800237a:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800237e:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8002382:	9b00      	ldr	r3, [sp, #0]
 8002384:	61a3      	str	r3, [r4, #24]
 8002386:	3501      	adds	r5, #1
 8002388:	f10b 0b1c 	add.w	fp, fp, #28
 800238c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002390:	42ab      	cmp	r3, r5
 8002392:	b2aa      	uxth	r2, r5
 8002394:	d93b      	bls.n	800240e <ai_platform_outputs_get+0xd6>
 8002396:	f8da 3010 	ldr.w	r3, [sl, #16]
 800239a:	00e9      	lsls	r1, r5, #3
 800239c:	9101      	str	r1, [sp, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d035      	beq.n	800240e <ai_platform_outputs_get+0xd6>
 80023a2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d031      	beq.n	800240e <ai_platform_outputs_get+0xd6>
 80023aa:	f8da 3014 	ldr.w	r3, [sl, #20]
 80023ae:	69b2      	ldr	r2, [r6, #24]
 80023b0:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80023b4:	68b3      	ldr	r3, [r6, #8]
 80023b6:	6810      	ldr	r0, [r2, #0]
 80023b8:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80023bc:	68f3      	ldr	r3, [r6, #12]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f002 ff76 	bl	80052b0 <ai_array_to_buffer_fmt>
 80023c4:	69b2      	ldr	r2, [r6, #24]
 80023c6:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80023ca:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80023ce:	445c      	add	r4, fp
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0c8      	beq.n	8002366 <ai_platform_outputs_get+0x2e>
 80023d4:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 80023d8:	6832      	ldr	r2, [r6, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	b112      	cbz	r2, 80023e4 <ai_platform_outputs_get+0xac>
 80023de:	8852      	ldrh	r2, [r2, #2]
 80023e0:	2a00      	cmp	r2, #0
 80023e2:	d1bc      	bne.n	800235e <ai_platform_outputs_get+0x26>
 80023e4:	69b2      	ldr	r2, [r6, #24]
 80023e6:	2300      	movs	r3, #0
 80023e8:	e7bd      	b.n	8002366 <ai_platform_outputs_get+0x2e>
 80023ea:	9803      	ldr	r0, [sp, #12]
 80023ec:	2218      	movs	r2, #24
 80023ee:	2111      	movs	r1, #17
 80023f0:	300c      	adds	r0, #12
 80023f2:	f000 fb97 	bl	8002b24 <core_set_error>
 80023f6:	2200      	movs	r2, #0
 80023f8:	4610      	mov	r0, r2
 80023fa:	9b02      	ldr	r3, [sp, #8]
 80023fc:	b103      	cbz	r3, 8002400 <ai_platform_outputs_get+0xc8>
 80023fe:	801a      	strh	r2, [r3, #0]
 8002400:	b005      	add	sp, #20
 8002402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002406:	2000      	movs	r0, #0
 8002408:	b005      	add	sp, #20
 800240a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800240e:	2a00      	cmp	r2, #0
 8002410:	d0eb      	beq.n	80023ea <ai_platform_outputs_get+0xb2>
 8002412:	f8da 3014 	ldr.w	r3, [sl, #20]
 8002416:	6858      	ldr	r0, [r3, #4]
 8002418:	e7ef      	b.n	80023fa <ai_platform_outputs_get+0xc2>
 800241a:	bf00      	nop
 800241c:	a1c00100 	.word	0xa1c00100

08002420 <ai_platform_network_create>:
 8002420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002424:	b083      	sub	sp, #12
 8002426:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 800242a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800242e:	b320      	cbz	r0, 800247a <ai_platform_network_create+0x5a>
 8002430:	6002      	str	r2, [r0, #0]
 8002432:	4616      	mov	r6, r2
 8002434:	461f      	mov	r7, r3
 8002436:	4604      	mov	r4, r0
 8002438:	f000 fb72 	bl	8002b20 <core_init>
 800243c:	b970      	cbnz	r0, 800245c <ai_platform_network_create+0x3c>
 800243e:	2530      	movs	r5, #48	@ 0x30
 8002440:	2300      	movs	r3, #0
 8002442:	6023      	str	r3, [r4, #0]
 8002444:	2410      	movs	r4, #16
 8002446:	4642      	mov	r2, r8
 8002448:	4649      	mov	r1, r9
 800244a:	4638      	mov	r0, r7
 800244c:	f002 ffda 	bl	8005404 <ai_version_get>
 8002450:	60b0      	str	r0, [r6, #8]
 8002452:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8002456:	b003      	add	sp, #12
 8002458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800245c:	2200      	movs	r2, #0
 800245e:	4649      	mov	r1, r9
 8002460:	4638      	mov	r0, r7
 8002462:	f002 ffcf 	bl	8005404 <ai_version_get>
 8002466:	2200      	movs	r2, #0
 8002468:	4605      	mov	r5, r0
 800246a:	2105      	movs	r1, #5
 800246c:	2001      	movs	r0, #1
 800246e:	f002 ffc9 	bl	8005404 <ai_version_get>
 8002472:	4285      	cmp	r5, r0
 8002474:	d008      	beq.n	8002488 <ai_platform_network_create+0x68>
 8002476:	2501      	movs	r5, #1
 8002478:	e7e2      	b.n	8002440 <ai_platform_network_create+0x20>
 800247a:	2510      	movs	r5, #16
 800247c:	462c      	mov	r4, r5
 800247e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8002482:	b003      	add	sp, #12
 8002484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <ai_platform_network_create+0x80>)
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	a801      	add	r0, sp, #4
 800248e:	f000 fb55 	bl	8002b3c <ai_check_custom_types>
 8002492:	b110      	cbz	r0, 800249a <ai_platform_network_create+0x7a>
 8002494:	2400      	movs	r4, #0
 8002496:	4625      	mov	r5, r4
 8002498:	e7d5      	b.n	8002446 <ai_platform_network_create+0x26>
 800249a:	2502      	movs	r5, #2
 800249c:	e7d0      	b.n	8002440 <ai_platform_network_create+0x20>
 800249e:	bf00      	nop
 80024a0:	84048403 	.word	0x84048403

080024a4 <ai_platform_network_init>:
 80024a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a8:	4b63      	ldr	r3, [pc, #396]	@ (8002638 <ai_platform_network_init+0x194>)
 80024aa:	6802      	ldr	r2, [r0, #0]
 80024ac:	4393      	bics	r3, r2
 80024ae:	b083      	sub	sp, #12
 80024b0:	d156      	bne.n	8002560 <ai_platform_network_init+0xbc>
 80024b2:	4604      	mov	r4, r0
 80024b4:	460f      	mov	r7, r1
 80024b6:	2900      	cmp	r1, #0
 80024b8:	f000 80a9 	beq.w	800260e <ai_platform_network_init+0x16a>
 80024bc:	680b      	ldr	r3, [r1, #0]
 80024be:	495f      	ldr	r1, [pc, #380]	@ (800263c <ai_platform_network_init+0x198>)
 80024c0:	428b      	cmp	r3, r1
 80024c2:	d113      	bne.n	80024ec <ai_platform_network_init+0x48>
 80024c4:	495c      	ldr	r1, [pc, #368]	@ (8002638 <ai_platform_network_init+0x194>)
 80024c6:	89bd      	ldrh	r5, [r7, #12]
 80024c8:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 80024cc:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80024d0:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 80024d4:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 80024d8:	68be      	ldr	r6, [r7, #8]
 80024da:	428a      	cmp	r2, r1
 80024dc:	d02c      	beq.n	8002538 <ai_platform_network_init+0x94>
 80024de:	2303      	movs	r3, #3
 80024e0:	6123      	str	r3, [r4, #16]
 80024e2:	4627      	mov	r7, r4
 80024e4:	4638      	mov	r0, r7
 80024e6:	b003      	add	sp, #12
 80024e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ec:	2101      	movs	r1, #1
 80024ee:	4638      	mov	r0, r7
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80024f6:	f7ff fdbd 	bl	8002074 <ai_buffer_get_size>
 80024fa:	f107 081c 	add.w	r8, r7, #28
 80024fe:	4605      	mov	r5, r0
 8002500:	2101      	movs	r1, #1
 8002502:	4640      	mov	r0, r8
 8002504:	463e      	mov	r6, r7
 8002506:	6a3f      	ldr	r7, [r7, #32]
 8002508:	f7ff fdb4 	bl	8002074 <ai_buffer_get_size>
 800250c:	2d00      	cmp	r5, #0
 800250e:	9b01      	ldr	r3, [sp, #4]
 8002510:	bf0a      	itet	eq
 8002512:	46a9      	moveq	r9, r5
 8002514:	f04f 0901 	movne.w	r9, #1
 8002518:	462e      	moveq	r6, r5
 800251a:	b330      	cbz	r0, 800256a <ai_platform_network_init+0xc6>
 800251c:	2f00      	cmp	r7, #0
 800251e:	f000 8084 	beq.w	800262a <ai_platform_network_init+0x186>
 8002522:	f04f 0a01 	mov.w	sl, #1
 8002526:	f1bb 0f00 	cmp.w	fp, #0
 800252a:	d021      	beq.n	8002570 <ai_platform_network_init+0xcc>
 800252c:	2500      	movs	r5, #0
 800252e:	6822      	ldr	r2, [r4, #0]
 8002530:	4941      	ldr	r1, [pc, #260]	@ (8002638 <ai_platform_network_init+0x194>)
 8002532:	428a      	cmp	r2, r1
 8002534:	46ab      	mov	fp, r5
 8002536:	d1d2      	bne.n	80024de <ai_platform_network_init+0x3a>
 8002538:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800253a:	454a      	cmp	r2, r9
 800253c:	4a3f      	ldr	r2, [pc, #252]	@ (800263c <ai_platform_network_init+0x198>)
 800253e:	d221      	bcs.n	8002584 <ai_platform_network_init+0xe0>
 8002540:	4293      	cmp	r3, r2
 8002542:	d15c      	bne.n	80025fe <ai_platform_network_init+0x15a>
 8002544:	6266      	str	r6, [r4, #36]	@ 0x24
 8002546:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800254a:	f8a4 b020 	strh.w	fp, [r4, #32]
 800254e:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8002552:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 8002556:	8525      	strh	r5, [r4, #40]	@ 0x28
 8002558:	4620      	mov	r0, r4
 800255a:	f000 fb19 	bl	8002b90 <ai_layers_init_all>
 800255e:	e7be      	b.n	80024de <ai_platform_network_init+0x3a>
 8002560:	2700      	movs	r7, #0
 8002562:	4638      	mov	r0, r7
 8002564:	b003      	add	sp, #12
 8002566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800256a:	4680      	mov	r8, r0
 800256c:	4682      	mov	sl, r0
 800256e:	e7da      	b.n	8002526 <ai_platform_network_init+0x82>
 8002570:	2d00      	cmp	r5, #0
 8002572:	d0dc      	beq.n	800252e <ai_platform_network_init+0x8a>
 8002574:	2212      	movs	r2, #18
 8002576:	2110      	movs	r1, #16
 8002578:	f104 000c 	add.w	r0, r4, #12
 800257c:	f000 fad2 	bl	8002b24 <core_set_error>
 8002580:	465f      	mov	r7, fp
 8002582:	e7af      	b.n	80024e4 <ai_platform_network_init+0x40>
 8002584:	4293      	cmp	r3, r2
 8002586:	d0dd      	beq.n	8002544 <ai_platform_network_init+0xa0>
 8002588:	f1b9 0f00 	cmp.w	r9, #0
 800258c:	d018      	beq.n	80025c0 <ai_platform_network_init+0x11c>
 800258e:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	f8cd 9004 	str.w	r9, [sp, #4]
 8002598:	2700      	movs	r7, #0
 800259a:	4699      	mov	r9, r3
 800259c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800259e:	eb06 0e07 	add.w	lr, r6, r7
 80025a2:	eb03 0c07 	add.w	ip, r3, r7
 80025a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80025aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80025ae:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80025b2:	371c      	adds	r7, #28
 80025b4:	45b9      	cmp	r9, r7
 80025b6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80025ba:	d1ef      	bne.n	800259c <ai_platform_network_init+0xf8>
 80025bc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80025c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80025c2:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80025c6:	4553      	cmp	r3, sl
 80025c8:	f8a4 b020 	strh.w	fp, [r4, #32]
 80025cc:	d325      	bcc.n	800261a <ai_platform_network_init+0x176>
 80025ce:	f1ba 0f00 	cmp.w	sl, #0
 80025d2:	d0be      	beq.n	8002552 <ai_platform_network_init+0xae>
 80025d4:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 80025d8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80025dc:	f04f 0c00 	mov.w	ip, #0
 80025e0:	eb08 070c 	add.w	r7, r8, ip
 80025e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80025e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80025e8:	4466      	add	r6, ip
 80025ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80025ec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80025f0:	f10c 0c1c 	add.w	ip, ip, #28
 80025f4:	45f4      	cmp	ip, lr
 80025f6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80025fa:	d1f1      	bne.n	80025e0 <ai_platform_network_init+0x13c>
 80025fc:	e7a9      	b.n	8002552 <ai_platform_network_init+0xae>
 80025fe:	2212      	movs	r2, #18
 8002600:	2116      	movs	r1, #22
 8002602:	f104 000c 	add.w	r0, r4, #12
 8002606:	f000 fa8d 	bl	8002b24 <core_set_error>
 800260a:	2700      	movs	r7, #0
 800260c:	e76a      	b.n	80024e4 <ai_platform_network_init+0x40>
 800260e:	2211      	movs	r2, #17
 8002610:	2110      	movs	r1, #16
 8002612:	300c      	adds	r0, #12
 8002614:	f000 fa86 	bl	8002b24 <core_set_error>
 8002618:	e764      	b.n	80024e4 <ai_platform_network_init+0x40>
 800261a:	2213      	movs	r2, #19
 800261c:	2116      	movs	r1, #22
 800261e:	f104 000c 	add.w	r0, r4, #12
 8002622:	f000 fa7f 	bl	8002b24 <core_set_error>
 8002626:	2700      	movs	r7, #0
 8002628:	e75c      	b.n	80024e4 <ai_platform_network_init+0x40>
 800262a:	2213      	movs	r2, #19
 800262c:	2110      	movs	r1, #16
 800262e:	f104 000c 	add.w	r0, r4, #12
 8002632:	f000 fa77 	bl	8002b24 <core_set_error>
 8002636:	e755      	b.n	80024e4 <ai_platform_network_init+0x40>
 8002638:	a1c00100 	.word	0xa1c00100
 800263c:	a1facade 	.word	0xa1facade

08002640 <ai_platform_network_post_init>:
 8002640:	b538      	push	{r3, r4, r5, lr}
 8002642:	4b16      	ldr	r3, [pc, #88]	@ (800269c <ai_platform_network_post_init+0x5c>)
 8002644:	6802      	ldr	r2, [r0, #0]
 8002646:	ea02 0103 	and.w	r1, r2, r3
 800264a:	4393      	bics	r3, r2
 800264c:	d108      	bne.n	8002660 <ai_platform_network_post_init+0x20>
 800264e:	6903      	ldr	r3, [r0, #16]
 8002650:	f013 0502 	ands.w	r5, r3, #2
 8002654:	4604      	mov	r4, r0
 8002656:	d005      	beq.n	8002664 <ai_platform_network_post_init+0x24>
 8002658:	428a      	cmp	r2, r1
 800265a:	d00a      	beq.n	8002672 <ai_platform_network_post_init+0x32>
 800265c:	2001      	movs	r0, #1
 800265e:	bd38      	pop	{r3, r4, r5, pc}
 8002660:	2000      	movs	r0, #0
 8002662:	bd38      	pop	{r3, r4, r5, pc}
 8002664:	2210      	movs	r2, #16
 8002666:	2111      	movs	r1, #17
 8002668:	300c      	adds	r0, #12
 800266a:	f000 fa5b 	bl	8002b24 <core_set_error>
 800266e:	4628      	mov	r0, r5
 8002670:	bd38      	pop	{r3, r4, r5, pc}
 8002672:	f000 fa9b 	bl	8002bac <ai_layers_post_init_all>
 8002676:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ef      	beq.n	800265c <ai_platform_network_post_init+0x1c>
 800267c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800267e:	e008      	b.n	8002692 <ai_platform_network_post_init+0x52>
 8002680:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8002684:	4798      	blx	r3
 8002686:	692b      	ldr	r3, [r5, #16]
 8002688:	42ab      	cmp	r3, r5
 800268a:	d0e7      	beq.n	800265c <ai_platform_network_post_init+0x1c>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0e5      	beq.n	800265c <ai_platform_network_post_init+0x1c>
 8002690:	461d      	mov	r5, r3
 8002692:	4629      	mov	r1, r5
 8002694:	2000      	movs	r0, #0
 8002696:	2d00      	cmp	r5, #0
 8002698:	d1f2      	bne.n	8002680 <ai_platform_network_post_init+0x40>
 800269a:	e7df      	b.n	800265c <ai_platform_network_post_init+0x1c>
 800269c:	a1c00100 	.word	0xa1c00100

080026a0 <ai_platform_network_process>:
 80026a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a4:	4bb5      	ldr	r3, [pc, #724]	@ (800297c <ai_platform_network_process+0x2dc>)
 80026a6:	4605      	mov	r5, r0
 80026a8:	6800      	ldr	r0, [r0, #0]
 80026aa:	b085      	sub	sp, #20
 80026ac:	4383      	bics	r3, r0
 80026ae:	9202      	str	r2, [sp, #8]
 80026b0:	f040 8140 	bne.w	8002934 <ai_platform_network_process+0x294>
 80026b4:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8125 	beq.w	8002906 <ai_platform_network_process+0x266>
 80026bc:	692b      	ldr	r3, [r5, #16]
 80026be:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2700      	movs	r7, #0
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	61af      	str	r7, [r5, #24]
 80026cc:	f040 8137 	bne.w	800293e <ai_platform_network_process+0x29e>
 80026d0:	2900      	cmp	r1, #0
 80026d2:	f000 811e 	beq.w	8002912 <ai_platform_network_process+0x272>
 80026d6:	f1ba 0f00 	cmp.w	sl, #0
 80026da:	f000 811a 	beq.w	8002912 <ai_platform_network_process+0x272>
 80026de:	f8ba 3000 	ldrh.w	r3, [sl]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8115 	beq.w	8002912 <ai_platform_network_process+0x272>
 80026e8:	698b      	ldr	r3, [r1, #24]
 80026ea:	9503      	str	r5, [sp, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	460e      	mov	r6, r1
 80026f2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d072      	beq.n	80027e0 <ai_platform_network_process+0x140>
 80026fa:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80026fe:	2c00      	cmp	r4, #0
 8002700:	d06e      	beq.n	80027e0 <ai_platform_network_process+0x140>
 8002702:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002706:	f8d3 9000 	ldr.w	r9, [r3]
 800270a:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800270e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8002712:	f000 81d3 	beq.w	8002abc <ai_platform_network_process+0x41c>
 8002716:	69a3      	ldr	r3, [r4, #24]
 8002718:	2101      	movs	r1, #1
 800271a:	4630      	mov	r0, r6
 800271c:	685d      	ldr	r5, [r3, #4]
 800271e:	f7ff fca9 	bl	8002074 <ai_buffer_get_size>
 8002722:	4285      	cmp	r5, r0
 8002724:	f0c0 8116 	bcc.w	8002954 <ai_platform_network_process+0x2b4>
 8002728:	68e0      	ldr	r0, [r4, #12]
 800272a:	69b1      	ldr	r1, [r6, #24]
 800272c:	68c2      	ldr	r2, [r0, #12]
 800272e:	68cb      	ldr	r3, [r1, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 810f 	bne.w	8002954 <ai_platform_network_process+0x2b4>
 8002736:	6882      	ldr	r2, [r0, #8]
 8002738:	688b      	ldr	r3, [r1, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	f040 810a 	bne.w	8002954 <ai_platform_network_process+0x2b4>
 8002740:	6842      	ldr	r2, [r0, #4]
 8002742:	684b      	ldr	r3, [r1, #4]
 8002744:	429a      	cmp	r2, r3
 8002746:	f040 8105 	bne.w	8002954 <ai_platform_network_process+0x2b4>
 800274a:	69a3      	ldr	r3, [r4, #24]
 800274c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002750:	f002 fe46 	bl	80053e0 <ai_array_get_data_byte_size>
 8002754:	4605      	mov	r5, r0
 8002756:	4620      	mov	r0, r4
 8002758:	f002 fe5a 	bl	8005410 <get_tensor_byte_size>
 800275c:	4285      	cmp	r5, r0
 800275e:	f0c0 80f9 	bcc.w	8002954 <ai_platform_network_process+0x2b4>
 8002762:	69a3      	ldr	r3, [r4, #24]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	f002 fda3 	bl	80052b0 <ai_array_to_buffer_fmt>
 800276a:	6833      	ldr	r3, [r6, #0]
 800276c:	4058      	eors	r0, r3
 800276e:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8002772:	f040 81a5 	bne.w	8002ac0 <ai_platform_network_process+0x420>
 8002776:	6873      	ldr	r3, [r6, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 819f 	beq.w	8002abc <ai_platform_network_process+0x41c>
 800277e:	69b3      	ldr	r3, [r6, #24]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 81a5 	beq.w	8002ad2 <ai_platform_network_process+0x432>
 8002788:	9a01      	ldr	r2, [sp, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	bf38      	it	cc
 800278e:	461a      	movcc	r2, r3
 8002790:	4620      	mov	r0, r4
 8002792:	9201      	str	r2, [sp, #4]
 8002794:	f002 fe3c 	bl	8005410 <get_tensor_byte_size>
 8002798:	f8c8 0008 	str.w	r0, [r8, #8]
 800279c:	69b3      	ldr	r3, [r6, #24]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fb00 f303 	mul.w	r3, r0, r3
 80027a4:	f8c8 300c 	str.w	r3, [r8, #12]
 80027a8:	6871      	ldr	r1, [r6, #4]
 80027aa:	f8c8 1004 	str.w	r1, [r8, #4]
 80027ae:	440b      	add	r3, r1
 80027b0:	f849 300b 	str.w	r3, [r9, fp]
 80027b4:	69a0      	ldr	r0, [r4, #24]
 80027b6:	6803      	ldr	r3, [r0, #0]
 80027b8:	009a      	lsls	r2, r3, #2
 80027ba:	f107 0701 	add.w	r7, r7, #1
 80027be:	f106 061c 	add.w	r6, r6, #28
 80027c2:	f100 80b1 	bmi.w	8002928 <ai_platform_network_process+0x288>
 80027c6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	4419      	add	r1, r3
 80027ce:	6081      	str	r1, [r0, #8]
 80027d0:	69a3      	ldr	r3, [r4, #24]
 80027d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80027d6:	60da      	str	r2, [r3, #12]
 80027d8:	f8ba 3000 	ldrh.w	r3, [sl]
 80027dc:	42bb      	cmp	r3, r7
 80027de:	d888      	bhi.n	80026f2 <ai_platform_network_process+0x52>
 80027e0:	9d03      	ldr	r5, [sp, #12]
 80027e2:	9b02      	ldr	r3, [sp, #8]
 80027e4:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 817c 	beq.w	8002ae4 <ai_platform_network_process+0x444>
 80027ec:	2a01      	cmp	r2, #1
 80027ee:	f240 80bd 	bls.w	800296c <ai_platform_network_process+0x2cc>
 80027f2:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 80027f6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80b6 	beq.w	800296c <ai_platform_network_process+0x2cc>
 8002800:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002804:	2700      	movs	r7, #0
 8002806:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80bd 	beq.w	800298a <ai_platform_network_process+0x2ea>
 8002810:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8002814:	2e00      	cmp	r6, #0
 8002816:	f000 80b8 	beq.w	800298a <ai_platform_network_process+0x2ea>
 800281a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800281e:	681c      	ldr	r4, [r3, #0]
 8002820:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8002824:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8002828:	f000 8160 	beq.w	8002aec <ai_platform_network_process+0x44c>
 800282c:	69b3      	ldr	r3, [r6, #24]
 800282e:	2101      	movs	r1, #1
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	4658      	mov	r0, fp
 8002836:	f7ff fc1d 	bl	8002074 <ai_buffer_get_size>
 800283a:	9b02      	ldr	r3, [sp, #8]
 800283c:	4283      	cmp	r3, r0
 800283e:	f0c0 8095 	bcc.w	800296c <ai_platform_network_process+0x2cc>
 8002842:	68f0      	ldr	r0, [r6, #12]
 8002844:	f8db 1018 	ldr.w	r1, [fp, #24]
 8002848:	68c2      	ldr	r2, [r0, #12]
 800284a:	68cb      	ldr	r3, [r1, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 808d 	bne.w	800296c <ai_platform_network_process+0x2cc>
 8002852:	6882      	ldr	r2, [r0, #8]
 8002854:	688b      	ldr	r3, [r1, #8]
 8002856:	429a      	cmp	r2, r3
 8002858:	f040 8088 	bne.w	800296c <ai_platform_network_process+0x2cc>
 800285c:	6842      	ldr	r2, [r0, #4]
 800285e:	684b      	ldr	r3, [r1, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8083 	bne.w	800296c <ai_platform_network_process+0x2cc>
 8002866:	69b3      	ldr	r3, [r6, #24]
 8002868:	e9d3 0100 	ldrd	r0, r1, [r3]
 800286c:	f002 fdb8 	bl	80053e0 <ai_array_get_data_byte_size>
 8002870:	9002      	str	r0, [sp, #8]
 8002872:	4630      	mov	r0, r6
 8002874:	f002 fdcc 	bl	8005410 <get_tensor_byte_size>
 8002878:	9b02      	ldr	r3, [sp, #8]
 800287a:	4283      	cmp	r3, r0
 800287c:	d376      	bcc.n	800296c <ai_platform_network_process+0x2cc>
 800287e:	69b3      	ldr	r3, [r6, #24]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	f002 fd15 	bl	80052b0 <ai_array_to_buffer_fmt>
 8002886:	f8db 3000 	ldr.w	r3, [fp]
 800288a:	4058      	eors	r0, r3
 800288c:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8002890:	f040 8134 	bne.w	8002afc <ai_platform_network_process+0x45c>
 8002894:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8127 	beq.w	8002aec <ai_platform_network_process+0x44c>
 800289e:	f8db 3018 	ldr.w	r3, [fp, #24]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8133 	beq.w	8002b10 <ai_platform_network_process+0x470>
 80028aa:	9a01      	ldr	r2, [sp, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	bf38      	it	cc
 80028b0:	461a      	movcc	r2, r3
 80028b2:	4630      	mov	r0, r6
 80028b4:	9201      	str	r2, [sp, #4]
 80028b6:	f002 fdab 	bl	8005410 <get_tensor_byte_size>
 80028ba:	f8c9 0008 	str.w	r0, [r9, #8]
 80028be:	f8db 3018 	ldr.w	r3, [fp, #24]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fb00 f303 	mul.w	r3, r0, r3
 80028c8:	f8c9 300c 	str.w	r3, [r9, #12]
 80028cc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80028d0:	f8c9 1004 	str.w	r1, [r9, #4]
 80028d4:	440b      	add	r3, r1
 80028d6:	f844 300a 	str.w	r3, [r4, sl]
 80028da:	69b0      	ldr	r0, [r6, #24]
 80028dc:	6803      	ldr	r3, [r0, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	f107 0701 	add.w	r7, r7, #1
 80028e4:	f10b 0b1c 	add.w	fp, fp, #28
 80028e8:	d44a      	bmi.n	8002980 <ai_platform_network_process+0x2e0>
 80028ea:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	4419      	add	r1, r3
 80028f2:	6081      	str	r1, [r0, #8]
 80028f4:	69b3      	ldr	r3, [r6, #24]
 80028f6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002900:	42bb      	cmp	r3, r7
 8002902:	d880      	bhi.n	8002806 <ai_platform_network_process+0x166>
 8002904:	e041      	b.n	800298a <ai_platform_network_process+0x2ea>
 8002906:	692a      	ldr	r2, [r5, #16]
 8002908:	61ab      	str	r3, [r5, #24]
 800290a:	f002 0203 	and.w	r2, r2, #3
 800290e:	2a03      	cmp	r2, #3
 8002910:	d115      	bne.n	800293e <ai_platform_network_process+0x29e>
 8002912:	2217      	movs	r2, #23
 8002914:	2112      	movs	r1, #18
 8002916:	f105 000c 	add.w	r0, r5, #12
 800291a:	f000 f903 	bl	8002b24 <core_set_error>
 800291e:	2400      	movs	r4, #0
 8002920:	4620      	mov	r0, r4
 8002922:	b005      	add	sp, #20
 8002924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002928:	f8ba 3000 	ldrh.w	r3, [sl]
 800292c:	429f      	cmp	r7, r3
 800292e:	f4ff aee0 	bcc.w	80026f2 <ai_platform_network_process+0x52>
 8002932:	e755      	b.n	80027e0 <ai_platform_network_process+0x140>
 8002934:	2400      	movs	r4, #0
 8002936:	4620      	mov	r0, r4
 8002938:	b005      	add	sp, #20
 800293a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800293e:	2230      	movs	r2, #48	@ 0x30
 8002940:	2111      	movs	r1, #17
 8002942:	f105 000c 	add.w	r0, r5, #12
 8002946:	f000 f8ed 	bl	8002b24 <core_set_error>
 800294a:	2400      	movs	r4, #0
 800294c:	4620      	mov	r0, r4
 800294e:	b005      	add	sp, #20
 8002950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002954:	9d03      	ldr	r5, [sp, #12]
 8002956:	2218      	movs	r2, #24
 8002958:	2112      	movs	r1, #18
 800295a:	f105 000c 	add.w	r0, r5, #12
 800295e:	f000 f8e1 	bl	8002b24 <core_set_error>
 8002962:	2400      	movs	r4, #0
 8002964:	4620      	mov	r0, r4
 8002966:	b005      	add	sp, #20
 8002968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296c:	2218      	movs	r2, #24
 800296e:	2113      	movs	r1, #19
 8002970:	f105 000c 	add.w	r0, r5, #12
 8002974:	f000 f8d6 	bl	8002b24 <core_set_error>
 8002978:	2400      	movs	r4, #0
 800297a:	e7d1      	b.n	8002920 <ai_platform_network_process+0x280>
 800297c:	a1c00100 	.word	0xa1c00100
 8002980:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002984:	429f      	cmp	r7, r3
 8002986:	f4ff af3e 	bcc.w	8002806 <ai_platform_network_process+0x166>
 800298a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800298e:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8002990:	832b      	strh	r3, [r5, #24]
 8002992:	2a00      	cmp	r2, #0
 8002994:	f040 808c 	bne.w	8002ab0 <ai_platform_network_process+0x410>
 8002998:	4616      	mov	r6, r2
 800299a:	4617      	mov	r7, r2
 800299c:	8b6c      	ldrh	r4, [r5, #26]
 800299e:	429c      	cmp	r4, r3
 80029a0:	bf38      	it	cc
 80029a2:	46ab      	movcc	fp, r5
 80029a4:	d2bc      	bcs.n	8002920 <ai_platform_network_process+0x280>
 80029a6:	2e00      	cmp	r6, #0
 80029a8:	d030      	beq.n	8002a0c <ai_platform_network_process+0x36c>
 80029aa:	f04f 0800 	mov.w	r8, #0
 80029ae:	e014      	b.n	80029da <ai_platform_network_process+0x33a>
 80029b0:	6882      	ldr	r2, [r0, #8]
 80029b2:	68c5      	ldr	r5, [r0, #12]
 80029b4:	6863      	ldr	r3, [r4, #4]
 80029b6:	1b52      	subs	r2, r2, r5
 80029b8:	4413      	add	r3, r2
 80029ba:	6083      	str	r3, [r0, #8]
 80029bc:	698b      	ldr	r3, [r1, #24]
 80029be:	6862      	ldr	r2, [r4, #4]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80029c6:	f859 200a 	ldr.w	r2, [r9, sl]
 80029ca:	440b      	add	r3, r1
 80029cc:	4293      	cmp	r3, r2
 80029ce:	bf24      	itt	cs
 80029d0:	68e3      	ldrcs	r3, [r4, #12]
 80029d2:	1ad3      	subcs	r3, r2, r3
 80029d4:	6063      	str	r3, [r4, #4]
 80029d6:	f108 0801 	add.w	r8, r8, #1
 80029da:	8833      	ldrh	r3, [r6, #0]
 80029dc:	4543      	cmp	r3, r8
 80029de:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80029e2:	d913      	bls.n	8002a0c <ai_platform_network_process+0x36c>
 80029e4:	6873      	ldr	r3, [r6, #4]
 80029e6:	b18b      	cbz	r3, 8002a0c <ai_platform_network_process+0x36c>
 80029e8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80029ec:	b171      	cbz	r1, 8002a0c <ai_platform_network_process+0x36c>
 80029ee:	6988      	ldr	r0, [r1, #24]
 80029f0:	68b2      	ldr	r2, [r6, #8]
 80029f2:	6803      	ldr	r3, [r0, #0]
 80029f4:	f8d2 9000 	ldr.w	r9, [r2]
 80029f8:	009d      	lsls	r5, r3, #2
 80029fa:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80029fe:	d5d7      	bpl.n	80029b0 <ai_platform_network_process+0x310>
 8002a00:	6881      	ldr	r1, [r0, #8]
 8002a02:	68a2      	ldr	r2, [r4, #8]
 8002a04:	6860      	ldr	r0, [r4, #4]
 8002a06:	f002 fb63 	bl	80050d0 <st_int8_copy>
 8002a0a:	e7da      	b.n	80029c2 <ai_platform_network_process+0x322>
 8002a0c:	4658      	mov	r0, fp
 8002a0e:	f000 f8e1 	bl	8002bd4 <ai_layers_forward_all>
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d03d      	beq.n	8002a92 <ai_platform_network_process+0x3f2>
 8002a16:	2400      	movs	r4, #0
 8002a18:	e016      	b.n	8002a48 <ai_platform_network_process+0x3a8>
 8002a1a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8002a1e:	f859 100a 	ldr.w	r1, [r9, sl]
 8002a22:	4413      	add	r3, r2
 8002a24:	428b      	cmp	r3, r1
 8002a26:	bf24      	itt	cs
 8002a28:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8002a2c:	1acb      	subcs	r3, r1, r3
 8002a2e:	f8c8 3004 	str.w	r3, [r8, #4]
 8002a32:	6981      	ldr	r1, [r0, #24]
 8002a34:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8002a38:	1b52      	subs	r2, r2, r5
 8002a3a:	4413      	add	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
 8002a3e:	6983      	ldr	r3, [r0, #24]
 8002a40:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	3401      	adds	r4, #1
 8002a48:	883b      	ldrh	r3, [r7, #0]
 8002a4a:	42a3      	cmp	r3, r4
 8002a4c:	d921      	bls.n	8002a92 <ai_platform_network_process+0x3f2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	b1fb      	cbz	r3, 8002a92 <ai_platform_network_process+0x3f2>
 8002a52:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002a56:	b1e0      	cbz	r0, 8002a92 <ai_platform_network_process+0x3f2>
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	6983      	ldr	r3, [r0, #24]
 8002a5c:	f8d2 9000 	ldr.w	r9, [r2]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8002a68:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8002a6c:	d5d5      	bpl.n	8002a1a <ai_platform_network_process+0x37a>
 8002a6e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8002a72:	6898      	ldr	r0, [r3, #8]
 8002a74:	f002 fb2c 	bl	80050d0 <st_int8_copy>
 8002a78:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8002a7c:	f859 200a 	ldr.w	r2, [r9, sl]
 8002a80:	440b      	add	r3, r1
 8002a82:	4293      	cmp	r3, r2
 8002a84:	bf24      	itt	cs
 8002a86:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8002a8a:	1ad3      	subcs	r3, r2, r3
 8002a8c:	f8c8 3004 	str.w	r3, [r8, #4]
 8002a90:	e7d9      	b.n	8002a46 <ai_platform_network_process+0x3a6>
 8002a92:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8002a96:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8002a9a:	3401      	adds	r4, #1
 8002a9c:	b2a4      	uxth	r4, r4
 8002a9e:	42a3      	cmp	r3, r4
 8002aa0:	f8ab 401a 	strh.w	r4, [fp, #26]
 8002aa4:	f63f af7f 	bhi.w	80029a6 <ai_platform_network_process+0x306>
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	b005      	add	sp, #20
 8002aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab0:	2a01      	cmp	r2, #1
 8002ab2:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8002ab4:	d02a      	beq.n	8002b0c <ai_platform_network_process+0x46c>
 8002ab6:	f106 070c 	add.w	r7, r6, #12
 8002aba:	e76f      	b.n	800299c <ai_platform_network_process+0x2fc>
 8002abc:	9d03      	ldr	r5, [sp, #12]
 8002abe:	e728      	b.n	8002912 <ai_platform_network_process+0x272>
 8002ac0:	9d03      	ldr	r5, [sp, #12]
 8002ac2:	2219      	movs	r2, #25
 8002ac4:	2112      	movs	r1, #18
 8002ac6:	f105 000c 	add.w	r0, r5, #12
 8002aca:	f000 f82b 	bl	8002b24 <core_set_error>
 8002ace:	2400      	movs	r4, #0
 8002ad0:	e726      	b.n	8002920 <ai_platform_network_process+0x280>
 8002ad2:	9d03      	ldr	r5, [sp, #12]
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	2221      	movs	r2, #33	@ 0x21
 8002ad8:	2112      	movs	r1, #18
 8002ada:	f105 000c 	add.w	r0, r5, #12
 8002ade:	f000 f821 	bl	8002b24 <core_set_error>
 8002ae2:	e71d      	b.n	8002920 <ai_platform_network_process+0x280>
 8002ae4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002ae8:	832b      	strh	r3, [r5, #24]
 8002aea:	e752      	b.n	8002992 <ai_platform_network_process+0x2f2>
 8002aec:	2217      	movs	r2, #23
 8002aee:	2113      	movs	r1, #19
 8002af0:	f105 000c 	add.w	r0, r5, #12
 8002af4:	f000 f816 	bl	8002b24 <core_set_error>
 8002af8:	2400      	movs	r4, #0
 8002afa:	e711      	b.n	8002920 <ai_platform_network_process+0x280>
 8002afc:	2219      	movs	r2, #25
 8002afe:	2113      	movs	r1, #19
 8002b00:	f105 000c 	add.w	r0, r5, #12
 8002b04:	f000 f80e 	bl	8002b24 <core_set_error>
 8002b08:	2400      	movs	r4, #0
 8002b0a:	e709      	b.n	8002920 <ai_platform_network_process+0x280>
 8002b0c:	2700      	movs	r7, #0
 8002b0e:	e745      	b.n	800299c <ai_platform_network_process+0x2fc>
 8002b10:	4604      	mov	r4, r0
 8002b12:	2221      	movs	r2, #33	@ 0x21
 8002b14:	2113      	movs	r1, #19
 8002b16:	f105 000c 	add.w	r0, r5, #12
 8002b1a:	f000 f803 	bl	8002b24 <core_set_error>
 8002b1e:	e6ff      	b.n	8002920 <ai_platform_network_process+0x280>

08002b20 <core_init>:
 8002b20:	2001      	movs	r0, #1
 8002b22:	4770      	bx	lr

08002b24 <core_set_error>:
 8002b24:	4603      	mov	r3, r0
 8002b26:	7800      	ldrb	r0, [r0, #0]
 8002b28:	b108      	cbz	r0, 8002b2e <core_set_error+0xa>
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	4770      	bx	lr
 8002b2e:	7019      	strb	r1, [r3, #0]
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	f362 211f 	bfi	r1, r2, #8, #24
 8002b36:	2001      	movs	r0, #1
 8002b38:	6019      	str	r1, [r3, #0]
 8002b3a:	4770      	bx	lr

08002b3c <ai_check_custom_types>:
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <ai_check_custom_types+0x50>)
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	b118      	cbz	r0, 8002b4c <ai_check_custom_types+0x10>
 8002b44:	7803      	ldrb	r3, [r0, #0]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d002      	beq.n	8002b50 <ai_check_custom_types+0x14>
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	b002      	add	sp, #8
 8002b4e:	4770      	bx	lr
 8002b50:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <ai_check_custom_types+0x26>
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f080 0001 	eor.w	r0, r0, #1
 8002b5e:	b002      	add	sp, #8
 8002b60:	4770      	bx	lr
 8002b62:	7842      	ldrb	r2, [r0, #1]
 8002b64:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f100 0001 	add.w	r0, r0, #1
 8002b6e:	d1f3      	bne.n	8002b58 <ai_check_custom_types+0x1c>
 8002b70:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8002b74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1ed      	bne.n	8002b58 <ai_check_custom_types+0x1c>
 8002b7c:	7842      	ldrb	r2, [r0, #1]
 8002b7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d1e8      	bne.n	8002b58 <ai_check_custom_types+0x1c>
 8002b86:	2000      	movs	r0, #0
 8002b88:	e7e7      	b.n	8002b5a <ai_check_custom_types+0x1e>
 8002b8a:	bf00      	nop
 8002b8c:	84048403 	.word	0x84048403

08002b90 <ai_layers_init_all>:
 8002b90:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002b92:	2100      	movs	r1, #0
 8002b94:	b143      	cbz	r3, 8002ba8 <ai_layers_init_all+0x18>
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	60d8      	str	r0, [r3, #12]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	f101 0101 	add.w	r1, r1, #1
 8002ba0:	d002      	beq.n	8002ba8 <ai_layers_init_all+0x18>
 8002ba2:	b10a      	cbz	r2, 8002ba8 <ai_layers_init_all+0x18>
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	e7f5      	b.n	8002b94 <ai_layers_init_all+0x4>
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4770      	bx	lr

08002bac <ai_layers_post_init_all>:
 8002bac:	b538      	push	{r3, r4, r5, lr}
 8002bae:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002bb0:	2500      	movs	r5, #0
 8002bb2:	b16c      	cbz	r4, 8002bd0 <ai_layers_post_init_all+0x24>
 8002bb4:	6863      	ldr	r3, [r4, #4]
 8002bb6:	07db      	lsls	r3, r3, #31
 8002bb8:	d504      	bpl.n	8002bc4 <ai_layers_post_init_all+0x18>
 8002bba:	6a23      	ldr	r3, [r4, #32]
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	b10b      	cbz	r3, 8002bc4 <ai_layers_post_init_all+0x18>
 8002bc0:	4798      	blx	r3
 8002bc2:	3501      	adds	r5, #1
 8002bc4:	6923      	ldr	r3, [r4, #16]
 8002bc6:	42a3      	cmp	r3, r4
 8002bc8:	d002      	beq.n	8002bd0 <ai_layers_post_init_all+0x24>
 8002bca:	b10b      	cbz	r3, 8002bd0 <ai_layers_post_init_all+0x24>
 8002bcc:	461c      	mov	r4, r3
 8002bce:	e7f0      	b.n	8002bb2 <ai_layers_post_init_all+0x6>
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}

08002bd4 <ai_layers_forward_all>:
 8002bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8002bdc:	4604      	mov	r4, r0
 8002bde:	f1b8 0f00 	cmp.w	r8, #0
 8002be2:	d02b      	beq.n	8002c3c <ai_layers_forward_all+0x68>
 8002be4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002be6:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8002be8:	b321      	cbz	r1, 8002c34 <ai_layers_forward_all+0x60>
 8002bea:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002bec:	2001      	movs	r0, #1
 8002bee:	47c0      	blx	r8
 8002bf0:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8002bf2:	b1fe      	cbz	r6, 8002c34 <ai_layers_forward_all+0x60>
 8002bf4:	2700      	movs	r7, #0
 8002bf6:	4631      	mov	r1, r6
 8002bf8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002bfa:	2002      	movs	r0, #2
 8002bfc:	47c0      	blx	r8
 8002bfe:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8002c00:	4628      	mov	r0, r5
 8002c02:	696b      	ldr	r3, [r5, #20]
 8002c04:	4798      	blx	r3
 8002c06:	692e      	ldr	r6, [r5, #16]
 8002c08:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c0a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002c0c:	42b5      	cmp	r5, r6
 8002c0e:	f04f 0003 	mov.w	r0, #3
 8002c12:	d007      	beq.n	8002c24 <ai_layers_forward_all+0x50>
 8002c14:	47c0      	blx	r8
 8002c16:	3701      	adds	r7, #1
 8002c18:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8002c1a:	2e00      	cmp	r6, #0
 8002c1c:	d1eb      	bne.n	8002bf6 <ai_layers_forward_all+0x22>
 8002c1e:	4638      	mov	r0, r7
 8002c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c24:	2003      	movs	r0, #3
 8002c26:	47c0      	blx	r8
 8002c28:	2300      	movs	r3, #0
 8002c2a:	3701      	adds	r7, #1
 8002c2c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002c2e:	4638      	mov	r0, r7
 8002c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c34:	2700      	movs	r7, #0
 8002c36:	4638      	mov	r0, r7
 8002c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c3c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8002c3e:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8002c40:	2d00      	cmp	r5, #0
 8002c42:	d0f7      	beq.n	8002c34 <ai_layers_forward_all+0x60>
 8002c44:	4647      	mov	r7, r8
 8002c46:	696b      	ldr	r3, [r5, #20]
 8002c48:	4628      	mov	r0, r5
 8002c4a:	4798      	blx	r3
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	692d      	ldr	r5, [r5, #16]
 8002c50:	429d      	cmp	r5, r3
 8002c52:	d004      	beq.n	8002c5e <ai_layers_forward_all+0x8a>
 8002c54:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002c56:	3701      	adds	r7, #1
 8002c58:	2d00      	cmp	r5, #0
 8002c5a:	d1f4      	bne.n	8002c46 <ai_layers_forward_all+0x72>
 8002c5c:	e7df      	b.n	8002c1e <ai_layers_forward_all+0x4a>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002c62:	3701      	adds	r7, #1
 8002c64:	e7db      	b.n	8002c1e <ai_layers_forward_all+0x4a>
 8002c66:	bf00      	nop

08002c68 <forward_conv2d_if32of32wf32_nl_pool>:
 8002c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8002c70:	b0c3      	sub	sp, #268	@ 0x10c
 8002c72:	f8bc 3000 	ldrh.w	r3, [ip]
 8002c76:	9321      	str	r3, [sp, #132]	@ 0x84
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8139 	beq.w	8002ef0 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 8002c7e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002c82:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8002c86:	4604      	mov	r4, r0
 8002c88:	f1ba 0f00 	cmp.w	sl, #0
 8002c8c:	d001      	beq.n	8002c92 <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 8002c8e:	f8da a000 	ldr.w	sl, [sl]
 8002c92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8002c94:	2a01      	cmp	r2, #1
 8002c96:	f000 812a 	beq.w	8002eee <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8002c9a:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8002c9e:	f1b9 0f00 	cmp.w	r9, #0
 8002ca2:	d001      	beq.n	8002ca8 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 8002ca4:	f8d9 9000 	ldr.w	r9, [r9]
 8002ca8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8002caa:	2a02      	cmp	r2, #2
 8002cac:	f000 811f 	beq.w	8002eee <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8002cb0:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8002cb4:	8b1b      	ldrh	r3, [r3, #24]
 8002cb6:	f1b8 0f00 	cmp.w	r8, #0
 8002cba:	f000 812d 	beq.w	8002f18 <forward_conv2d_if32of32wf32_nl_pool+0x2b0>
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	f8d8 b000 	ldr.w	fp, [r8]
 8002cc4:	f240 812e 	bls.w	8002f24 <forward_conv2d_if32of32wf32_nl_pool+0x2bc>
 8002cc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002ccc:	9341      	str	r3, [sp, #260]	@ 0x104
 8002cce:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8002cd2:	f8da 200c 	ldr.w	r2, [sl, #12]
 8002cd6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8002cda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cdc:	f8db e00c 	ldr.w	lr, [fp, #12]
 8002ce0:	9022      	str	r0, [sp, #136]	@ 0x88
 8002ce2:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8002ce6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002ce8:	9031      	str	r0, [sp, #196]	@ 0xc4
 8002cea:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 8002cee:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002cf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002cf2:	f8de 7004 	ldr.w	r7, [lr, #4]
 8002cf6:	9032      	str	r0, [sp, #200]	@ 0xc8
 8002cf8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8002cfc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8002d00:	9527      	str	r5, [sp, #156]	@ 0x9c
 8002d02:	9628      	str	r6, [sp, #160]	@ 0xa0
 8002d04:	681d      	ldr	r5, [r3, #0]
 8002d06:	685e      	ldr	r6, [r3, #4]
 8002d08:	972b      	str	r7, [sp, #172]	@ 0xac
 8002d0a:	9134      	str	r1, [sp, #208]	@ 0xd0
 8002d0c:	f8de 7008 	ldr.w	r7, [lr, #8]
 8002d10:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8002d14:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002d18:	9529      	str	r5, [sp, #164]	@ 0xa4
 8002d1a:	962a      	str	r6, [sp, #168]	@ 0xa8
 8002d1c:	9730      	str	r7, [sp, #192]	@ 0xc0
 8002d1e:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 8002d22:	9033      	str	r0, [sp, #204]	@ 0xcc
 8002d24:	9123      	str	r1, [sp, #140]	@ 0x8c
 8002d26:	9224      	str	r2, [sp, #144]	@ 0x90
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	932f      	str	r3, [sp, #188]	@ 0xbc
 8002d2e:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8002d32:	9339      	str	r3, [sp, #228]	@ 0xe4
 8002d34:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8002d38:	922e      	str	r2, [sp, #184]	@ 0xb8
 8002d3a:	933c      	str	r3, [sp, #240]	@ 0xf0
 8002d3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8002d3e:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8002d42:	933d      	str	r3, [sp, #244]	@ 0xf4
 8002d44:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 8002d48:	933e      	str	r3, [sp, #248]	@ 0xf8
 8002d4a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d4e:	933f      	str	r3, [sp, #252]	@ 0xfc
 8002d50:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8002d54:	9340      	str	r3, [sp, #256]	@ 0x100
 8002d56:	6a23      	ldr	r3, [r4, #32]
 8002d58:	9322      	str	r3, [sp, #136]	@ 0x88
 8002d5a:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 8002d5e:	9335      	str	r3, [sp, #212]	@ 0xd4
 8002d60:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 8002d64:	9336      	str	r3, [sp, #216]	@ 0xd8
 8002d66:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	@ 0xa4
 8002d6a:	9337      	str	r3, [sp, #220]	@ 0xdc
 8002d6c:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 8002d70:	9338      	str	r3, [sp, #224]	@ 0xe0
 8002d72:	b2ab      	uxth	r3, r5
 8002d74:	933a      	str	r3, [sp, #232]	@ 0xe8
 8002d76:	b2b3      	uxth	r3, r6
 8002d78:	933b      	str	r3, [sp, #236]	@ 0xec
 8002d7a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	@ 0xac
 8002d7e:	9325      	str	r3, [sp, #148]	@ 0x94
 8002d80:	b23b      	sxth	r3, r7
 8002d82:	9326      	str	r3, [sp, #152]	@ 0x98
 8002d84:	f1b8 0f00 	cmp.w	r8, #0
 8002d88:	f000 80b4 	beq.w	8002ef4 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8002d8c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80b8 	beq.w	8002f06 <forward_conv2d_if32of32wf32_nl_pool+0x29e>
 8002d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	9322      	str	r3, [sp, #136]	@ 0x88
 8002d9e:	f002 faf7 	bl	8005390 <ai_array_get_byte_size>
 8002da2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8002da6:	902d      	str	r0, [sp, #180]	@ 0xb4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80be 	beq.w	8002f2a <forward_conv2d_if32of32wf32_nl_pool+0x2c2>
 8002dae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002db2:	f002 faed 	bl	8005390 <ai_array_get_byte_size>
 8002db6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002dba:	902c      	str	r0, [sp, #176]	@ 0xb0
 8002dbc:	f8bc 3000 	ldrh.w	r3, [ip]
 8002dc0:	9321      	str	r3, [sp, #132]	@ 0x84
 8002dc2:	f8da 1018 	ldr.w	r1, [sl, #24]
 8002dc6:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8002dca:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8002dcc:	6888      	ldr	r0, [r1, #8]
 8002dce:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8002dd2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002dd4:	f8bd 909c 	ldrh.w	r9, [sp, #156]	@ 0x9c
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f8db 2018 	ldr.w	r2, [fp, #24]
 8002dde:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8002de2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002de4:	f8bd e0a0 	ldrh.w	lr, [sp, #160]	@ 0xa0
 8002de8:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 8002dec:	6892      	ldr	r2, [r2, #8]
 8002dee:	f107 38ff 	add.w	r8, r7, #4294967295
 8002df2:	b2ad      	uxth	r5, r5
 8002df4:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
 8002df6:	3d01      	subs	r5, #1
 8002df8:	fb15 7508 	smlabb	r5, r5, r8, r7
 8002dfc:	fa0f f885 	sxth.w	r8, r5
 8002e00:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8002e02:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 8002e04:	b2b6      	uxth	r6, r6
 8002e06:	3d01      	subs	r5, #1
 8002e08:	3e01      	subs	r6, #1
 8002e0a:	fb16 7605 	smlabb	r6, r6, r5, r7
 8002e0e:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8002e10:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 8002e12:	eba5 0508 	sub.w	r5, r5, r8
 8002e16:	fa15 f587 	uxtah	r5, r5, r7
 8002e1a:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 8002e1c:	fa15 f587 	uxtah	r5, r5, r7
 8002e20:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 8002e22:	fb95 f5f9 	sdiv	r5, r5, r9
 8002e26:	b236      	sxth	r6, r6
 8002e28:	eba7 0906 	sub.w	r9, r7, r6
 8002e2c:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8002e2e:	fa19 f987 	uxtah	r9, r9, r7
 8002e32:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8002e34:	3501      	adds	r5, #1
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	fa19 f987 	uxtah	r9, r9, r7
 8002e3c:	b22d      	sxth	r5, r5
 8002e3e:	fb99 f9fe 	sdiv	r9, r9, lr
 8002e42:	f109 0e01 	add.w	lr, r9, #1
 8002e46:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8002e4a:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8002e4e:	d94e      	bls.n	8002eee <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8002e50:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8002e54:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8002e58:	f1bc 0f00 	cmp.w	ip, #0
 8002e5c:	d070      	beq.n	8002f40 <forward_conv2d_if32of32wf32_nl_pool+0x2d8>
 8002e5e:	f8dc 7000 	ldr.w	r7, [ip]
 8002e62:	b10f      	cbz	r7, 8002e68 <forward_conv2d_if32of32wf32_nl_pool+0x200>
 8002e64:	69bf      	ldr	r7, [r7, #24]
 8002e66:	68bf      	ldr	r7, [r7, #8]
 8002e68:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8002e6a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8002e6c:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8002e6e:	931e      	str	r3, [sp, #120]	@ 0x78
 8002e70:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8002e72:	931d      	str	r3, [sp, #116]	@ 0x74
 8002e74:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8002e76:	9513      	str	r5, [sp, #76]	@ 0x4c
 8002e78:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8002e7c:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8002e7e:	960e      	str	r6, [sp, #56]	@ 0x38
 8002e80:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 8002e84:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8002e86:	9318      	str	r3, [sp, #96]	@ 0x60
 8002e88:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8002e8a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8002e8c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8002e8e:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8002e92:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8002e94:	9312      	str	r3, [sp, #72]	@ 0x48
 8002e96:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8002e98:	9311      	str	r3, [sp, #68]	@ 0x44
 8002e9a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8002e9c:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 8002ea0:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8002ea2:	930d      	str	r3, [sp, #52]	@ 0x34
 8002ea4:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8002ea6:	930c      	str	r3, [sp, #48]	@ 0x30
 8002ea8:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8002eaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002eac:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8002eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8002eb0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8002eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eb4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8002eb6:	9308      	str	r3, [sp, #32]
 8002eb8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8002eba:	9307      	str	r3, [sp, #28]
 8002ebc:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8002ebe:	9306      	str	r3, [sp, #24]
 8002ec0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002ec2:	9305      	str	r3, [sp, #20]
 8002ec4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8002ec6:	9304      	str	r3, [sp, #16]
 8002ec8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8002eca:	9303      	str	r3, [sp, #12]
 8002ecc:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8002ece:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8002ed2:	fa0f f48e 	sxth.w	r4, lr
 8002ed6:	9414      	str	r4, [sp, #80]	@ 0x50
 8002ed8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8002edc:	69a4      	ldr	r4, [r4, #24]
 8002ede:	68a4      	ldr	r4, [r4, #8]
 8002ee0:	9400      	str	r4, [sp, #0]
 8002ee2:	465b      	mov	r3, fp
 8002ee4:	f000 fc42 	bl	800376c <forward_lite_conv2d_if32of32wf32_pool>
 8002ee8:	b043      	add	sp, #268	@ 0x10c
 8002eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eee:	2300      	movs	r3, #0
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	deff      	udf	#255	@ 0xff
 8002ef4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8002ef6:	b10b      	cbz	r3, 8002efc <forward_conv2d_if32of32wf32_nl_pool+0x294>
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	9322      	str	r3, [sp, #136]	@ 0x88
 8002efc:	2301      	movs	r3, #1
 8002efe:	f8cd 80b4 	str.w	r8, [sp, #180]	@ 0xb4
 8002f02:	932c      	str	r3, [sp, #176]	@ 0xb0
 8002f04:	e75d      	b.n	8002dc2 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 8002f06:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8002f08:	b10b      	cbz	r3, 8002f0e <forward_conv2d_if32of32wf32_nl_pool+0x2a6>
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	9322      	str	r3, [sp, #136]	@ 0x88
 8002f0e:	2301      	movs	r3, #1
 8002f10:	2200      	movs	r2, #0
 8002f12:	e9cd 322c 	strd	r3, r2, [sp, #176]	@ 0xb0
 8002f16:	e754      	b.n	8002dc2 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d90e      	bls.n	8002f3a <forward_conv2d_if32of32wf32_nl_pool+0x2d2>
 8002f1c:	f8cd 8104 	str.w	r8, [sp, #260]	@ 0x104
 8002f20:	46c3      	mov	fp, r8
 8002f22:	e6d6      	b.n	8002cd2 <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 8002f24:	2300      	movs	r3, #0
 8002f26:	9341      	str	r3, [sp, #260]	@ 0x104
 8002f28:	e6d1      	b.n	8002cce <forward_conv2d_if32of32wf32_nl_pool+0x66>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002f30:	932c      	str	r3, [sp, #176]	@ 0xb0
 8002f32:	f8bc 3000 	ldrh.w	r3, [ip]
 8002f36:	9321      	str	r3, [sp, #132]	@ 0x84
 8002f38:	e743      	b.n	8002dc2 <forward_conv2d_if32of32wf32_nl_pool+0x15a>
 8002f3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002f3e:	deff      	udf	#255	@ 0xff
 8002f40:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8002f44:	deff      	udf	#255	@ 0xff
 8002f46:	bf00      	nop

08002f48 <forward_dense>:
 8002f48:	6982      	ldr	r2, [r0, #24]
 8002f4a:	8813      	ldrh	r3, [r2, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d043      	beq.n	8002fd8 <forward_dense+0x90>
 8002f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f54:	6855      	ldr	r5, [r2, #4]
 8002f56:	6869      	ldr	r1, [r5, #4]
 8002f58:	b08e      	sub	sp, #56	@ 0x38
 8002f5a:	b101      	cbz	r1, 8002f5e <forward_dense+0x16>
 8002f5c:	6809      	ldr	r1, [r1, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d069      	beq.n	8003036 <forward_dense+0xee>
 8002f62:	692a      	ldr	r2, [r5, #16]
 8002f64:	b102      	cbz	r2, 8002f68 <forward_dense+0x20>
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d061      	beq.n	8003030 <forward_dense+0xe8>
 8002f6c:	69ec      	ldr	r4, [r5, #28]
 8002f6e:	2c00      	cmp	r4, #0
 8002f70:	d057      	beq.n	8003022 <forward_dense+0xda>
 8002f72:	8b2e      	ldrh	r6, [r5, #24]
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	2e01      	cmp	r6, #1
 8002f78:	d955      	bls.n	8003026 <forward_dense+0xde>
 8002f7a:	6864      	ldr	r4, [r4, #4]
 8002f7c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8002f80:	68cf      	ldr	r7, [r1, #12]
 8002f82:	68d0      	ldr	r0, [r2, #12]
 8002f84:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8002f88:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8002f8c:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8002f90:	f8d9 0000 	ldr.w	r0, [r9]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	fb06 f807 	mul.w	r8, r6, r7
 8002f9a:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8002f9e:	d044      	beq.n	800302a <forward_dense+0xe2>
 8002fa0:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8002fa2:	b11d      	cbz	r5, 8002fac <forward_dense+0x64>
 8002fa4:	682d      	ldr	r5, [r5, #0]
 8002fa6:	b10d      	cbz	r5, 8002fac <forward_dense+0x64>
 8002fa8:	69ab      	ldr	r3, [r5, #24]
 8002faa:	689d      	ldr	r5, [r3, #8]
 8002fac:	6992      	ldr	r2, [r2, #24]
 8002fae:	698b      	ldr	r3, [r1, #24]
 8002fb0:	6890      	ldr	r0, [r2, #8]
 8002fb2:	6899      	ldr	r1, [r3, #8]
 8002fb4:	b10c      	cbz	r4, 8002fba <forward_dense+0x72>
 8002fb6:	69a3      	ldr	r3, [r4, #24]
 8002fb8:	689c      	ldr	r4, [r3, #8]
 8002fba:	4b20      	ldr	r3, [pc, #128]	@ (800303c <forward_dense+0xf4>)
 8002fbc:	459c      	cmp	ip, r3
 8002fbe:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8002fc2:	d023      	beq.n	800300c <forward_dense+0xc4>
 8002fc4:	4e1e      	ldr	r6, [pc, #120]	@ (8003040 <forward_dense+0xf8>)
 8002fc6:	45b4      	cmp	ip, r6
 8002fc8:	d015      	beq.n	8002ff6 <forward_dense+0xae>
 8002fca:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8002fce:	459c      	cmp	ip, r3
 8002fd0:	d004      	beq.n	8002fdc <forward_dense+0x94>
 8002fd2:	b00e      	add	sp, #56	@ 0x38
 8002fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	deff      	udf	#255	@ 0xff
 8002fdc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8002fe0:	a807      	add	r0, sp, #28
 8002fe2:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8002fe6:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8002fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8002fec:	f001 f9fa 	bl	80043e4 <forward_lite_dense_if32of32wf32>
 8002ff0:	b00e      	add	sp, #56	@ 0x38
 8002ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff6:	e9cd e803 	strd	lr, r8, [sp, #12]
 8002ffa:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8002ffe:	9500      	str	r5, [sp, #0]
 8003000:	464b      	mov	r3, r9
 8003002:	f001 fb49 	bl	8004698 <forward_lite_dense_if32of32wf32_lut4>
 8003006:	b00e      	add	sp, #56	@ 0x38
 8003008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800300c:	e9cd e803 	strd	lr, r8, [sp, #12]
 8003010:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8003014:	9500      	str	r5, [sp, #0]
 8003016:	464b      	mov	r3, r9
 8003018:	f001 fc66 	bl	80048e8 <forward_lite_dense_if32of32wf32_lut8>
 800301c:	b00e      	add	sp, #56	@ 0x38
 800301e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003022:	4620      	mov	r0, r4
 8003024:	e7aa      	b.n	8002f7c <forward_dense+0x34>
 8003026:	2400      	movs	r4, #0
 8003028:	e7a8      	b.n	8002f7c <forward_dense+0x34>
 800302a:	2300      	movs	r3, #0
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	deff      	udf	#255	@ 0xff
 8003030:	2300      	movs	r3, #0
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	deff      	udf	#255	@ 0xff
 8003036:	2300      	movs	r3, #0
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	deff      	udf	#255	@ 0xff
 800303c:	00d01040 	.word	0x00d01040
 8003040:	00f01040 	.word	0x00f01040

08003044 <forward_pad>:
 8003044:	7f03      	ldrb	r3, [r0, #28]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d80b      	bhi.n	8003062 <forward_pad+0x1e>
 800304a:	e8df f003 	tbb	[pc, r3]
 800304e:	0608      	.short	0x0608
 8003050:	0204      	.short	0x0204
 8003052:	f000 b995 	b.w	8003380 <forward_pad_8bit_ch1st_3x3_constant>
 8003056:	f000 ba23 	b.w	80034a0 <forward_pad_edge>
 800305a:	f000 ba63 	b.w	8003524 <forward_pad_reflect>
 800305e:	f000 b9d7 	b.w	8003410 <forward_pad_constant>
 8003062:	4770      	bx	lr

08003064 <forward_transpose>:
 8003064:	6983      	ldr	r3, [r0, #24]
 8003066:	881a      	ldrh	r2, [r3, #0]
 8003068:	2a00      	cmp	r2, #0
 800306a:	d07a      	beq.n	8003162 <forward_transpose+0xfe>
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	684b      	ldr	r3, [r1, #4]
 8003070:	b103      	cbz	r3, 8003074 <forward_transpose+0x10>
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2a01      	cmp	r2, #1
 8003076:	f000 80a0 	beq.w	80031ba <forward_transpose+0x156>
 800307a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800307e:	690c      	ldr	r4, [r1, #16]
 8003080:	b08b      	sub	sp, #44	@ 0x2c
 8003082:	b104      	cbz	r4, 8003086 <forward_transpose+0x22>
 8003084:	6824      	ldr	r4, [r4, #0]
 8003086:	6a05      	ldr	r5, [r0, #32]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	6869      	ldr	r1, [r5, #4]
 800308c:	691e      	ldr	r6, [r3, #16]
 800308e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003092:	9100      	str	r1, [sp, #0]
 8003094:	68a9      	ldr	r1, [r5, #8]
 8003096:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800309a:	9106      	str	r1, [sp, #24]
 800309c:	68e9      	ldr	r1, [r5, #12]
 800309e:	f5b6 6fa0 	cmp.w	r6, #1280	@ 0x500
 80030a2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80030a6:	9107      	str	r1, [sp, #28]
 80030a8:	d376      	bcc.n	8003198 <forward_transpose+0x134>
 80030aa:	69c1      	ldr	r1, [r0, #28]
 80030ac:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 80030b0:	bf2a      	itet	cs
 80030b2:	6929      	ldrcs	r1, [r5, #16]
 80030b4:	2104      	movcc	r1, #4
 80030b6:	0089      	lslcs	r1, r1, #2
 80030b8:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 80030bc:	5851      	ldr	r1, [r2, r1]
 80030be:	9103      	str	r1, [sp, #12]
 80030c0:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 80030c4:	d06f      	beq.n	80031a6 <forward_transpose+0x142>
 80030c6:	2200      	movs	r2, #0
 80030c8:	9204      	str	r2, [sp, #16]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	68e1      	ldr	r1, [r4, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	69a3      	ldr	r3, [r4, #24]
 80030d6:	689e      	ldr	r6, [r3, #8]
 80030d8:	68cb      	ldr	r3, [r1, #12]
 80030da:	f3c2 2283 	ubfx	r2, r2, #10, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d057      	beq.n	8003192 <forward_transpose+0x12e>
 80030e2:	6888      	ldr	r0, [r1, #8]
 80030e4:	2300      	movs	r3, #0
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d052      	beq.n	8003192 <forward_transpose+0x12e>
 80030ec:	68a5      	ldr	r5, [r4, #8]
 80030ee:	9308      	str	r3, [sp, #32]
 80030f0:	2000      	movs	r0, #0
 80030f2:	f3c5 2517 	ubfx	r5, r5, #8, #24
 80030f6:	9005      	str	r0, [sp, #20]
 80030f8:	4692      	mov	sl, r2
 80030fa:	469b      	mov	fp, r3
 80030fc:	f04f 0800 	mov.w	r8, #0
 8003100:	9309      	str	r3, [sp, #36]	@ 0x24
 8003102:	2d04      	cmp	r5, #4
 8003104:	bf8c      	ite	hi
 8003106:	690b      	ldrhi	r3, [r1, #16]
 8003108:	2301      	movls	r3, #1
 800310a:	4598      	cmp	r8, r3
 800310c:	d22b      	bcs.n	8003166 <forward_transpose+0x102>
 800310e:	2d05      	cmp	r5, #5
 8003110:	46d9      	mov	r9, fp
 8003112:	f04f 0700 	mov.w	r7, #0
 8003116:	d91d      	bls.n	8003154 <forward_transpose+0xf0>
 8003118:	694a      	ldr	r2, [r1, #20]
 800311a:	4297      	cmp	r7, r2
 800311c:	d21c      	bcs.n	8003158 <forward_transpose+0xf4>
 800311e:	684a      	ldr	r2, [r1, #4]
 8003120:	b192      	cbz	r2, 8003148 <forward_transpose+0xe4>
 8003122:	2500      	movs	r5, #0
 8003124:	9b00      	ldr	r3, [sp, #0]
 8003126:	fb03 9005 	mla	r0, r3, r5, r9
 800312a:	9b01      	ldr	r3, [sp, #4]
 800312c:	4631      	mov	r1, r6
 800312e:	4418      	add	r0, r3
 8003130:	4652      	mov	r2, sl
 8003132:	f001 ffcd 	bl	80050d0 <st_int8_copy>
 8003136:	68e1      	ldr	r1, [r4, #12]
 8003138:	684b      	ldr	r3, [r1, #4]
 800313a:	3501      	adds	r5, #1
 800313c:	429d      	cmp	r5, r3
 800313e:	4456      	add	r6, sl
 8003140:	d3f0      	bcc.n	8003124 <forward_transpose+0xc0>
 8003142:	68a3      	ldr	r3, [r4, #8]
 8003144:	f3c3 2517 	ubfx	r5, r3, #8, #24
 8003148:	9b04      	ldr	r3, [sp, #16]
 800314a:	2d05      	cmp	r5, #5
 800314c:	f107 0701 	add.w	r7, r7, #1
 8003150:	4499      	add	r9, r3
 8003152:	d8e1      	bhi.n	8003118 <forward_transpose+0xb4>
 8003154:	2f00      	cmp	r7, #0
 8003156:	d0e2      	beq.n	800311e <forward_transpose+0xba>
 8003158:	9b03      	ldr	r3, [sp, #12]
 800315a:	f108 0801 	add.w	r8, r8, #1
 800315e:	449b      	add	fp, r3
 8003160:	e7cf      	b.n	8003102 <forward_transpose+0x9e>
 8003162:	6853      	ldr	r3, [r2, #4]
 8003164:	deff      	udf	#255	@ 0xff
 8003166:	9806      	ldr	r0, [sp, #24]
 8003168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800316a:	9a05      	ldr	r2, [sp, #20]
 800316c:	4403      	add	r3, r0
 800316e:	6888      	ldr	r0, [r1, #8]
 8003170:	3201      	adds	r2, #1
 8003172:	4282      	cmp	r2, r0
 8003174:	9205      	str	r2, [sp, #20]
 8003176:	d3c0      	bcc.n	80030fa <forward_transpose+0x96>
 8003178:	9d02      	ldr	r5, [sp, #8]
 800317a:	9b08      	ldr	r3, [sp, #32]
 800317c:	3501      	adds	r5, #1
 800317e:	462f      	mov	r7, r5
 8003180:	9502      	str	r5, [sp, #8]
 8003182:	68cd      	ldr	r5, [r1, #12]
 8003184:	42af      	cmp	r7, r5
 8003186:	4652      	mov	r2, sl
 8003188:	d203      	bcs.n	8003192 <forward_transpose+0x12e>
 800318a:	9d07      	ldr	r5, [sp, #28]
 800318c:	442b      	add	r3, r5
 800318e:	2800      	cmp	r0, #0
 8003190:	d1ac      	bne.n	80030ec <forward_transpose+0x88>
 8003192:	b00b      	add	sp, #44	@ 0x2c
 8003194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003198:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 800319c:	2100      	movs	r1, #0
 800319e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 80031a2:	9103      	str	r1, [sp, #12]
 80031a4:	d18f      	bne.n	80030c6 <forward_transpose+0x62>
 80031a6:	69c1      	ldr	r1, [r0, #28]
 80031a8:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 80031ac:	bf2a      	itet	cs
 80031ae:	6969      	ldrcs	r1, [r5, #20]
 80031b0:	2104      	movcc	r1, #4
 80031b2:	0089      	lslcs	r1, r1, #2
 80031b4:	5852      	ldr	r2, [r2, r1]
 80031b6:	9204      	str	r2, [sp, #16]
 80031b8:	e787      	b.n	80030ca <forward_transpose+0x66>
 80031ba:	2300      	movs	r3, #0
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	deff      	udf	#255	@ 0xff

080031c0 <forward_reduce>:
 80031c0:	6982      	ldr	r2, [r0, #24]
 80031c2:	8813      	ldrh	r3, [r2, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 808d 	beq.w	80032e4 <forward_reduce+0x124>
 80031ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ce:	6852      	ldr	r2, [r2, #4]
 80031d0:	6856      	ldr	r6, [r2, #4]
 80031d2:	b08b      	sub	sp, #44	@ 0x2c
 80031d4:	b106      	cbz	r6, 80031d8 <forward_reduce+0x18>
 80031d6:	6836      	ldr	r6, [r6, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	f000 8085 	beq.w	80032e8 <forward_reduce+0x128>
 80031de:	6913      	ldr	r3, [r2, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8084 	beq.w	80032ee <forward_reduce+0x12e>
 80031e6:	681c      	ldr	r4, [r3, #0]
 80031e8:	6972      	ldr	r2, [r6, #20]
 80031ea:	6963      	ldr	r3, [r4, #20]
 80031ec:	6857      	ldr	r7, [r2, #4]
 80031ee:	685d      	ldr	r5, [r3, #4]
 80031f0:	69c3      	ldr	r3, [r0, #28]
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	ab05      	add	r3, sp, #20
 80031f8:	f240 5c02 	movw	ip, #1282	@ 0x502
 80031fc:	f104 0108 	add.w	r1, r4, #8
 8003200:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8003204:	e9cd 2207 	strd	r2, r2, [sp, #28]
 8003208:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800320c:	9304      	str	r3, [sp, #16]
 800320e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003210:	463b      	mov	r3, r7
 8003212:	f106 0208 	add.w	r2, r6, #8
 8003216:	a803      	add	r0, sp, #12
 8003218:	f8cd c00c 	str.w	ip, [sp, #12]
 800321c:	f002 f910 	bl	8005440 <core_compute_offsets>
 8003220:	69b3      	ldr	r3, [r6, #24]
 8003222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003226:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800322a:	f002 f8b1 	bl	8005390 <ai_array_get_byte_size>
 800322e:	69a2      	ldr	r2, [r4, #24]
 8003230:	e9d2 1401 	ldrd	r1, r4, [r2, #4]
 8003234:	6810      	ldr	r0, [r2, #0]
 8003236:	f002 f8ab 	bl	8005390 <ai_array_get_byte_size>
 800323a:	eb04 0900 	add.w	r9, r4, r0
 800323e:	454c      	cmp	r4, r9
 8003240:	bf38      	it	cc
 8003242:	46a2      	movcc	sl, r4
 8003244:	d208      	bcs.n	8003258 <forward_reduce+0x98>
 8003246:	9b01      	ldr	r3, [sp, #4]
 8003248:	4651      	mov	r1, sl
 800324a:	6898      	ldr	r0, [r3, #8]
 800324c:	462a      	mov	r2, r5
 800324e:	44aa      	add	sl, r5
 8003250:	f001 ff3e 	bl	80050d0 <st_int8_copy>
 8003254:	45d1      	cmp	r9, sl
 8003256:	d8f6      	bhi.n	8003246 <forward_reduce+0x86>
 8003258:	68f2      	ldr	r2, [r6, #12]
 800325a:	68d1      	ldr	r1, [r2, #12]
 800325c:	2900      	cmp	r1, #0
 800325e:	d03e      	beq.n	80032de <forward_reduce+0x11e>
 8003260:	2300      	movs	r3, #0
 8003262:	6895      	ldr	r5, [r2, #8]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	2d00      	cmp	r5, #0
 8003268:	d039      	beq.n	80032de <forward_reduce+0x11e>
 800326a:	68b1      	ldr	r1, [r6, #8]
 800326c:	f04f 0a00 	mov.w	sl, #0
 8003270:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8003274:	f04f 0900 	mov.w	r9, #0
 8003278:	2904      	cmp	r1, #4
 800327a:	bf8c      	ite	hi
 800327c:	6910      	ldrhi	r0, [r2, #16]
 800327e:	2001      	movls	r0, #1
 8003280:	4581      	cmp	r9, r0
 8003282:	d21c      	bcs.n	80032be <forward_reduce+0xfe>
 8003284:	6850      	ldr	r0, [r2, #4]
 8003286:	2500      	movs	r5, #0
 8003288:	b178      	cbz	r0, 80032aa <forward_reduce+0xea>
 800328a:	465a      	mov	r2, fp
 800328c:	4621      	mov	r1, r4
 800328e:	4620      	mov	r0, r4
 8003290:	47c0      	blx	r8
 8003292:	9904      	ldr	r1, [sp, #16]
 8003294:	68f2      	ldr	r2, [r6, #12]
 8003296:	6848      	ldr	r0, [r1, #4]
 8003298:	6851      	ldr	r1, [r2, #4]
 800329a:	3501      	adds	r5, #1
 800329c:	42a9      	cmp	r1, r5
 800329e:	44bb      	add	fp, r7
 80032a0:	4404      	add	r4, r0
 80032a2:	d8f2      	bhi.n	800328a <forward_reduce+0xca>
 80032a4:	68b1      	ldr	r1, [r6, #8]
 80032a6:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80032aa:	9803      	ldr	r0, [sp, #12]
 80032ac:	f5b0 6fa0 	cmp.w	r0, #1280	@ 0x500
 80032b0:	d302      	bcc.n	80032b8 <forward_reduce+0xf8>
 80032b2:	9804      	ldr	r0, [sp, #16]
 80032b4:	6900      	ldr	r0, [r0, #16]
 80032b6:	4404      	add	r4, r0
 80032b8:	f109 0901 	add.w	r9, r9, #1
 80032bc:	e7dc      	b.n	8003278 <forward_reduce+0xb8>
 80032be:	9b04      	ldr	r3, [sp, #16]
 80032c0:	6895      	ldr	r5, [r2, #8]
 80032c2:	6898      	ldr	r0, [r3, #8]
 80032c4:	f10a 0a01 	add.w	sl, sl, #1
 80032c8:	4555      	cmp	r5, sl
 80032ca:	4404      	add	r4, r0
 80032cc:	d8d2      	bhi.n	8003274 <forward_reduce+0xb4>
 80032ce:	68d8      	ldr	r0, [r3, #12]
 80032d0:	9b01      	ldr	r3, [sp, #4]
 80032d2:	68d1      	ldr	r1, [r2, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	428b      	cmp	r3, r1
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	4404      	add	r4, r0
 80032dc:	d3c3      	bcc.n	8003266 <forward_reduce+0xa6>
 80032de:	b00b      	add	sp, #44	@ 0x2c
 80032e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	deff      	udf	#255	@ 0xff
 80032e8:	2300      	movs	r3, #0
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	deff      	udf	#255	@ 0xff
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	deff      	udf	#255	@ 0xff
 80032f2:	bf00      	nop

080032f4 <forward_bn>:
 80032f4:	6982      	ldr	r2, [r0, #24]
 80032f6:	8813      	ldrh	r3, [r2, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d030      	beq.n	800335e <forward_bn+0x6a>
 80032fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fe:	6852      	ldr	r2, [r2, #4]
 8003300:	6855      	ldr	r5, [r2, #4]
 8003302:	b083      	sub	sp, #12
 8003304:	b105      	cbz	r5, 8003308 <forward_bn+0x14>
 8003306:	682d      	ldr	r5, [r5, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d036      	beq.n	800337a <forward_bn+0x86>
 800330c:	6916      	ldr	r6, [r2, #16]
 800330e:	b106      	cbz	r6, 8003312 <forward_bn+0x1e>
 8003310:	6836      	ldr	r6, [r6, #0]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d025      	beq.n	8003362 <forward_bn+0x6e>
 8003316:	69d3      	ldr	r3, [r2, #28]
 8003318:	b333      	cbz	r3, 8003368 <forward_bn+0x74>
 800331a:	8b12      	ldrh	r2, [r2, #24]
 800331c:	681f      	ldr	r7, [r3, #0]
 800331e:	2a01      	cmp	r2, #1
 8003320:	d929      	bls.n	8003376 <forward_bn+0x82>
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 8003328:	0a12      	lsrs	r2, r2, #8
 800332a:	d022      	beq.n	8003372 <forward_bn+0x7e>
 800332c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003330:	2401      	movs	r4, #1
 8003332:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003336:	4290      	cmp	r0, r2
 8003338:	fb01 f404 	mul.w	r4, r1, r4
 800333c:	d1f9      	bne.n	8003332 <forward_bn+0x3e>
 800333e:	69a9      	ldr	r1, [r5, #24]
 8003340:	69b6      	ldr	r6, [r6, #24]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	6845      	ldr	r5, [r0, #4]
 8003346:	6889      	ldr	r1, [r1, #8]
 8003348:	68b0      	ldr	r0, [r6, #8]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	b10b      	cbz	r3, 8003352 <forward_bn+0x5e>
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	e9cd 4500 	strd	r4, r5, [sp]
 8003356:	f001 f837 	bl	80043c8 <forward_lite_bn_if32of32wf32>
 800335a:	b003      	add	sp, #12
 800335c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	deff      	udf	#255	@ 0xff
 8003362:	2300      	movs	r3, #0
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	deff      	udf	#255	@ 0xff
 8003368:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 800336c:	0a12      	lsrs	r2, r2, #8
 800336e:	461f      	mov	r7, r3
 8003370:	d1dc      	bne.n	800332c <forward_bn+0x38>
 8003372:	2401      	movs	r4, #1
 8003374:	e7e3      	b.n	800333e <forward_bn+0x4a>
 8003376:	2300      	movs	r3, #0
 8003378:	e7d4      	b.n	8003324 <forward_bn+0x30>
 800337a:	2300      	movs	r3, #0
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	deff      	udf	#255	@ 0xff

08003380 <forward_pad_8bit_ch1st_3x3_constant>:
 8003380:	6982      	ldr	r2, [r0, #24]
 8003382:	8813      	ldrh	r3, [r2, #0]
 8003384:	b36b      	cbz	r3, 80033e2 <forward_pad_8bit_ch1st_3x3_constant+0x62>
 8003386:	6852      	ldr	r2, [r2, #4]
 8003388:	6851      	ldr	r1, [r2, #4]
 800338a:	b101      	cbz	r1, 800338e <forward_pad_8bit_ch1st_3x3_constant+0xe>
 800338c:	6809      	ldr	r1, [r1, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d03b      	beq.n	800340a <forward_pad_8bit_ch1st_3x3_constant+0x8a>
 8003392:	6913      	ldr	r3, [r2, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d036      	beq.n	8003406 <forward_pad_8bit_ch1st_3x3_constant+0x86>
 8003398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339c:	e9d0 5209 	ldrd	r5, r2, [r0, #36]	@ 0x24
 80033a0:	e9d5 0400 	ldrd	r0, r4, [r5]
 80033a4:	681f      	ldr	r7, [r3, #0]
 80033a6:	68cb      	ldr	r3, [r1, #12]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80033ae:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	e9d1 6105 	ldrd	r6, r1, [r1, #20]
 80033b8:	4320      	orrs	r0, r4
 80033ba:	b204      	sxth	r4, r0
 80033bc:	6888      	ldr	r0, [r1, #8]
 80033be:	e9d7 7105 	ldrd	r7, r1, [r7, #20]
 80033c2:	b084      	sub	sp, #16
 80033c4:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80033c8:	6889      	ldr	r1, [r1, #8]
 80033ca:	68f7      	ldr	r7, [r6, #12]
 80033cc:	6876      	ldr	r6, [r6, #4]
 80033ce:	b154      	cbz	r4, 80033e6 <forward_pad_8bit_ch1st_3x3_constant+0x66>
 80033d0:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 80033d4:	e9cd c600 	strd	ip, r6, [sp]
 80033d8:	f001 fc0a 	bl	8004bf0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>
 80033dc:	b004      	add	sp, #16
 80033de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	deff      	udf	#255	@ 0xff
 80033e6:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 80033ea:	2c02      	cmp	r4, #2
 80033ec:	d1f0      	bne.n	80033d0 <forward_pad_8bit_ch1st_3x3_constant+0x50>
 80033ee:	fa0f f888 	sxth.w	r8, r8
 80033f2:	f1b8 0f02 	cmp.w	r8, #2
 80033f6:	d1eb      	bne.n	80033d0 <forward_pad_8bit_ch1st_3x3_constant+0x50>
 80033f8:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 80033fc:	e9cd c600 	strd	ip, r6, [sp]
 8003400:	f001 fbc2 	bl	8004b88 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>
 8003404:	e7ea      	b.n	80033dc <forward_pad_8bit_ch1st_3x3_constant+0x5c>
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	deff      	udf	#255	@ 0xff
 800340a:	2300      	movs	r3, #0
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	deff      	udf	#255	@ 0xff

08003410 <forward_pad_constant>:
 8003410:	6982      	ldr	r2, [r0, #24]
 8003412:	8813      	ldrh	r3, [r2, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d03b      	beq.n	8003490 <forward_pad_constant+0x80>
 8003418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800341c:	6852      	ldr	r2, [r2, #4]
 800341e:	6854      	ldr	r4, [r2, #4]
 8003420:	b088      	sub	sp, #32
 8003422:	b104      	cbz	r4, 8003426 <forward_pad_constant+0x16>
 8003424:	6824      	ldr	r4, [r4, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d034      	beq.n	8003494 <forward_pad_constant+0x84>
 800342a:	6913      	ldr	r3, [r2, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d034      	beq.n	800349a <forward_pad_constant+0x8a>
 8003430:	6819      	ldr	r1, [r3, #0]
 8003432:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8003434:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8003436:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 800343a:	69a3      	ldr	r3, [r4, #24]
 800343c:	6967      	ldr	r7, [r4, #20]
 800343e:	f8d3 8000 	ldr.w	r8, [r3]
 8003442:	6892      	ldr	r2, [r2, #8]
 8003444:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8003448:	e9d0 ec02 	ldrd	lr, ip, [r0, #8]
 800344c:	fb0e f606 	mul.w	r6, lr, r6
 8003450:	6898      	ldr	r0, [r3, #8]
 8003452:	6889      	ldr	r1, [r1, #8]
 8003454:	9606      	str	r6, [sp, #24]
 8003456:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 800345a:	fb0e f606 	mul.w	r6, lr, r6
 800345e:	9605      	str	r6, [sp, #20]
 8003460:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8003464:	fb0c f606 	mul.w	r6, ip, r6
 8003468:	9604      	str	r6, [sp, #16]
 800346a:	f9b5 5000 	ldrsh.w	r5, [r5]
 800346e:	fb0c f505 	mul.w	r5, ip, r5
 8003472:	9503      	str	r5, [sp, #12]
 8003474:	68fd      	ldr	r5, [r7, #12]
 8003476:	9502      	str	r5, [sp, #8]
 8003478:	687d      	ldr	r5, [r7, #4]
 800347a:	9501      	str	r5, [sp, #4]
 800347c:	68e4      	ldr	r4, [r4, #12]
 800347e:	68e4      	ldr	r4, [r4, #12]
 8003480:	9400      	str	r4, [sp, #0]
 8003482:	f3c8 13c6 	ubfx	r3, r8, #7, #7
 8003486:	f001 fc6b 	bl	8004d60 <forward_lite_pad_constant>
 800348a:	b008      	add	sp, #32
 800348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	deff      	udf	#255	@ 0xff
 8003494:	2300      	movs	r3, #0
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	deff      	udf	#255	@ 0xff
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	deff      	udf	#255	@ 0xff
 800349e:	bf00      	nop

080034a0 <forward_pad_edge>:
 80034a0:	6982      	ldr	r2, [r0, #24]
 80034a2:	8813      	ldrh	r3, [r2, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d035      	beq.n	8003514 <forward_pad_edge+0x74>
 80034a8:	6851      	ldr	r1, [r2, #4]
 80034aa:	684a      	ldr	r2, [r1, #4]
 80034ac:	b102      	cbz	r2, 80034b0 <forward_pad_edge+0x10>
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d031      	beq.n	8003518 <forward_pad_edge+0x78>
 80034b4:	690b      	ldr	r3, [r1, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d031      	beq.n	800351e <forward_pad_edge+0x7e>
 80034ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80034c0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80034c4:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 80034c8:	6990      	ldr	r0, [r2, #24]
 80034ca:	6957      	ldr	r7, [r2, #20]
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	f8de 200c 	ldr.w	r2, [lr, #12]
 80034d2:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 80034d6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80034da:	f9b5 3000 	ldrsh.w	r3, [r5]
 80034de:	6889      	ldr	r1, [r1, #8]
 80034e0:	b089      	sub	sp, #36	@ 0x24
 80034e2:	fb04 f606 	mul.w	r6, r4, r6
 80034e6:	9606      	str	r6, [sp, #24]
 80034e8:	f8dc c008 	ldr.w	ip, [ip, #8]
 80034ec:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 80034f0:	9403      	str	r4, [sp, #12]
 80034f2:	fb0c f606 	mul.w	r6, ip, r6
 80034f6:	fb03 f404 	mul.w	r4, r3, r4
 80034fa:	9605      	str	r6, [sp, #20]
 80034fc:	9404      	str	r4, [sp, #16]
 80034fe:	68bc      	ldr	r4, [r7, #8]
 8003500:	9402      	str	r4, [sp, #8]
 8003502:	68fc      	ldr	r4, [r7, #12]
 8003504:	9401      	str	r4, [sp, #4]
 8003506:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 800350a:	9400      	str	r4, [sp, #0]
 800350c:	f001 fcc6 	bl	8004e9c <forward_lite_pad_edge>
 8003510:	b009      	add	sp, #36	@ 0x24
 8003512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	deff      	udf	#255	@ 0xff
 8003518:	2300      	movs	r3, #0
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	deff      	udf	#255	@ 0xff
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	deff      	udf	#255	@ 0xff
 8003522:	bf00      	nop

08003524 <forward_pad_reflect>:
 8003524:	6982      	ldr	r2, [r0, #24]
 8003526:	8813      	ldrh	r3, [r2, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d045      	beq.n	80035b8 <forward_pad_reflect+0x94>
 800352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003530:	6852      	ldr	r2, [r2, #4]
 8003532:	6857      	ldr	r7, [r2, #4]
 8003534:	b08f      	sub	sp, #60	@ 0x3c
 8003536:	b107      	cbz	r7, 800353a <forward_pad_reflect+0x16>
 8003538:	683f      	ldr	r7, [r7, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d03e      	beq.n	80035bc <forward_pad_reflect+0x98>
 800353e:	6913      	ldr	r3, [r2, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03e      	beq.n	80035c2 <forward_pad_reflect+0x9e>
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 800354c:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8003550:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 8003554:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8003556:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 800355a:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 800355e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8003562:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8003566:	f9b4 b000 	ldrsh.w	fp, [r4]
 800356a:	6889      	ldr	r1, [r1, #8]
 800356c:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 8003570:	fb05 f606 	mul.w	r6, r5, r6
 8003574:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 8003578:	6880      	ldr	r0, [r0, #8]
 800357a:	bf28      	it	cs
 800357c:	6912      	ldrcs	r2, [r2, #16]
 800357e:	960c      	str	r6, [sp, #48]	@ 0x30
 8003580:	fb05 f60e 	mul.w	r6, r5, lr
 8003584:	960b      	str	r6, [sp, #44]	@ 0x2c
 8003586:	fb0c f60b 	mul.w	r6, ip, fp
 800358a:	960a      	str	r6, [sp, #40]	@ 0x28
 800358c:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 8003590:	f8cd c014 	str.w	ip, [sp, #20]
 8003594:	e9cd 5e06 	strd	r5, lr, [sp, #24]
 8003598:	e9cd b408 	strd	fp, r4, [sp, #32]
 800359c:	68bc      	ldr	r4, [r7, #8]
 800359e:	9404      	str	r4, [sp, #16]
 80035a0:	68fc      	ldr	r4, [r7, #12]
 80035a2:	bf38      	it	cc
 80035a4:	2201      	movcc	r2, #1
 80035a6:	e9cd a402 	strd	sl, r4, [sp, #8]
 80035aa:	e9cd 8900 	strd	r8, r9, [sp]
 80035ae:	f001 fce9 	bl	8004f84 <forward_lite_pad_reflect>
 80035b2:	b00f      	add	sp, #60	@ 0x3c
 80035b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	deff      	udf	#255	@ 0xff
 80035bc:	2300      	movs	r3, #0
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	deff      	udf	#255	@ 0xff
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	deff      	udf	#255	@ 0xff
 80035c6:	bf00      	nop

080035c8 <forward_mp>:
 80035c8:	6983      	ldr	r3, [r0, #24]
 80035ca:	881a      	ldrh	r2, [r3, #0]
 80035cc:	2a00      	cmp	r2, #0
 80035ce:	f000 80c5 	beq.w	800375c <forward_mp+0x194>
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	684b      	ldr	r3, [r1, #4]
 80035d6:	b103      	cbz	r3, 80035da <forward_mp+0x12>
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2a01      	cmp	r2, #1
 80035dc:	f000 80c0 	beq.w	8003760 <forward_mp+0x198>
 80035e0:	690a      	ldr	r2, [r1, #16]
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	f000 80bf 	beq.w	8003766 <forward_mp+0x19e>
 80035e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	68ca      	ldr	r2, [r1, #12]
 80035f0:	6989      	ldr	r1, [r1, #24]
 80035f2:	68d4      	ldr	r4, [r2, #12]
 80035f4:	6895      	ldr	r5, [r2, #8]
 80035f6:	688a      	ldr	r2, [r1, #8]
 80035f8:	68d9      	ldr	r1, [r3, #12]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	b093      	sub	sp, #76	@ 0x4c
 8003604:	9200      	str	r2, [sp, #0]
 8003606:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003608:	930e      	str	r3, [sp, #56]	@ 0x38
 800360a:	e9d2 3600 	ldrd	r3, r6, [r2]
 800360e:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 8003612:	69c1      	ldr	r1, [r0, #28]
 8003614:	9109      	str	r1, [sp, #36]	@ 0x24
 8003616:	6a01      	ldr	r1, [r0, #32]
 8003618:	910a      	str	r1, [sp, #40]	@ 0x28
 800361a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800361c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800361e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003620:	9408      	str	r4, [sp, #32]
 8003622:	9504      	str	r5, [sp, #16]
 8003624:	960d      	str	r6, [sp, #52]	@ 0x34
 8003626:	9705      	str	r7, [sp, #20]
 8003628:	910c      	str	r1, [sp, #48]	@ 0x30
 800362a:	f1c3 0a00 	rsb	sl, r3, #0
 800362e:	2c00      	cmp	r4, #0
 8003630:	f000 8091 	beq.w	8003756 <forward_mp+0x18e>
 8003634:	441a      	add	r2, r3
 8003636:	9b05      	ldr	r3, [sp, #20]
 8003638:	9201      	str	r2, [sp, #4]
 800363a:	fb09 f303 	mul.w	r3, r9, r3
 800363e:	ea4f 0789 	mov.w	r7, r9, lsl #2
 8003642:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003646:	4273      	negs	r3, r6
 8003648:	9310      	str	r3, [sp, #64]	@ 0x40
 800364a:	fb05 f307 	mul.w	r3, r5, r7
 800364e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003650:	f04f 0b00 	mov.w	fp, #0
 8003654:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003656:	9901      	ldr	r1, [sp, #4]
 8003658:	428a      	cmp	r2, r1
 800365a:	bf94      	ite	ls
 800365c:	eb0a 0e02 	addls.w	lr, sl, r2
 8003660:	eb0a 0e01 	addhi.w	lr, sl, r1
 8003664:	9a04      	ldr	r2, [sp, #16]
 8003666:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800366a:	9307      	str	r3, [sp, #28]
 800366c:	2a00      	cmp	r2, #0
 800366e:	d067      	beq.n	8003740 <forward_mp+0x178>
 8003670:	9a05      	ldr	r2, [sp, #20]
 8003672:	9d00      	ldr	r5, [sp, #0]
 8003674:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	9303      	str	r3, [sp, #12]
 800367e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	9302      	str	r3, [sp, #8]
 8003684:	2200      	movs	r2, #0
 8003686:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003688:	9206      	str	r2, [sp, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	bfac      	ite	ge
 800368e:	9a03      	ldrge	r2, [sp, #12]
 8003690:	9e03      	ldrlt	r6, [sp, #12]
 8003692:	9902      	ldr	r1, [sp, #8]
 8003694:	bfa8      	it	ge
 8003696:	18d6      	addge	r6, r2, r3
 8003698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800369a:	fb06 2607 	mla	r6, r6, r7, r2
 800369e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036a0:	469b      	mov	fp, r3
 80036a2:	bfb8      	it	lt
 80036a4:	2300      	movlt	r3, #0
 80036a6:	428a      	cmp	r2, r1
 80036a8:	bf94      	ite	ls
 80036aa:	445a      	addls	r2, fp
 80036ac:	eb0b 0201 	addhi.w	r2, fp, r1
 80036b0:	1ad4      	subs	r4, r2, r3
 80036b2:	f1b9 0f00 	cmp.w	r9, #0
 80036b6:	d008      	beq.n	80036ca <forward_mp+0x102>
 80036b8:	4633      	mov	r3, r6
 80036ba:	462a      	mov	r2, r5
 80036bc:	19b9      	adds	r1, r7, r6
 80036be:	f853 0b04 	ldr.w	r0, [r3], #4
 80036c2:	f842 0b04 	str.w	r0, [r2], #4
 80036c6:	4299      	cmp	r1, r3
 80036c8:	d1f9      	bne.n	80036be <forward_mp+0xf6>
 80036ca:	9b07      	ldr	r3, [sp, #28]
 80036cc:	459e      	cmp	lr, r3
 80036ce:	dd24      	ble.n	800371a <forward_mp+0x152>
 80036d0:	469c      	mov	ip, r3
 80036d2:	fb07 6404 	mla	r4, r7, r4, r6
 80036d6:	42a6      	cmp	r6, r4
 80036d8:	d219      	bcs.n	800370e <forward_mp+0x146>
 80036da:	f1b9 0f00 	cmp.w	r9, #0
 80036de:	d016      	beq.n	800370e <forward_mp+0x146>
 80036e0:	19f1      	adds	r1, r6, r7
 80036e2:	4630      	mov	r0, r6
 80036e4:	4602      	mov	r2, r0
 80036e6:	462b      	mov	r3, r5
 80036e8:	ecf2 7a01 	vldmia	r2!, {s15}
 80036ec:	ed93 7a00 	vldr	s14, [r3]
 80036f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	bfb8      	it	lt
 80036fa:	eef0 7a47 	vmovlt.f32	s15, s14
 80036fe:	428a      	cmp	r2, r1
 8003700:	ece3 7a01 	vstmia	r3!, {s15}
 8003704:	d1f0      	bne.n	80036e8 <forward_mp+0x120>
 8003706:	4438      	add	r0, r7
 8003708:	42a0      	cmp	r0, r4
 800370a:	4439      	add	r1, r7
 800370c:	d3ea      	bcc.n	80036e4 <forward_mp+0x11c>
 800370e:	f10c 0c01 	add.w	ip, ip, #1
 8003712:	45e6      	cmp	lr, ip
 8003714:	4446      	add	r6, r8
 8003716:	4444      	add	r4, r8
 8003718:	d1dd      	bne.n	80036d6 <forward_mp+0x10e>
 800371a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800371c:	9802      	ldr	r0, [sp, #8]
 800371e:	9a06      	ldr	r2, [sp, #24]
 8003720:	eb01 030b 	add.w	r3, r1, fp
 8003724:	1a41      	subs	r1, r0, r1
 8003726:	9102      	str	r1, [sp, #8]
 8003728:	9904      	ldr	r1, [sp, #16]
 800372a:	3201      	adds	r2, #1
 800372c:	4291      	cmp	r1, r2
 800372e:	9206      	str	r2, [sp, #24]
 8003730:	443d      	add	r5, r7
 8003732:	d1aa      	bne.n	800368a <forward_mp+0xc2>
 8003734:	9b00      	ldr	r3, [sp, #0]
 8003736:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003738:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800373c:	4413      	add	r3, r2
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003742:	9a01      	ldr	r2, [sp, #4]
 8003744:	449a      	add	sl, r3
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	9b08      	ldr	r3, [sp, #32]
 800374c:	f10b 0b01 	add.w	fp, fp, #1
 8003750:	455b      	cmp	r3, fp
 8003752:	f47f af7f 	bne.w	8003654 <forward_mp+0x8c>
 8003756:	b013      	add	sp, #76	@ 0x4c
 8003758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375c:	6853      	ldr	r3, [r2, #4]
 800375e:	deff      	udf	#255	@ 0xff
 8003760:	2300      	movs	r3, #0
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	deff      	udf	#255	@ 0xff
 8003766:	68d3      	ldr	r3, [r2, #12]
 8003768:	deff      	udf	#255	@ 0xff
 800376a:	bf00      	nop

0800376c <forward_lite_conv2d_if32of32wf32_pool>:
 800376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003770:	ed2d 8b02 	vpush	{d8}
 8003774:	b0c9      	sub	sp, #292	@ 0x124
 8003776:	4696      	mov	lr, r2
 8003778:	f9bd 519c 	ldrsh.w	r5, [sp, #412]	@ 0x19c
 800377c:	9323      	str	r3, [sp, #140]	@ 0x8c
 800377e:	f9bd 31bc 	ldrsh.w	r3, [sp, #444]	@ 0x1bc
 8003782:	9137      	str	r1, [sp, #220]	@ 0xdc
 8003784:	f9bd 115c 	ldrsh.w	r1, [sp, #348]	@ 0x15c
 8003788:	9238      	str	r2, [sp, #224]	@ 0xe0
 800378a:	fb05 f203 	mul.w	r2, r5, r3
 800378e:	9129      	str	r1, [sp, #164]	@ 0xa4
 8003790:	460e      	mov	r6, r1
 8003792:	fb01 f202 	mul.w	r2, r1, r2
 8003796:	f9bd 1164 	ldrsh.w	r1, [sp, #356]	@ 0x164
 800379a:	f9bd 416c 	ldrsh.w	r4, [sp, #364]	@ 0x16c
 800379e:	f8bd c180 	ldrh.w	ip, [sp, #384]	@ 0x180
 80037a2:	9142      	str	r1, [sp, #264]	@ 0x108
 80037a4:	f9bd 1170 	ldrsh.w	r1, [sp, #368]	@ 0x170
 80037a8:	f9bd 7160 	ldrsh.w	r7, [sp, #352]	@ 0x160
 80037ac:	932d      	str	r3, [sp, #180]	@ 0xb4
 80037ae:	942a      	str	r4, [sp, #168]	@ 0xa8
 80037b0:	f9bd 3168 	ldrsh.w	r3, [sp, #360]	@ 0x168
 80037b4:	f9bd 4158 	ldrsh.w	r4, [sp, #344]	@ 0x158
 80037b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80037ba:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 80037be:	f8bd 1178 	ldrh.w	r1, [sp, #376]	@ 0x178
 80037c2:	f8bd c184 	ldrh.w	ip, [sp, #388]	@ 0x184
 80037c6:	9041      	str	r0, [sp, #260]	@ 0x104
 80037c8:	9339      	str	r3, [sp, #228]	@ 0xe4
 80037ca:	912b      	str	r1, [sp, #172]	@ 0xac
 80037cc:	f9bd 9174 	ldrsh.w	r9, [sp, #372]	@ 0x174
 80037d0:	950f      	str	r5, [sp, #60]	@ 0x3c
 80037d2:	4680      	mov	r8, r0
 80037d4:	9418      	str	r4, [sp, #96]	@ 0x60
 80037d6:	f8bd 017c 	ldrh.w	r0, [sp, #380]	@ 0x17c
 80037da:	9714      	str	r7, [sp, #80]	@ 0x50
 80037dc:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 80037e0:	f9bd c188 	ldrsh.w	ip, [sp, #392]	@ 0x188
 80037e4:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 80037e8:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 80037ec:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 80037f0:	4243      	negs	r3, r0
 80037f2:	f9bd c1c0 	ldrsh.w	ip, [sp, #448]	@ 0x1c0
 80037f6:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 80037fa:	931e      	str	r3, [sp, #120]	@ 0x78
 80037fc:	f9bd c1c4 	ldrsh.w	ip, [sp, #452]	@ 0x1c4
 8003800:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8003802:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 8003806:	f9bd c1c8 	ldrsh.w	ip, [sp, #456]	@ 0x1c8
 800380a:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 800380e:	2b00      	cmp	r3, #0
 8003810:	f9bd c1cc 	ldrsh.w	ip, [sp, #460]	@ 0x1cc
 8003814:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 8003818:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 800381c:	f340 80a7 	ble.w	800396e <forward_lite_conv2d_if32of32wf32_pool+0x202>
 8003820:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003822:	ed9f 8a55 	vldr	s16, [pc, #340]	@ 8003978 <forward_lite_conv2d_if32of32wf32_pool+0x20c>
 8003826:	fb03 f309 	mul.w	r3, r3, r9
 800382a:	fb04 f303 	mul.w	r3, r4, r3
 800382e:	3901      	subs	r1, #1
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	fa1f fc81 	uxth.w	ip, r1
 8003836:	4631      	mov	r1, r6
 8003838:	b2b6      	uxth	r6, r6
 800383a:	9324      	str	r3, [sp, #144]	@ 0x90
 800383c:	1e73      	subs	r3, r6, #1
 800383e:	e9cd 0c20 	strd	r0, ip, [sp, #128]	@ 0x80
 8003842:	b29b      	uxth	r3, r3
 8003844:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8003846:	963f      	str	r6, [sp, #252]	@ 0xfc
 8003848:	3301      	adds	r3, #1
 800384a:	009e      	lsls	r6, r3, #2
 800384c:	fb00 f301 	mul.w	r3, r0, r1
 8003850:	fb05 f303 	mul.w	r3, r5, r3
 8003854:	0098      	lsls	r0, r3, #2
 8003856:	903d      	str	r0, [sp, #244]	@ 0xf4
 8003858:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800385a:	9635      	str	r6, [sp, #212]	@ 0xd4
 800385c:	fb00 f307 	mul.w	r3, r0, r7
 8003860:	fb04 f303 	mul.w	r3, r4, r3
 8003864:	0098      	lsls	r0, r3, #2
 8003866:	9034      	str	r0, [sp, #208]	@ 0xd0
 8003868:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800386a:	0090      	lsls	r0, r2, #2
 800386c:	9033      	str	r0, [sp, #204]	@ 0xcc
 800386e:	9854      	ldr	r0, [sp, #336]	@ 0x150
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003878:	0098      	lsls	r0, r3, #2
 800387a:	00a6      	lsls	r6, r4, #2
 800387c:	903b      	str	r0, [sp, #236]	@ 0xec
 800387e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8003880:	9616      	str	r6, [sp, #88]	@ 0x58
 8003882:	fb07 f306 	mul.w	r3, r7, r6
 8003886:	fb00 8703 	mla	r7, r0, r3, r8
 800388a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800388c:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800388e:	9722      	str	r7, [sp, #136]	@ 0x88
 8003890:	425f      	negs	r7, r3
 8003892:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003894:	921f      	str	r2, [sp, #124]	@ 0x7c
 8003896:	fb05 f501 	mul.w	r5, r5, r1
 800389a:	0089      	lsls	r1, r1, #2
 800389c:	fb03 f304 	mul.w	r3, r3, r4
 80038a0:	9112      	str	r1, [sp, #72]	@ 0x48
 80038a2:	4241      	negs	r1, r0
 80038a4:	009c      	lsls	r4, r3, #2
 80038a6:	9125      	str	r1, [sp, #148]	@ 0x94
 80038a8:	fb06 f107 	mul.w	r1, r6, r7
 80038ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80038ae:	9417      	str	r4, [sp, #92]	@ 0x5c
 80038b0:	953c      	str	r5, [sp, #240]	@ 0xf0
 80038b2:	2400      	movs	r4, #0
 80038b4:	9136      	str	r1, [sp, #216]	@ 0xd8
 80038b6:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 80038ba:	9954      	ldr	r1, [sp, #336]	@ 0x150
 80038bc:	9731      	str	r7, [sp, #196]	@ 0xc4
 80038be:	9428      	str	r4, [sp, #160]	@ 0xa0
 80038c0:	953a      	str	r5, [sp, #232]	@ 0xe8
 80038c2:	911b      	str	r1, [sp, #108]	@ 0x6c
 80038c4:	9332      	str	r3, [sp, #200]	@ 0xc8
 80038c6:	9b6a      	ldr	r3, [sp, #424]	@ 0x1a8
 80038c8:	932f      	str	r3, [sp, #188]	@ 0xbc
 80038ca:	1e53      	subs	r3, r2, #1
 80038cc:	9427      	str	r4, [sp, #156]	@ 0x9c
 80038ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80038d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038d2:	3301      	adds	r3, #1
 80038d4:	b21b      	sxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	dc68      	bgt.n	80039ac <forward_lite_conv2d_if32of32wf32_pool+0x240>
 80038da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	f100 81d4 	bmi.w	8003c8a <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 80038e2:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80038e4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80038e6:	4282      	cmp	r2, r0
 80038e8:	dc48      	bgt.n	800397c <forward_lite_conv2d_if32of32wf32_pool+0x210>
 80038ea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80038ec:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 80038ee:	9108      	str	r1, [sp, #32]
 80038f0:	3301      	adds	r3, #1
 80038f2:	b21c      	sxth	r4, r3
 80038f4:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 80038f6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80038f8:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
 80038fa:	9427      	str	r4, [sp, #156]	@ 0x9c
 80038fc:	18cb      	adds	r3, r1, r3
 80038fe:	9337      	str	r3, [sp, #220]	@ 0xdc
 8003900:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8003902:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003904:	440b      	add	r3, r1
 8003906:	931e      	str	r3, [sp, #120]	@ 0x78
 8003908:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800390a:	1a5b      	subs	r3, r3, r1
 800390c:	9320      	str	r3, [sp, #128]	@ 0x80
 800390e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8003910:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003912:	440b      	add	r3, r1
 8003914:	9322      	str	r3, [sp, #136]	@ 0x88
 8003916:	b293      	uxth	r3, r2
 8003918:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	b29a      	uxth	r2, r3
 8003920:	b2bb      	uxth	r3, r7
 8003922:	1ac1      	subs	r1, r0, r3
 8003924:	9305      	str	r3, [sp, #20]
 8003926:	b20b      	sxth	r3, r1
 8003928:	931d      	str	r3, [sp, #116]	@ 0x74
 800392a:	b2b3      	uxth	r3, r6
 800392c:	9303      	str	r3, [sp, #12]
 800392e:	2301      	movs	r3, #1
 8003930:	9307      	str	r3, [sp, #28]
 8003932:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	@ 0xe4
 8003936:	9306      	str	r3, [sp, #24]
 8003938:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 800393c:	9304      	str	r3, [sp, #16]
 800393e:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 8003942:	9302      	str	r3, [sp, #8]
 8003944:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 8003948:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8003950:	9854      	ldr	r0, [sp, #336]	@ 0x150
 8003952:	9d6d      	ldr	r5, [sp, #436]	@ 0x1b4
 8003954:	47a8      	blx	r5
 8003956:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003958:	1bf3      	subs	r3, r6, r7
 800395a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800395e:	b21b      	sxth	r3, r3
 8003960:	3a01      	subs	r2, #1
 8003962:	9332      	str	r3, [sp, #200]	@ 0xc8
 8003964:	b293      	uxth	r3, r2
 8003966:	9321      	str	r3, [sp, #132]	@ 0x84
 8003968:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800396a:	42a3      	cmp	r3, r4
 800396c:	dcb0      	bgt.n	80038d0 <forward_lite_conv2d_if32of32wf32_pool+0x164>
 800396e:	b049      	add	sp, #292	@ 0x124
 8003970:	ecbd 8b02 	vpop	{d8}
 8003974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003978:	00000000 	.word	0x00000000
 800397c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800397e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8003980:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8003982:	3b01      	subs	r3, #1
 8003984:	b29b      	uxth	r3, r3
 8003986:	9321      	str	r3, [sp, #132]	@ 0x84
 8003988:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800398a:	440a      	add	r2, r1
 800398c:	1a5b      	subs	r3, r3, r1
 800398e:	921e      	str	r2, [sp, #120]	@ 0x78
 8003990:	9320      	str	r3, [sp, #128]	@ 0x80
 8003992:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8003994:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003996:	4413      	add	r3, r2
 8003998:	9322      	str	r3, [sp, #136]	@ 0x88
 800399a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800399c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800399e:	4293      	cmp	r3, r2
 80039a0:	dde5      	ble.n	800396e <forward_lite_conv2d_if32of32wf32_pool+0x202>
 80039a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80039a4:	3301      	adds	r3, #1
 80039a6:	b21b      	sxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	dd96      	ble.n	80038da <forward_lite_conv2d_if32of32wf32_pool+0x16e>
 80039ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f2c0 82cc 	blt.w	8003f4c <forward_lite_conv2d_if32of32wf32_pool+0x7e0>
 80039b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80039b6:	931c      	str	r3, [sp, #112]	@ 0x70
 80039b8:	2300      	movs	r3, #0
 80039ba:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80039bc:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 80039be:	440a      	add	r2, r1
 80039c0:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80039c2:	428a      	cmp	r2, r1
 80039c4:	bfd4      	ite	le
 80039c6:	ebc3 0b02 	rsble	fp, r3, r2
 80039ca:	ebc3 0b01 	rsbgt	fp, r3, r1
 80039ce:	9a55      	ldr	r2, [sp, #340]	@ 0x154
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	f000 819c 	beq.w	8003d0e <forward_lite_conv2d_if32of32wf32_pool+0x5a2>
 80039d6:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 80039d8:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80039dc:	f0c0 8197 	bcc.w	8003d0e <forward_lite_conv2d_if32of32wf32_pool+0x5a2>
 80039e0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	f340 8117 	ble.w	8003c16 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 80039e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80039ea:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80039f2:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 80039f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80039f6:	9326      	str	r3, [sp, #152]	@ 0x98
 80039f8:	189a      	adds	r2, r3, r2
 80039fa:	923e      	str	r2, [sp, #248]	@ 0xf8
 80039fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80039fe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003a00:	9330      	str	r3, [sp, #192]	@ 0xc0
 8003a02:	440a      	add	r2, r1
 8003a04:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8003a06:	9240      	str	r2, [sp, #256]	@ 0x100
 8003a08:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003a0c:	9955      	ldr	r1, [sp, #340]	@ 0x154
 8003a0e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8003a10:	f001 fb5e 	bl	80050d0 <st_int8_copy>
 8003a14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8134 	beq.w	8003c84 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 8003a1c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8003a1e:	ecf3 1a01 	vldmia	r3!, {s3}
 8003a22:	9330      	str	r3, [sp, #192]	@ 0xc0
 8003a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80ea 	beq.w	8003c00 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 8003a2c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8003a2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003a30:	189a      	adds	r2, r3, r2
 8003a32:	920c      	str	r2, [sp, #48]	@ 0x30
 8003a34:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8003a36:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8003a3a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8003a3c:	9310      	str	r3, [sp, #64]	@ 0x40
 8003a3e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8003a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a42:	2300      	movs	r3, #0
 8003a44:	9311      	str	r3, [sp, #68]	@ 0x44
 8003a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f2c0 8115 	blt.w	8003c78 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 8003a4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003a50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003a52:	2600      	movs	r6, #0
 8003a54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8003a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003a58:	9c55      	ldr	r4, [sp, #340]	@ 0x154
 8003a5a:	4298      	cmp	r0, r3
 8003a5c:	bf94      	ite	ls
 8003a5e:	ebc6 0600 	rsbls	r6, r6, r0
 8003a62:	ebc6 0603 	rsbhi	r6, r6, r3
 8003a66:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003a68:	eba0 0906 	sub.w	r9, r0, r6
 8003a6c:	fb02 4203 	mla	r2, r2, r3, r4
 8003a70:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8003a72:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8003a74:	f1bb 0f00 	cmp.w	fp, #0
 8003a78:	eba4 0a06 	sub.w	sl, r4, r6
 8003a7c:	eeb0 7a61 	vmov.f32	s14, s3
 8003a80:	fb00 f606 	mul.w	r6, r0, r6
 8003a84:	f340 80a1 	ble.w	8003bca <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 8003a88:	f026 070f 	bic.w	r7, r6, #15
 8003a8c:	f107 38ff 	add.w	r8, r7, #4294967295
 8003a90:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8003a94:	f108 0801 	add.w	r8, r8, #1
 8003a98:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8003a9c:	fb0a fa03 	mul.w	sl, sl, r3
 8003aa0:	fb09 f903 	mul.w	r9, r9, r3
 8003aa4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003aa8:	f04f 0c00 	mov.w	ip, #0
 8003aac:	2f00      	cmp	r7, #0
 8003aae:	bfd8      	it	le
 8003ab0:	2500      	movle	r5, #0
 8003ab2:	dd70      	ble.n	8003b96 <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 8003ab4:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8003ab8:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8003abc:	2400      	movs	r4, #0
 8003abe:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8003ac2:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8003ac6:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 8003aca:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8003ace:	ed50 4a0d 	vldr	s9, [r0, #-52]	@ 0xffffffcc
 8003ad2:	ed10 5a0c 	vldr	s10, [r0, #-48]	@ 0xffffffd0
 8003ad6:	ed10 3a0a 	vldr	s6, [r0, #-40]	@ 0xffffffd8
 8003ada:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8003ade:	ed10 4a09 	vldr	s8, [r0, #-36]	@ 0xffffffdc
 8003ae2:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 8003ae6:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 8003aea:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 8003aee:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8003af2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003af6:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 8003afa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003afe:	3410      	adds	r4, #16
 8003b00:	42bc      	cmp	r4, r7
 8003b02:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8003b06:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8003b0a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003b0e:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8003b12:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8003b16:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8003b1a:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 8003b1e:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8003b22:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8003b26:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8003b2a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003b2e:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 8003b32:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8003b36:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003b3a:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 8003b3e:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8003b42:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003b46:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8003b4a:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8003b4e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003b52:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8003b56:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8003b5a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003b5e:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8003b62:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8003b66:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003b6a:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8003b6e:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8003b72:	eee0 7a81 	vfma.f32	s15, s1, s2
 8003b76:	eee2 7a22 	vfma.f32	s15, s4, s5
 8003b7a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003b7e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003b82:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003b86:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b8e:	db96      	blt.n	8003abe <forward_lite_conv2d_if32of32wf32_pool+0x352>
 8003b90:	4471      	add	r1, lr
 8003b92:	4472      	add	r2, lr
 8003b94:	4645      	mov	r5, r8
 8003b96:	42ae      	cmp	r6, r5
 8003b98:	dd10      	ble.n	8003bbc <forward_lite_conv2d_if32of32wf32_pool+0x450>
 8003b9a:	462b      	mov	r3, r5
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	ecf0 6a01 	vldmia	r0!, {s13}
 8003ba4:	ecf4 7a01 	vldmia	r4!, {s15}
 8003ba8:	3301      	adds	r3, #1
 8003baa:	429e      	cmp	r6, r3
 8003bac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003bb0:	d1f6      	bne.n	8003ba0 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 8003bb2:	1b75      	subs	r5, r6, r5
 8003bb4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8003bb8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8003bbc:	f10c 0c01 	add.w	ip, ip, #1
 8003bc0:	45e3      	cmp	fp, ip
 8003bc2:	4451      	add	r1, sl
 8003bc4:	444a      	add	r2, r9
 8003bc6:	f47f af71 	bne.w	8003aac <forward_lite_conv2d_if32of32wf32_pool+0x340>
 8003bca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003bcc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003bce:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8003bd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003bd2:	ed81 7a00 	vstr	s14, [r1]
 8003bd6:	4410      	add	r0, r2
 8003bd8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003bda:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8003bdc:	4401      	add	r1, r0
 8003bde:	9110      	str	r1, [sp, #64]	@ 0x40
 8003be0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003be2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8003be4:	1a89      	subs	r1, r1, r2
 8003be6:	910e      	str	r1, [sp, #56]	@ 0x38
 8003be8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003bea:	4401      	add	r1, r0
 8003bec:	910d      	str	r1, [sp, #52]	@ 0x34
 8003bee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003bf0:	1a8a      	subs	r2, r1, r2
 8003bf2:	920c      	str	r2, [sp, #48]	@ 0x30
 8003bf4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	9311      	str	r3, [sp, #68]	@ 0x44
 8003bfc:	f47f af23 	bne.w	8003a46 <forward_lite_conv2d_if32of32wf32_pool+0x2da>
 8003c00:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003c02:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8003c04:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8003c06:	440a      	add	r2, r1
 8003c08:	921a      	str	r2, [sp, #104]	@ 0x68
 8003c0a:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	9326      	str	r3, [sp, #152]	@ 0x98
 8003c12:	f47f aefa 	bne.w	8003a0a <forward_lite_conv2d_if32of32wf32_pool+0x29e>
 8003c16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	dd28      	ble.n	8003c6e <forward_lite_conv2d_if32of32wf32_pool+0x502>
 8003c1c:	9b69      	ldr	r3, [sp, #420]	@ 0x1a4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8198 	beq.w	8003f54 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 8003c24:	e9dd 6a6a 	ldrd	r6, sl, [sp, #424]	@ 0x1a8
 8003c28:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 8003c2a:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 8003c2e:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8003c30:	f8dd b1b0 	ldr.w	fp, [sp, #432]	@ 0x1b0
 8003c34:	4699      	mov	r9, r3
 8003c36:	2400      	movs	r4, #0
 8003c38:	462b      	mov	r3, r5
 8003c3a:	463a      	mov	r2, r7
 8003c3c:	4455      	add	r5, sl
 8003c3e:	4641      	mov	r1, r8
 8003c40:	4640      	mov	r0, r8
 8003c42:	47c8      	blx	r9
 8003c44:	1bab      	subs	r3, r5, r6
 8003c46:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003c48:	455b      	cmp	r3, fp
 8003c4a:	bfa8      	it	ge
 8003c4c:	4635      	movge	r5, r6
 8003c4e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8003c50:	4490      	add	r8, r2
 8003c52:	4543      	cmp	r3, r8
 8003c54:	bf98      	it	ls
 8003c56:	9b25      	ldrls	r3, [sp, #148]	@ 0x94
 8003c58:	f104 0401 	add.w	r4, r4, #1
 8003c5c:	bf98      	it	ls
 8003c5e:	4498      	addls	r8, r3
 8003c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003c62:	b224      	sxth	r4, r4
 8003c64:	42a3      	cmp	r3, r4
 8003c66:	d1e7      	bne.n	8003c38 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 8003c68:	952f      	str	r5, [sp, #188]	@ 0xbc
 8003c6a:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 8003c6e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8003c70:	3301      	adds	r3, #1
 8003c72:	b21b      	sxth	r3, r3
 8003c74:	931d      	str	r3, [sp, #116]	@ 0x74
 8003c76:	e634      	b.n	80038e2 <forward_lite_conv2d_if32of32wf32_pool+0x176>
 8003c78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003c7c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8003c7e:	4616      	mov	r6, r2
 8003c80:	189a      	adds	r2, r3, r2
 8003c82:	e6e7      	b.n	8003a54 <forward_lite_conv2d_if32of32wf32_pool+0x2e8>
 8003c84:	eef0 1a48 	vmov.f32	s3, s16
 8003c88:	e6cc      	b.n	8003a24 <forward_lite_conv2d_if32of32wf32_pool+0x2b8>
 8003c8a:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 8003c8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003c94:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 8003c98:	9a54      	ldr	r2, [sp, #336]	@ 0x150
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bf84      	itt	hi
 8003c9e:	9a33      	ldrhi	r2, [sp, #204]	@ 0xcc
 8003ca0:	189b      	addhi	r3, r3, r2
 8003ca2:	9a54      	ldr	r2, [sp, #336]	@ 0x150
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d217      	bcs.n	8003cd8 <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 8003ca8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8003caa:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8003cac:	428a      	cmp	r2, r1
 8003cae:	d013      	beq.n	8003cd8 <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 8003cb0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d910      	bls.n	8003cd8 <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 8003cb6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f852 0b04 	ldr.w	r0, [r2], #4
 8003cbe:	f841 0b04 	str.w	r0, [r1], #4
 8003cc2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8003cc4:	4290      	cmp	r0, r2
 8003cc6:	d8f8      	bhi.n	8003cba <forward_lite_conv2d_if32of32wf32_pool+0x54e>
 8003cc8:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f023 0303 	bic.w	r3, r3, #3
 8003cd0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	441a      	add	r2, r3
 8003cd6:	921b      	str	r2, [sp, #108]	@ 0x6c
 8003cd8:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8003cda:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8003cdc:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8003ce0:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 8003ce2:	440a      	add	r2, r1
 8003ce4:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8003ce6:	1ad2      	subs	r2, r2, r3
 8003ce8:	b212      	sxth	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8003cee:	9228      	str	r2, [sp, #160]	@ 0xa0
 8003cf0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8003cf2:	4401      	add	r1, r0
 8003cf4:	b21b      	sxth	r3, r3
 8003cf6:	428a      	cmp	r2, r1
 8003cf8:	931d      	str	r3, [sp, #116]	@ 0x74
 8003cfa:	911b      	str	r1, [sp, #108]	@ 0x6c
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	f63f adf0 	bhi.w	80038e2 <forward_lite_conv2d_if32of32wf32_pool+0x176>
 8003d02:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8003d04:	440b      	add	r3, r1
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d9fc      	bls.n	8003d04 <forward_lite_conv2d_if32of32wf32_pool+0x598>
 8003d0a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003d0c:	e5e9      	b.n	80038e2 <forward_lite_conv2d_if32of32wf32_pool+0x176>
 8003d0e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	dd80      	ble.n	8003c16 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8003d14:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003d16:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d1e:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8003d20:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8003d22:	9326      	str	r3, [sp, #152]	@ 0x98
 8003d24:	189a      	adds	r2, r3, r2
 8003d26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003d28:	923e      	str	r2, [sp, #248]	@ 0xf8
 8003d2a:	9330      	str	r3, [sp, #192]	@ 0xc0
 8003d2c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003d2e:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8003d30:	9319      	str	r3, [sp, #100]	@ 0x64
 8003d32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003d34:	440a      	add	r2, r1
 8003d36:	9240      	str	r2, [sp, #256]	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80fe 	beq.w	8003f3a <forward_lite_conv2d_if32of32wf32_pool+0x7ce>
 8003d3e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8003d40:	ecf3 1a01 	vldmia	r3!, {s3}
 8003d44:	9330      	str	r3, [sp, #192]	@ 0xc0
 8003d46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80e7 	beq.w	8003f1c <forward_lite_conv2d_if32of32wf32_pool+0x7b0>
 8003d4e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8003d50:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003d52:	189a      	adds	r2, r3, r2
 8003d54:	920c      	str	r2, [sp, #48]	@ 0x30
 8003d56:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8003d58:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8003d5c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8003d5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d60:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8003d62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d64:	2300      	movs	r3, #0
 8003d66:	9311      	str	r3, [sp, #68]	@ 0x44
 8003d68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f2c0 80e8 	blt.w	8003f40 <forward_lite_conv2d_if32of32wf32_pool+0x7d4>
 8003d70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003d72:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003d74:	2000      	movs	r0, #0
 8003d76:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8003d78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003d7a:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8003d7c:	428c      	cmp	r4, r1
 8003d7e:	bf94      	ite	ls
 8003d80:	ebc0 0004 	rsbls	r0, r0, r4
 8003d84:	ebc0 0001 	rsbhi	r0, r0, r1
 8003d88:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8003d8a:	eba4 0900 	sub.w	r9, r4, r0
 8003d8e:	fb03 5301 	mla	r3, r3, r1, r5
 8003d92:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8003d94:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8003d96:	f1bb 0f00 	cmp.w	fp, #0
 8003d9a:	eba5 0a00 	sub.w	sl, r5, r0
 8003d9e:	eeb0 7a61 	vmov.f32	s14, s3
 8003da2:	fb04 f000 	mul.w	r0, r4, r0
 8003da6:	f340 809e 	ble.w	8003ee6 <forward_lite_conv2d_if32of32wf32_pool+0x77a>
 8003daa:	f020 080f 	bic.w	r8, r0, #15
 8003dae:	f108 37ff 	add.w	r7, r8, #4294967295
 8003db2:	093f      	lsrs	r7, r7, #4
 8003db4:	3701      	adds	r7, #1
 8003db6:	01be      	lsls	r6, r7, #6
 8003db8:	fb0a fa01 	mul.w	sl, sl, r1
 8003dbc:	fb09 f901 	mul.w	r9, r9, r1
 8003dc0:	013f      	lsls	r7, r7, #4
 8003dc2:	2400      	movs	r4, #0
 8003dc4:	f1b8 0f00 	cmp.w	r8, #0
 8003dc8:	bfd8      	it	le
 8003dca:	2100      	movle	r1, #0
 8003dcc:	dd72      	ble.n	8003eb4 <forward_lite_conv2d_if32of32wf32_pool+0x748>
 8003dce:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 8003dd2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8003dd6:	f04f 0c00 	mov.w	ip, #0
 8003dda:	ed51 5a0f 	vldr	s11, [r1, #-60]	@ 0xffffffc4
 8003dde:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 8003de2:	ed15 6a10 	vldr	s12, [r5, #-64]	@ 0xffffffc0
 8003de6:	ed51 6a10 	vldr	s13, [r1, #-64]	@ 0xffffffc0
 8003dea:	ed55 4a0d 	vldr	s9, [r5, #-52]	@ 0xffffffcc
 8003dee:	ed15 5a0c 	vldr	s10, [r5, #-48]	@ 0xffffffd0
 8003df2:	ed15 3a0a 	vldr	s6, [r5, #-40]	@ 0xffffffd8
 8003df6:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 8003dfa:	ed15 4a09 	vldr	s8, [r5, #-36]	@ 0xffffffdc
 8003dfe:	ed55 0a06 	vldr	s1, [r5, #-24]	@ 0xffffffe8
 8003e02:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 8003e06:	ed15 2a05 	vldr	s4, [r5, #-20]	@ 0xffffffec
 8003e0a:	ed51 2a05 	vldr	s5, [r1, #-20]	@ 0xffffffec
 8003e0e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003e12:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 8003e16:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003e1a:	f10c 0c10 	add.w	ip, ip, #16
 8003e1e:	45e0      	cmp	r8, ip
 8003e20:	ed11 6a0e 	vldr	s12, [r1, #-56]	@ 0xffffffc8
 8003e24:	ed51 6a0d 	vldr	s13, [r1, #-52]	@ 0xffffffcc
 8003e28:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003e2c:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8003e30:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8003e34:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 8003e38:	ed15 6a1b 	vldr	s12, [r5, #-108]	@ 0xffffff94
 8003e3c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8003e40:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 8003e44:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 8003e48:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003e4c:	ed15 5a18 	vldr	s10, [r5, #-96]	@ 0xffffffa0
 8003e50:	ed51 5a18 	vldr	s11, [r1, #-96]	@ 0xffffffa0
 8003e54:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003e58:	ed15 6a17 	vldr	s12, [r5, #-92]	@ 0xffffffa4
 8003e5c:	ed51 6a17 	vldr	s13, [r1, #-92]	@ 0xffffffa4
 8003e60:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003e64:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 8003e68:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8003e6c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003e70:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 8003e74:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8003e78:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003e7c:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 8003e80:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8003e84:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003e88:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 8003e8c:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8003e90:	eee0 7a81 	vfma.f32	s15, s1, s2
 8003e94:	eee2 7a22 	vfma.f32	s15, s4, s5
 8003e98:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003e9c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003ea0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003ea4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eac:	dc95      	bgt.n	8003dda <forward_lite_conv2d_if32of32wf32_pool+0x66e>
 8003eae:	4432      	add	r2, r6
 8003eb0:	4433      	add	r3, r6
 8003eb2:	4639      	mov	r1, r7
 8003eb4:	4288      	cmp	r0, r1
 8003eb6:	dd10      	ble.n	8003eda <forward_lite_conv2d_if32of32wf32_pool+0x76e>
 8003eb8:	460d      	mov	r5, r1
 8003eba:	4696      	mov	lr, r2
 8003ebc:	469c      	mov	ip, r3
 8003ebe:	ecfc 6a01 	vldmia	ip!, {s13}
 8003ec2:	ecfe 7a01 	vldmia	lr!, {s15}
 8003ec6:	3501      	adds	r5, #1
 8003ec8:	42a8      	cmp	r0, r5
 8003eca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003ece:	d1f6      	bne.n	8003ebe <forward_lite_conv2d_if32of32wf32_pool+0x752>
 8003ed0:	1a41      	subs	r1, r0, r1
 8003ed2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003ed6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003eda:	3401      	adds	r4, #1
 8003edc:	45a3      	cmp	fp, r4
 8003ede:	4452      	add	r2, sl
 8003ee0:	444b      	add	r3, r9
 8003ee2:	f47f af6f 	bne.w	8003dc4 <forward_lite_conv2d_if32of32wf32_pool+0x658>
 8003ee6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003ee8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003eea:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8003eec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003eee:	ed81 7a00 	vstr	s14, [r1]
 8003ef2:	4410      	add	r0, r2
 8003ef4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003ef6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8003ef8:	4401      	add	r1, r0
 8003efa:	9110      	str	r1, [sp, #64]	@ 0x40
 8003efc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003efe:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8003f00:	1a89      	subs	r1, r1, r2
 8003f02:	910e      	str	r1, [sp, #56]	@ 0x38
 8003f04:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f06:	4401      	add	r1, r0
 8003f08:	910d      	str	r1, [sp, #52]	@ 0x34
 8003f0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003f0c:	1a8a      	subs	r2, r1, r2
 8003f0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8003f10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003f12:	3301      	adds	r3, #1
 8003f14:	429a      	cmp	r2, r3
 8003f16:	9311      	str	r3, [sp, #68]	@ 0x44
 8003f18:	f47f af26 	bne.w	8003d68 <forward_lite_conv2d_if32of32wf32_pool+0x5fc>
 8003f1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003f1e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8003f20:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8003f22:	440a      	add	r2, r1
 8003f24:	9219      	str	r2, [sp, #100]	@ 0x64
 8003f26:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	9326      	str	r3, [sp, #152]	@ 0x98
 8003f2e:	f43f ae72 	beq.w	8003c16 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8003f32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f47f af02 	bne.w	8003d3e <forward_lite_conv2d_if32of32wf32_pool+0x5d2>
 8003f3a:	eef0 1a48 	vmov.f32	s3, s16
 8003f3e:	e702      	b.n	8003d46 <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 8003f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f42:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003f44:	4610      	mov	r0, r2
 8003f46:	4413      	add	r3, r2
 8003f48:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003f4a:	e714      	b.n	8003d76 <forward_lite_conv2d_if32of32wf32_pool+0x60a>
 8003f4c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003f4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f50:	921c      	str	r2, [sp, #112]	@ 0x70
 8003f52:	e532      	b.n	80039ba <forward_lite_conv2d_if32of32wf32_pool+0x24e>
 8003f54:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003f56:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8003f58:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8003f5a:	440a      	add	r2, r1
 8003f5c:	4290      	cmp	r0, r2
 8003f5e:	bf98      	it	ls
 8003f60:	9825      	ldrls	r0, [sp, #148]	@ 0x94
 8003f62:	f103 0301 	add.w	r3, r3, #1
 8003f66:	bf98      	it	ls
 8003f68:	1812      	addls	r2, r2, r0
 8003f6a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8003f6c:	b219      	sxth	r1, r3
 8003f6e:	4281      	cmp	r1, r0
 8003f70:	dbf1      	blt.n	8003f56 <forward_lite_conv2d_if32of32wf32_pool+0x7ea>
 8003f72:	921b      	str	r2, [sp, #108]	@ 0x6c
 8003f74:	e67b      	b.n	8003c6e <forward_lite_conv2d_if32of32wf32_pool+0x502>
 8003f76:	bf00      	nop

08003f78 <pool_func_mp_array_f32>:
 8003f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7c:	b093      	sub	sp, #76	@ 0x4c
 8003f7e:	468b      	mov	fp, r1
 8003f80:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 8003f84:	9101      	str	r1, [sp, #4]
 8003f86:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8003f8a:	9105      	str	r1, [sp, #20]
 8003f8c:	4691      	mov	r9, r2
 8003f8e:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8003f92:	f8bd 207c 	ldrh.w	r2, [sp, #124]	@ 0x7c
 8003f96:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8003f9a:	9106      	str	r1, [sp, #24]
 8003f9c:	4698      	mov	r8, r3
 8003f9e:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 8003fa2:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8003fa6:	9404      	str	r4, [sp, #16]
 8003fa8:	9102      	str	r1, [sp, #8]
 8003faa:	ea52 0403 	orrs.w	r4, r2, r3
 8003fae:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 8003fb2:	9103      	str	r1, [sp, #12]
 8003fb4:	4682      	mov	sl, r0
 8003fb6:	d10b      	bne.n	8003fd0 <pool_func_mp_array_f32+0x58>
 8003fb8:	9904      	ldr	r1, [sp, #16]
 8003fba:	9d02      	ldr	r5, [sp, #8]
 8003fbc:	9e05      	ldr	r6, [sp, #20]
 8003fbe:	eba1 000b 	sub.w	r0, r1, fp
 8003fc2:	3801      	subs	r0, #1
 8003fc4:	1e69      	subs	r1, r5, #1
 8003fc6:	fb11 0106 	smlabb	r1, r1, r6, r0
 8003fca:	0408      	lsls	r0, r1, #16
 8003fcc:	f100 8083 	bmi.w	80040d6 <pool_func_mp_array_f32+0x15e>
 8003fd0:	9903      	ldr	r1, [sp, #12]
 8003fd2:	2900      	cmp	r1, #0
 8003fd4:	d07c      	beq.n	80040d0 <pool_func_mp_array_f32+0x158>
 8003fd6:	9902      	ldr	r1, [sp, #8]
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	d079      	beq.n	80040d0 <pool_func_mp_array_f32+0x158>
 8003fdc:	f1b8 0f00 	cmp.w	r8, #0
 8003fe0:	d076      	beq.n	80040d0 <pool_func_mp_array_f32+0x158>
 8003fe2:	f1b8 0f01 	cmp.w	r8, #1
 8003fe6:	9901      	ldr	r1, [sp, #4]
 8003fe8:	f040 80e3 	bne.w	80041b2 <pool_func_mp_array_f32+0x23a>
 8003fec:	1a8a      	subs	r2, r1, r2
 8003fee:	9904      	ldr	r1, [sp, #16]
 8003ff0:	1ac9      	subs	r1, r1, r3
 8003ff2:	425b      	negs	r3, r3
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	9207      	str	r2, [sp, #28]
 8003ffa:	930c      	str	r3, [sp, #48]	@ 0x30
 8003ffc:	b28a      	uxth	r2, r1
 8003ffe:	2300      	movs	r3, #0
 8004000:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004002:	9308      	str	r3, [sp, #32]
 8004004:	9a02      	ldr	r2, [sp, #8]
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	9309      	str	r3, [sp, #36]	@ 0x24
 800400c:	9a07      	ldr	r2, [sp, #28]
 800400e:	9b01      	ldr	r3, [sp, #4]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	b21b      	sxth	r3, r3
 8004014:	930a      	str	r3, [sp, #40]	@ 0x28
 8004016:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	@ 0x2c
 800401a:	f04f 0c00 	mov.w	ip, #0
 800401e:	9304      	str	r3, [sp, #16]
 8004020:	b217      	sxth	r7, r2
 8004022:	46e6      	mov	lr, ip
 8004024:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004028:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800402c:	eddf 7aac 	vldr	s15, [pc, #688]	@ 80042e0 <pool_func_mp_array_f32+0x368>
 8004030:	428f      	cmp	r7, r1
 8004032:	449e      	add	lr, r3
 8004034:	fa0f f088 	sxth.w	r0, r8
 8004038:	dd28      	ble.n	800408c <pool_func_mp_array_f32+0x114>
 800403a:	ea00 75e0 	and.w	r5, r0, r0, asr #31
 800403e:	4286      	cmp	r6, r0
 8004040:	da20      	bge.n	8004084 <pool_func_mp_array_f32+0x10c>
 8004042:	2900      	cmp	r1, #0
 8004044:	fb0b f401 	mul.w	r4, fp, r1
 8004048:	db1c      	blt.n	8004084 <pool_func_mp_array_f32+0x10c>
 800404a:	4549      	cmp	r1, r9
 800404c:	da1a      	bge.n	8004084 <pool_func_mp_array_f32+0x10c>
 800404e:	2e00      	cmp	r6, #0
 8004050:	4633      	mov	r3, r6
 8004052:	da05      	bge.n	8004060 <pool_func_mp_array_f32+0xe8>
 8004054:	3301      	adds	r3, #1
 8004056:	b21b      	sxth	r3, r3
 8004058:	429d      	cmp	r5, r3
 800405a:	dcfb      	bgt.n	8004054 <pool_func_mp_array_f32+0xdc>
 800405c:	4283      	cmp	r3, r0
 800405e:	da11      	bge.n	8004084 <pool_func_mp_array_f32+0x10c>
 8004060:	18e2      	adds	r2, r4, r3
 8004062:	459b      	cmp	fp, r3
 8004064:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8004068:	dd08      	ble.n	800407c <pool_func_mp_array_f32+0x104>
 800406a:	ed92 7a00 	vldr	s14, [r2]
 800406e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004076:	bfb8      	it	lt
 8004078:	eef0 7a47 	vmovlt.f32	s15, s14
 800407c:	3301      	adds	r3, #1
 800407e:	b21b      	sxth	r3, r3
 8004080:	4283      	cmp	r3, r0
 8004082:	dbed      	blt.n	8004060 <pool_func_mp_array_f32+0xe8>
 8004084:	3101      	adds	r1, #1
 8004086:	b209      	sxth	r1, r1
 8004088:	42b9      	cmp	r1, r7
 800408a:	dbd8      	blt.n	800403e <pool_func_mp_array_f32+0xc6>
 800408c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800408e:	9a05      	ldr	r2, [sp, #20]
 8004090:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8004094:	9b04      	ldr	r3, [sp, #16]
 8004096:	edce 7a00 	vstr	s15, [lr]
 800409a:	4413      	add	r3, r2
 800409c:	b29b      	uxth	r3, r3
 800409e:	f10c 0c01 	add.w	ip, ip, #1
 80040a2:	9304      	str	r3, [sp, #16]
 80040a4:	9b02      	ldr	r3, [sp, #8]
 80040a6:	fa0f fc8c 	sxth.w	ip, ip
 80040aa:	4490      	add	r8, r2
 80040ac:	4563      	cmp	r3, ip
 80040ae:	fa1f f888 	uxth.w	r8, r8
 80040b2:	46e6      	mov	lr, ip
 80040b4:	dcb6      	bgt.n	8004024 <pool_func_mp_array_f32+0xac>
 80040b6:	9b08      	ldr	r3, [sp, #32]
 80040b8:	3301      	adds	r3, #1
 80040ba:	b21a      	sxth	r2, r3
 80040bc:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80040c0:	440b      	add	r3, r1
 80040c2:	9903      	ldr	r1, [sp, #12]
 80040c4:	9208      	str	r2, [sp, #32]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	4291      	cmp	r1, r2
 80040ca:	9307      	str	r3, [sp, #28]
 80040cc:	4613      	mov	r3, r2
 80040ce:	dc99      	bgt.n	8004004 <pool_func_mp_array_f32+0x8c>
 80040d0:	b013      	add	sp, #76	@ 0x4c
 80040d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d6:	9901      	ldr	r1, [sp, #4]
 80040d8:	9e03      	ldr	r6, [sp, #12]
 80040da:	9f06      	ldr	r7, [sp, #24]
 80040dc:	eba1 0009 	sub.w	r0, r1, r9
 80040e0:	3801      	subs	r0, #1
 80040e2:	1e71      	subs	r1, r6, #1
 80040e4:	fb11 0107 	smlabb	r1, r1, r7, r0
 80040e8:	0409      	lsls	r1, r1, #16
 80040ea:	f57f af71 	bpl.w	8003fd0 <pool_func_mp_array_f32+0x58>
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	d0ee      	beq.n	80040d0 <pool_func_mp_array_f32+0x158>
 80040f2:	2d00      	cmp	r5, #0
 80040f4:	d0ec      	beq.n	80040d0 <pool_func_mp_array_f32+0x158>
 80040f6:	f1b8 0f00 	cmp.w	r8, #0
 80040fa:	d0e9      	beq.n	80040d0 <pool_func_mp_array_f32+0x158>
 80040fc:	f1b8 0f01 	cmp.w	r8, #1
 8004100:	f040 80f0 	bne.w	80042e4 <pool_func_mp_array_f32+0x36c>
 8004104:	46a1      	mov	r9, r4
 8004106:	9407      	str	r4, [sp, #28]
 8004108:	46a0      	mov	r8, r4
 800410a:	9b02      	ldr	r3, [sp, #8]
 800410c:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004110:	fb03 f308 	mul.w	r3, r3, r8
 8004114:	2600      	movs	r6, #0
 8004116:	9309      	str	r3, [sp, #36]	@ 0x24
 8004118:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
 800411c:	fa0f f389 	sxth.w	r3, r9
 8004120:	9308      	str	r3, [sp, #32]
 8004122:	46b4      	mov	ip, r6
 8004124:	4637      	mov	r7, r6
 8004126:	9c08      	ldr	r4, [sp, #32]
 8004128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800412a:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 80042e0 <pool_func_mp_array_f32+0x368>
 800412e:	4544      	cmp	r4, r8
 8004130:	441f      	add	r7, r3
 8004132:	b235      	sxth	r5, r6
 8004134:	fa0f f08e 	sxth.w	r0, lr
 8004138:	da17      	bge.n	800416a <pool_func_mp_array_f32+0x1f2>
 800413a:	4285      	cmp	r5, r0
 800413c:	da11      	bge.n	8004162 <pool_func_mp_array_f32+0x1ea>
 800413e:	fb04 520b 	mla	r2, r4, fp, r5
 8004142:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8004146:	462b      	mov	r3, r5
 8004148:	ecb2 7a01 	vldmia	r2!, {s14}
 800414c:	3301      	adds	r3, #1
 800414e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004156:	b219      	sxth	r1, r3
 8004158:	bfb8      	it	lt
 800415a:	eef0 7a47 	vmovlt.f32	s15, s14
 800415e:	4281      	cmp	r1, r0
 8004160:	dbf2      	blt.n	8004148 <pool_func_mp_array_f32+0x1d0>
 8004162:	3401      	adds	r4, #1
 8004164:	b224      	sxth	r4, r4
 8004166:	4544      	cmp	r4, r8
 8004168:	dbe7      	blt.n	800413a <pool_func_mp_array_f32+0x1c2>
 800416a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800416c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004170:	9b05      	ldr	r3, [sp, #20]
 8004172:	edc7 7a00 	vstr	s15, [r7]
 8004176:	449e      	add	lr, r3
 8004178:	441e      	add	r6, r3
 800417a:	f10c 0c01 	add.w	ip, ip, #1
 800417e:	9b02      	ldr	r3, [sp, #8]
 8004180:	fa0f fc8c 	sxth.w	ip, ip
 8004184:	4563      	cmp	r3, ip
 8004186:	fa1f fe8e 	uxth.w	lr, lr
 800418a:	b2b6      	uxth	r6, r6
 800418c:	4667      	mov	r7, ip
 800418e:	dcca      	bgt.n	8004126 <pool_func_mp_array_f32+0x1ae>
 8004190:	9b07      	ldr	r3, [sp, #28]
 8004192:	9906      	ldr	r1, [sp, #24]
 8004194:	3301      	adds	r3, #1
 8004196:	b21a      	sxth	r2, r3
 8004198:	9b01      	ldr	r3, [sp, #4]
 800419a:	9207      	str	r2, [sp, #28]
 800419c:	440b      	add	r3, r1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	9b03      	ldr	r3, [sp, #12]
 80041a4:	4489      	add	r9, r1
 80041a6:	4293      	cmp	r3, r2
 80041a8:	fa1f f989 	uxth.w	r9, r9
 80041ac:	4690      	mov	r8, r2
 80041ae:	dcac      	bgt.n	800410a <pool_func_mp_array_f32+0x192>
 80041b0:	e78e      	b.n	80040d0 <pool_func_mp_array_f32+0x158>
 80041b2:	1a88      	subs	r0, r1, r2
 80041b4:	9904      	ldr	r1, [sp, #16]
 80041b6:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 80041ba:	1ac9      	subs	r1, r1, r3
 80041bc:	4252      	negs	r2, r2
 80041be:	425b      	negs	r3, r3
 80041c0:	b292      	uxth	r2, r2
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	b280      	uxth	r0, r0
 80041c6:	9208      	str	r2, [sp, #32]
 80041c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80041ca:	b28a      	uxth	r2, r1
 80041cc:	2300      	movs	r3, #0
 80041ce:	9007      	str	r0, [sp, #28]
 80041d0:	9210      	str	r2, [sp, #64]	@ 0x40
 80041d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80041d4:	9a02      	ldr	r2, [sp, #8]
 80041d6:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80041da:	fb03 f302 	mul.w	r3, r3, r2
 80041de:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80041e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80041e4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80041e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80041e8:	9201      	str	r2, [sp, #4]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80041ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80041f0:	9204      	str	r2, [sp, #16]
 80041f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80041f4:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80041f8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	fb08 f303 	mul.w	r3, r8, r3
 8004202:	f04f 0e00 	mov.w	lr, #0
 8004206:	930a      	str	r3, [sp, #40]	@ 0x28
 8004208:	4676      	mov	r6, lr
 800420a:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800420e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004210:	eddf 7a33 	vldr	s15, [pc, #204]	@ 80042e0 <pool_func_mp_array_f32+0x368>
 8004214:	4549      	cmp	r1, r9
 8004216:	da2f      	bge.n	8004278 <pool_func_mp_array_f32+0x300>
 8004218:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 800421c:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 8004220:	45a4      	cmp	ip, r4
 8004222:	da23      	bge.n	800426c <pool_func_mp_array_f32+0x2f4>
 8004224:	2900      	cmp	r1, #0
 8004226:	fb0b f501 	mul.w	r5, fp, r1
 800422a:	db1f      	blt.n	800426c <pool_func_mp_array_f32+0x2f4>
 800422c:	4571      	cmp	r1, lr
 800422e:	da1d      	bge.n	800426c <pool_func_mp_array_f32+0x2f4>
 8004230:	f1bc 0f00 	cmp.w	ip, #0
 8004234:	4663      	mov	r3, ip
 8004236:	da05      	bge.n	8004244 <pool_func_mp_array_f32+0x2cc>
 8004238:	3301      	adds	r3, #1
 800423a:	b21b      	sxth	r3, r3
 800423c:	429f      	cmp	r7, r3
 800423e:	dcfb      	bgt.n	8004238 <pool_func_mp_array_f32+0x2c0>
 8004240:	42a3      	cmp	r3, r4
 8004242:	da13      	bge.n	800426c <pool_func_mp_array_f32+0x2f4>
 8004244:	18ea      	adds	r2, r5, r3
 8004246:	fb08 6202 	mla	r2, r8, r2, r6
 800424a:	1c58      	adds	r0, r3, #1
 800424c:	459b      	cmp	fp, r3
 800424e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8004252:	b203      	sxth	r3, r0
 8004254:	dd08      	ble.n	8004268 <pool_func_mp_array_f32+0x2f0>
 8004256:	ed92 7a00 	vldr	s14, [r2]
 800425a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004262:	bfb8      	it	lt
 8004264:	eef0 7a47 	vmovlt.f32	s15, s14
 8004268:	42a3      	cmp	r3, r4
 800426a:	dbeb      	blt.n	8004244 <pool_func_mp_array_f32+0x2cc>
 800426c:	3101      	adds	r1, #1
 800426e:	b209      	sxth	r1, r1
 8004270:	4549      	cmp	r1, r9
 8004272:	dbd5      	blt.n	8004220 <pool_func_mp_array_f32+0x2a8>
 8004274:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8004278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800427a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800427c:	f10e 0e01 	add.w	lr, lr, #1
 8004280:	4433      	add	r3, r6
 8004282:	fa0f fe8e 	sxth.w	lr, lr
 8004286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800428a:	45c6      	cmp	lr, r8
 800428c:	edc3 7a00 	vstr	s15, [r3]
 8004290:	4676      	mov	r6, lr
 8004292:	dbbc      	blt.n	800420e <pool_func_mp_array_f32+0x296>
 8004294:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004296:	9a01      	ldr	r2, [sp, #4]
 8004298:	9805      	ldr	r0, [sp, #20]
 800429a:	3301      	adds	r3, #1
 800429c:	4402      	add	r2, r0
 800429e:	b219      	sxth	r1, r3
 80042a0:	b292      	uxth	r2, r2
 80042a2:	9b04      	ldr	r3, [sp, #16]
 80042a4:	9201      	str	r2, [sp, #4]
 80042a6:	9a02      	ldr	r2, [sp, #8]
 80042a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80042aa:	4403      	add	r3, r0
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	428a      	cmp	r2, r1
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	460b      	mov	r3, r1
 80042b4:	dc9d      	bgt.n	80041f2 <pool_func_mp_array_f32+0x27a>
 80042b6:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 80042ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80042bc:	4402      	add	r2, r0
 80042be:	3301      	adds	r3, #1
 80042c0:	b219      	sxth	r1, r3
 80042c2:	b292      	uxth	r2, r2
 80042c4:	9b08      	ldr	r3, [sp, #32]
 80042c6:	9207      	str	r2, [sp, #28]
 80042c8:	9a03      	ldr	r2, [sp, #12]
 80042ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80042cc:	4403      	add	r3, r0
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	428a      	cmp	r2, r1
 80042d2:	9308      	str	r3, [sp, #32]
 80042d4:	460b      	mov	r3, r1
 80042d6:	f73f af7d 	bgt.w	80041d4 <pool_func_mp_array_f32+0x25c>
 80042da:	b013      	add	sp, #76	@ 0x4c
 80042dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e0:	cf000000 	.word	0xcf000000
 80042e4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80042e8:	46a4      	mov	ip, r4
 80042ea:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80042ee:	9407      	str	r4, [sp, #28]
 80042f0:	4623      	mov	r3, r4
 80042f2:	9a02      	ldr	r2, [sp, #8]
 80042f4:	f8dd e010 	ldr.w	lr, [sp, #16]
 80042f8:	fb03 f302 	mul.w	r3, r3, r2
 80042fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80042fe:	fa0f f38c 	sxth.w	r3, ip
 8004302:	2400      	movs	r4, #0
 8004304:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004306:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800430a:	9308      	str	r3, [sp, #32]
 800430c:	4627      	mov	r7, r4
 800430e:	4623      	mov	r3, r4
 8004310:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004312:	4413      	add	r3, r2
 8004314:	fb08 f303 	mul.w	r3, r8, r3
 8004318:	2600      	movs	r6, #0
 800431a:	9309      	str	r3, [sp, #36]	@ 0x24
 800431c:	fa0f fb84 	sxth.w	fp, r4
 8004320:	fa0f f08e 	sxth.w	r0, lr
 8004324:	4635      	mov	r5, r6
 8004326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004328:	9a08      	ldr	r2, [sp, #32]
 800432a:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 80042e0 <pool_func_mp_array_f32+0x368>
 800432e:	4293      	cmp	r3, r2
 8004330:	da20      	bge.n	8004374 <pool_func_mp_array_f32+0x3fc>
 8004332:	469a      	mov	sl, r3
 8004334:	4583      	cmp	fp, r0
 8004336:	da16      	bge.n	8004366 <pool_func_mp_array_f32+0x3ee>
 8004338:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800433a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800433c:	fb03 b30a 	mla	r3, r3, sl, fp
 8004340:	fb08 5303 	mla	r3, r8, r3, r5
 8004344:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004348:	465a      	mov	r2, fp
 800434a:	ed93 7a00 	vldr	s14, [r3]
 800434e:	3201      	adds	r2, #1
 8004350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004358:	b211      	sxth	r1, r2
 800435a:	bfb8      	it	lt
 800435c:	eef0 7a47 	vmovlt.f32	s15, s14
 8004360:	4281      	cmp	r1, r0
 8004362:	444b      	add	r3, r9
 8004364:	dbf1      	blt.n	800434a <pool_func_mp_array_f32+0x3d2>
 8004366:	9b08      	ldr	r3, [sp, #32]
 8004368:	f10a 0a01 	add.w	sl, sl, #1
 800436c:	fa0f fa8a 	sxth.w	sl, sl
 8004370:	459a      	cmp	sl, r3
 8004372:	dbdf      	blt.n	8004334 <pool_func_mp_array_f32+0x3bc>
 8004374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004376:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004378:	3601      	adds	r6, #1
 800437a:	442b      	add	r3, r5
 800437c:	b236      	sxth	r6, r6
 800437e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004382:	4546      	cmp	r6, r8
 8004384:	edc3 7a00 	vstr	s15, [r3]
 8004388:	4635      	mov	r5, r6
 800438a:	dbcc      	blt.n	8004326 <pool_func_mp_array_f32+0x3ae>
 800438c:	9b05      	ldr	r3, [sp, #20]
 800438e:	9a02      	ldr	r2, [sp, #8]
 8004390:	3701      	adds	r7, #1
 8004392:	b23f      	sxth	r7, r7
 8004394:	449e      	add	lr, r3
 8004396:	441c      	add	r4, r3
 8004398:	42ba      	cmp	r2, r7
 800439a:	fa1f fe8e 	uxth.w	lr, lr
 800439e:	b2a4      	uxth	r4, r4
 80043a0:	463b      	mov	r3, r7
 80043a2:	dcb5      	bgt.n	8004310 <pool_func_mp_array_f32+0x398>
 80043a4:	9b07      	ldr	r3, [sp, #28]
 80043a6:	9906      	ldr	r1, [sp, #24]
 80043a8:	3301      	adds	r3, #1
 80043aa:	b21a      	sxth	r2, r3
 80043ac:	9b01      	ldr	r3, [sp, #4]
 80043ae:	9207      	str	r2, [sp, #28]
 80043b0:	440b      	add	r3, r1
 80043b2:	448c      	add	ip, r1
 80043b4:	9903      	ldr	r1, [sp, #12]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	4291      	cmp	r1, r2
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	fa1f fc8c 	uxth.w	ip, ip
 80043c0:	4613      	mov	r3, r2
 80043c2:	dc96      	bgt.n	80042f2 <pool_func_mp_array_f32+0x37a>
 80043c4:	e684      	b.n	80040d0 <pool_func_mp_array_f32+0x158>
 80043c6:	bf00      	nop

080043c8 <forward_lite_bn_if32of32wf32>:
 80043c8:	b430      	push	{r4, r5}
 80043ca:	9d02      	ldr	r5, [sp, #8]
 80043cc:	9202      	str	r2, [sp, #8]
 80043ce:	461c      	mov	r4, r3
 80043d0:	4684      	mov	ip, r0
 80043d2:	9a03      	ldr	r2, [sp, #12]
 80043d4:	9403      	str	r4, [sp, #12]
 80043d6:	4608      	mov	r0, r1
 80043d8:	462b      	mov	r3, r5
 80043da:	4661      	mov	r1, ip
 80043dc:	bc30      	pop	{r4, r5}
 80043de:	f001 b8c1 	b.w	8005564 <bnl_kernel_if32of32>
 80043e2:	bf00      	nop

080043e4 <forward_lite_dense_if32of32wf32>:
 80043e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e8:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80043ec:	6801      	ldr	r1, [r0, #0]
 80043ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	b083      	sub	sp, #12
 80043f8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80043fc:	4299      	cmp	r1, r3
 80043fe:	9100      	str	r1, [sp, #0]
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	f080 811e 	bcs.w	8004642 <forward_lite_dense_if32of32wf32+0x25e>
 8004406:	6904      	ldr	r4, [r0, #16]
 8004408:	4607      	mov	r7, r0
 800440a:	0096      	lsls	r6, r2, #2
 800440c:	9b00      	ldr	r3, [sp, #0]
 800440e:	68bd      	ldr	r5, [r7, #8]
 8004410:	eb03 0e06 	add.w	lr, r3, r6
 8004414:	459e      	cmp	lr, r3
 8004416:	461e      	mov	r6, r3
 8004418:	f240 8104 	bls.w	8004624 <forward_lite_dense_if32of32wf32+0x240>
 800441c:	f1a4 0c10 	sub.w	ip, r4, #16
 8004420:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8004424:	f10c 0c01 	add.w	ip, ip, #1
 8004428:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800442c:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8004430:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8004434:	2c0f      	cmp	r4, #15
 8004436:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8004694 <forward_lite_dense_if32of32wf32+0x2b0>
 800443a:	f240 8105 	bls.w	8004648 <forward_lite_dense_if32of32wf32+0x264>
 800443e:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8004442:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8004446:	4621      	mov	r1, r4
 8004448:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800444c:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8004450:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8004454:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8004458:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800445c:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8004460:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8004464:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8004468:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800446c:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8004470:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8004474:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8004478:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800447c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004480:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8004484:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004488:	3910      	subs	r1, #16
 800448a:	290f      	cmp	r1, #15
 800448c:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8004490:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8004494:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004498:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800449c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80044a0:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 80044a4:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 80044a8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80044ac:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 80044b0:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 80044b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80044b8:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 80044bc:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 80044c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80044c4:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 80044c8:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 80044cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80044d0:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80044d4:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80044d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80044dc:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80044e0:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80044e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80044e8:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80044ec:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80044f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80044f4:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80044f8:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80044fc:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004500:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004504:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004508:	eee4 7a24 	vfma.f32	s15, s8, s9
 800450c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004510:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004518:	d896      	bhi.n	8004448 <forward_lite_dense_if32of32wf32+0x64>
 800451a:	eb05 020b 	add.w	r2, r5, fp
 800451e:	f004 010f 	and.w	r1, r4, #15
 8004522:	4663      	mov	r3, ip
 8004524:	2903      	cmp	r1, #3
 8004526:	d95f      	bls.n	80045e8 <forward_lite_dense_if32of32wf32+0x204>
 8004528:	edd2 6a01 	vldr	s13, [r2, #4]
 800452c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004530:	ed93 6a00 	vldr	s12, [r3]
 8004534:	ed93 5a02 	vldr	s10, [r3, #8]
 8004538:	edd2 5a02 	vldr	s11, [r2, #8]
 800453c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004540:	edd2 6a00 	vldr	s13, [r2]
 8004544:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004548:	1f08      	subs	r0, r1, #4
 800454a:	2803      	cmp	r0, #3
 800454c:	ed93 6a03 	vldr	s12, [r3, #12]
 8004550:	edd2 6a03 	vldr	s13, [r2, #12]
 8004554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004558:	eee5 7a25 	vfma.f32	s15, s10, s11
 800455c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004560:	eeb0 7a67 	vmov.f32	s14, s15
 8004564:	d938      	bls.n	80045d8 <forward_lite_dense_if32of32wf32+0x1f4>
 8004566:	edd2 6a05 	vldr	s13, [r2, #20]
 800456a:	edd3 7a05 	vldr	s15, [r3, #20]
 800456e:	ed93 6a04 	vldr	s12, [r3, #16]
 8004572:	ed93 5a06 	vldr	s10, [r3, #24]
 8004576:	edd2 5a06 	vldr	s11, [r2, #24]
 800457a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800457e:	edd2 6a04 	vldr	s13, [r2, #16]
 8004582:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004586:	f1a1 0a08 	sub.w	sl, r1, #8
 800458a:	f1ba 0f03 	cmp.w	sl, #3
 800458e:	ed93 6a07 	vldr	s12, [r3, #28]
 8004592:	edd2 6a07 	vldr	s13, [r2, #28]
 8004596:	eee5 7a25 	vfma.f32	s15, s10, s11
 800459a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800459e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045a2:	d919      	bls.n	80045d8 <forward_lite_dense_if32of32wf32+0x1f4>
 80045a4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80045a8:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80045ac:	ed92 6a08 	vldr	s12, [r2, #32]
 80045b0:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80045b4:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80045b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045bc:	edd3 6a08 	vldr	s13, [r3, #32]
 80045c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80045c4:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80045c8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80045cc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80045d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80045d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045d8:	0880      	lsrs	r0, r0, #2
 80045da:	3001      	adds	r0, #1
 80045dc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80045e0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80045e4:	f001 0103 	and.w	r1, r1, #3
 80045e8:	b1a9      	cbz	r1, 8004616 <forward_lite_dense_if32of32wf32+0x232>
 80045ea:	edd3 6a00 	vldr	s13, [r3]
 80045ee:	edd2 7a00 	vldr	s15, [r2]
 80045f2:	3901      	subs	r1, #1
 80045f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80045f8:	d00d      	beq.n	8004616 <forward_lite_dense_if32of32wf32+0x232>
 80045fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80045fe:	edd2 7a01 	vldr	s15, [r2, #4]
 8004602:	2901      	cmp	r1, #1
 8004604:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004608:	d005      	beq.n	8004616 <forward_lite_dense_if32of32wf32+0x232>
 800460a:	edd2 6a02 	vldr	s13, [r2, #8]
 800460e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004612:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004616:	444d      	add	r5, r9
 8004618:	eca6 7a01 	vstmia	r6!, {s14}
 800461c:	45b6      	cmp	lr, r6
 800461e:	f63f af09 	bhi.w	8004434 <forward_lite_dense_if32of32wf32+0x50>
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	b99b      	cbnz	r3, 8004650 <forward_lite_dense_if32of32wf32+0x26c>
 8004628:	9b00      	ldr	r3, [sp, #0]
 800462a:	9901      	ldr	r1, [sp, #4]
 800462c:	693c      	ldr	r4, [r7, #16]
 800462e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004632:	4299      	cmp	r1, r3
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800463a:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800463e:	f63f aee5 	bhi.w	800440c <forward_lite_dense_if32of32wf32+0x28>
 8004642:	b003      	add	sp, #12
 8004644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004648:	4621      	mov	r1, r4
 800464a:	462a      	mov	r2, r5
 800464c:	4643      	mov	r3, r8
 800464e:	e769      	b.n	8004524 <forward_lite_dense_if32of32wf32+0x140>
 8004650:	2a00      	cmp	r2, #0
 8004652:	d0e9      	beq.n	8004628 <forward_lite_dense_if32of32wf32+0x244>
 8004654:	9a00      	ldr	r2, [sp, #0]
 8004656:	ed93 7a00 	vldr	s14, [r3]
 800465a:	edd2 7a00 	vldr	s15, [r2]
 800465e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004662:	4613      	mov	r3, r2
 8004664:	edc2 7a00 	vstr	s15, [r2]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	2a01      	cmp	r2, #1
 800466c:	d9dc      	bls.n	8004628 <forward_lite_dense_if32of32wf32+0x244>
 800466e:	1d19      	adds	r1, r3, #4
 8004670:	2301      	movs	r3, #1
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	ed91 7a00 	vldr	s14, [r1]
 8004678:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800467c:	edd2 7a00 	vldr	s15, [r2]
 8004680:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004684:	3301      	adds	r3, #1
 8004686:	ece1 7a01 	vstmia	r1!, {s15}
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	429a      	cmp	r2, r3
 800468e:	d8f0      	bhi.n	8004672 <forward_lite_dense_if32of32wf32+0x28e>
 8004690:	e7ca      	b.n	8004628 <forward_lite_dense_if32of32wf32+0x244>
 8004692:	bf00      	nop
 8004694:	00000000 	.word	0x00000000

08004698 <forward_lite_dense_if32of32wf32_lut4>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	b08d      	sub	sp, #52	@ 0x34
 800469e:	4605      	mov	r5, r0
 80046a0:	9005      	str	r0, [sp, #20]
 80046a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80046a4:	4618      	mov	r0, r3
 80046a6:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 80046aa:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80046ac:	fb02 f303 	mul.w	r3, r2, r3
 80046b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80046b4:	460c      	mov	r4, r1
 80046b6:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80046b8:	9308      	str	r3, [sp, #32]
 80046ba:	b126      	cbz	r6, 80046c6 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 80046bc:	2240      	movs	r2, #64	@ 0x40
 80046be:	4631      	mov	r1, r6
 80046c0:	f000 fd06 	bl	80050d0 <st_int8_copy>
 80046c4:	4630      	mov	r0, r6
 80046c6:	9b05      	ldr	r3, [sp, #20]
 80046c8:	9a08      	ldr	r2, [sp, #32]
 80046ca:	4293      	cmp	r3, r2
 80046cc:	f080 80f5 	bcs.w	80048ba <forward_lite_dense_if32of32wf32_lut4+0x222>
 80046d0:	08eb      	lsrs	r3, r5, #3
 80046d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	f005 0101 	and.w	r1, r5, #1
 80046da:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	0092      	lsls	r2, r2, #2
 80046e2:	f025 0801 	bic.w	r8, r5, #1
 80046e6:	9102      	str	r1, [sp, #8]
 80046e8:	9304      	str	r3, [sp, #16]
 80046ea:	00a9      	lsls	r1, r5, #2
 80046ec:	9b05      	ldr	r3, [sp, #20]
 80046ee:	9207      	str	r2, [sp, #28]
 80046f0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80046f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80046f6:	f104 0b20 	add.w	fp, r4, #32
 80046fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80046fc:	9a07      	ldr	r2, [sp, #28]
 80046fe:	eb03 0902 	add.w	r9, r3, r2
 8004702:	4599      	cmp	r9, r3
 8004704:	f1ab 0220 	sub.w	r2, fp, #32
 8004708:	9206      	str	r2, [sp, #24]
 800470a:	f240 80d9 	bls.w	80048c0 <forward_lite_dense_if32of32wf32_lut4+0x228>
 800470e:	469e      	mov	lr, r3
 8004710:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004712:	f108 33ff 	add.w	r3, r8, #4294967295
 8004716:	9303      	str	r3, [sp, #12]
 8004718:	9b01      	ldr	r3, [sp, #4]
 800471a:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80048e4 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80b2 	beq.w	8004888 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8004724:	9b04      	ldr	r3, [sp, #16]
 8004726:	18d5      	adds	r5, r2, r3
 8004728:	465b      	mov	r3, fp
 800472a:	7814      	ldrb	r4, [r2, #0]
 800472c:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8004730:	7851      	ldrb	r1, [r2, #1]
 8004732:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8004736:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800473a:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800473e:	ed13 5a04 	vldr	s10, [r3, #-16]
 8004742:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004746:	ed13 6a02 	vldr	s12, [r3, #-8]
 800474a:	ed53 6a01 	vldr	s13, [r3, #-4]
 800474e:	f004 060f 	and.w	r6, r4, #15
 8004752:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8004756:	edd6 7a00 	vldr	s15, [r6]
 800475a:	0924      	lsrs	r4, r4, #4
 800475c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8004760:	ed94 3a00 	vldr	s6, [r4]
 8004764:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8004768:	090c      	lsrs	r4, r1, #4
 800476a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800476e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8004772:	f001 010f 	and.w	r1, r1, #15
 8004776:	edd4 3a00 	vldr	s7, [r4]
 800477a:	7894      	ldrb	r4, [r2, #2]
 800477c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004780:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004784:	0926      	lsrs	r6, r4, #4
 8004786:	ed91 4a00 	vldr	s8, [r1]
 800478a:	78d1      	ldrb	r1, [r2, #3]
 800478c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004790:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8004794:	f004 040f 	and.w	r4, r4, #15
 8004798:	edd6 4a00 	vldr	s9, [r6]
 800479c:	eee4 7a85 	vfma.f32	s15, s9, s10
 80047a0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80047a4:	3204      	adds	r2, #4
 80047a6:	ed94 5a00 	vldr	s10, [r4]
 80047aa:	090c      	lsrs	r4, r1, #4
 80047ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80047b0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80047b4:	f001 010f 	and.w	r1, r1, #15
 80047b8:	edd4 5a00 	vldr	s11, [r4]
 80047bc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80047c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80047c4:	42aa      	cmp	r2, r5
 80047c6:	ed91 6a00 	vldr	s12, [r1]
 80047ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 80047ce:	f103 0320 	add.w	r3, r3, #32
 80047d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047d6:	d1a8      	bne.n	800472a <forward_lite_dense_if32of32wf32_lut4+0x92>
 80047d8:	4656      	mov	r6, sl
 80047da:	4546      	cmp	r6, r8
 80047dc:	d258      	bcs.n	8004890 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	1b9c      	subs	r4, r3, r6
 80047e2:	08e7      	lsrs	r7, r4, #3
 80047e4:	f106 0208 	add.w	r2, r6, #8
 80047e8:	1e69      	subs	r1, r5, #1
 80047ea:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 80047ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80047f2:	ed52 5a01 	vldr	s11, [r2, #-4]
 80047f6:	ed52 6a02 	vldr	s13, [r2, #-8]
 80047fa:	f003 0c0f 	and.w	ip, r3, #15
 80047fe:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004802:	eddc 7a00 	vldr	s15, [ip]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800480c:	ed93 6a00 	vldr	s12, [r3]
 8004810:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004814:	42a1      	cmp	r1, r4
 8004816:	eee6 7a26 	vfma.f32	s15, s12, s13
 800481a:	f102 0208 	add.w	r2, r2, #8
 800481e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004822:	d1e4      	bne.n	80047ee <forward_lite_dense_if32of32wf32_lut4+0x156>
 8004824:	3701      	adds	r7, #1
 8004826:	19ea      	adds	r2, r5, r7
 8004828:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800482c:	9b02      	ldr	r3, [sp, #8]
 800482e:	b30b      	cbz	r3, 8004874 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 8004830:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004834:	edd6 7a00 	vldr	s15, [r6]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800483e:	edd3 6a00 	vldr	s13, [r3]
 8004842:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004846:	ecae 7a01 	vstmia	lr!, {s14}
 800484a:	45f1      	cmp	r9, lr
 800484c:	f63f af64 	bhi.w	8004718 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8004850:	9b05      	ldr	r3, [sp, #20]
 8004852:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004854:	1899      	adds	r1, r3, r2
 8004856:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004858:	b9e3      	cbnz	r3, 8004894 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800485a:	9b08      	ldr	r3, [sp, #32]
 800485c:	428b      	cmp	r3, r1
 800485e:	d92c      	bls.n	80048ba <forward_lite_dense_if32of32wf32_lut4+0x222>
 8004860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004862:	4498      	add	r8, r3
 8004864:	449a      	add	sl, r3
 8004866:	449b      	add	fp, r3
 8004868:	9b05      	ldr	r3, [sp, #20]
 800486a:	4599      	cmp	r9, r3
 800486c:	d92a      	bls.n	80048c4 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800486e:	9105      	str	r1, [sp, #20]
 8004870:	460b      	mov	r3, r1
 8004872:	e743      	b.n	80046fc <forward_lite_dense_if32of32wf32_lut4+0x64>
 8004874:	ecae 7a01 	vstmia	lr!, {s14}
 8004878:	45f1      	cmp	r9, lr
 800487a:	d9e9      	bls.n	8004850 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800487c:	9b01      	ldr	r3, [sp, #4]
 800487e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80048e4 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8004882:	2b00      	cmp	r3, #0
 8004884:	f47f af4e 	bne.w	8004724 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8004888:	9e06      	ldr	r6, [sp, #24]
 800488a:	4546      	cmp	r6, r8
 800488c:	4615      	mov	r5, r2
 800488e:	d3a6      	bcc.n	80047de <forward_lite_dense_if32of32wf32_lut4+0x146>
 8004890:	462a      	mov	r2, r5
 8004892:	e7cb      	b.n	800482c <forward_lite_dense_if32of32wf32_lut4+0x194>
 8004894:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0df      	beq.n	800485a <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800489a:	9b07      	ldr	r3, [sp, #28]
 800489c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800489e:	1acb      	subs	r3, r1, r3
 80048a0:	edd3 7a00 	vldr	s15, [r3]
 80048a4:	ecb2 7a01 	vldmia	r2!, {s14}
 80048a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048ac:	ece3 7a01 	vstmia	r3!, {s15}
 80048b0:	428b      	cmp	r3, r1
 80048b2:	d1f5      	bne.n	80048a0 <forward_lite_dense_if32of32wf32_lut4+0x208>
 80048b4:	9b08      	ldr	r3, [sp, #32]
 80048b6:	428b      	cmp	r3, r1
 80048b8:	d8d2      	bhi.n	8004860 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 80048ba:	b00d      	add	sp, #52	@ 0x34
 80048bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c0:	4619      	mov	r1, r3
 80048c2:	e7c8      	b.n	8004856 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 80048c4:	9b07      	ldr	r3, [sp, #28]
 80048c6:	1acb      	subs	r3, r1, r3
 80048c8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80048ca:	461a      	mov	r2, r3
 80048cc:	ed92 7a00 	vldr	s14, [r2]
 80048d0:	ecf0 7a01 	vldmia	r0!, {s15}
 80048d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048d8:	ece2 7a01 	vstmia	r2!, {s15}
 80048dc:	428a      	cmp	r2, r1
 80048de:	d1f5      	bne.n	80048cc <forward_lite_dense_if32of32wf32_lut4+0x234>
 80048e0:	e7f2      	b.n	80048c8 <forward_lite_dense_if32of32wf32_lut4+0x230>
 80048e2:	bf00      	nop
 80048e4:	00000000 	.word	0x00000000

080048e8 <forward_lite_dense_if32of32wf32_lut8>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	b087      	sub	sp, #28
 80048ee:	460f      	mov	r7, r1
 80048f0:	9204      	str	r2, [sp, #16]
 80048f2:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 80048f6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80048f8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80048fa:	fb01 f202 	mul.w	r2, r1, r2
 80048fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004902:	4605      	mov	r5, r0
 8004904:	9202      	str	r2, [sp, #8]
 8004906:	b136      	cbz	r6, 8004916 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 8004908:	4618      	mov	r0, r3
 800490a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800490e:	4631      	mov	r1, r6
 8004910:	f000 fbde 	bl	80050d0 <st_int8_copy>
 8004914:	4633      	mov	r3, r6
 8004916:	9a02      	ldr	r2, [sp, #8]
 8004918:	4295      	cmp	r5, r2
 800491a:	f080 80f9 	bcs.w	8004b10 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800491e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004920:	0092      	lsls	r2, r2, #2
 8004922:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8004926:	9201      	str	r2, [sp, #4]
 8004928:	9205      	str	r2, [sp, #20]
 800492a:	462a      	mov	r2, r5
 800492c:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 8004930:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8004934:	464d      	mov	r5, r9
 8004936:	4691      	mov	r9, r2
 8004938:	9a01      	ldr	r2, [sp, #4]
 800493a:	eb09 0e02 	add.w	lr, r9, r2
 800493e:	00a1      	lsls	r1, r4, #2
 8004940:	3720      	adds	r7, #32
 8004942:	45ce      	cmp	lr, r9
 8004944:	f004 0007 	and.w	r0, r4, #7
 8004948:	9103      	str	r1, [sp, #12]
 800494a:	f1a7 0b20 	sub.w	fp, r7, #32
 800494e:	f240 80c8 	bls.w	8004ae2 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 8004952:	9a04      	ldr	r2, [sp, #16]
 8004954:	46cc      	mov	ip, r9
 8004956:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8004b40 <forward_lite_dense_if32of32wf32_lut8+0x258>
 800495a:	2d00      	cmp	r5, #0
 800495c:	f000 80dd 	beq.w	8004b1a <forward_lite_dense_if32of32wf32_lut8+0x232>
 8004960:	eb02 060a 	add.w	r6, r2, sl
 8004964:	4639      	mov	r1, r7
 8004966:	7854      	ldrb	r4, [r2, #1]
 8004968:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 800496c:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8004970:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8004974:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8004978:	ed11 5a04 	vldr	s10, [r1, #-16]
 800497c:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004980:	ed11 6a02 	vldr	s12, [r1, #-8]
 8004984:	ed51 6a01 	vldr	s13, [r1, #-4]
 8004988:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800498c:	edd4 7a00 	vldr	s15, [r4]
 8004990:	7814      	ldrb	r4, [r2, #0]
 8004992:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004996:	ee67 7a83 	vmul.f32	s15, s15, s6
 800499a:	ed94 3a00 	vldr	s6, [r4]
 800499e:	7894      	ldrb	r4, [r2, #2]
 80049a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80049a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80049a8:	3208      	adds	r2, #8
 80049aa:	edd4 3a00 	vldr	s7, [r4]
 80049ae:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 80049b2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80049b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80049ba:	3120      	adds	r1, #32
 80049bc:	ed94 4a00 	vldr	s8, [r4]
 80049c0:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 80049c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80049c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80049cc:	edd4 4a00 	vldr	s9, [r4]
 80049d0:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 80049d4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80049d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80049dc:	ed94 5a00 	vldr	s10, [r4]
 80049e0:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 80049e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80049e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80049ec:	edd4 5a00 	vldr	s11, [r4]
 80049f0:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 80049f4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80049f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80049fc:	42b2      	cmp	r2, r6
 80049fe:	ed94 6a00 	vldr	s12, [r4]
 8004a02:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a0a:	d1ac      	bne.n	8004966 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f000 8081 	beq.w	8004b16 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8004a14:	7831      	ldrb	r1, [r6, #0]
 8004a16:	edd2 7a00 	vldr	s15, [r2]
 8004a1a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a1e:	edd1 6a00 	vldr	s13, [r1]
 8004a22:	2801      	cmp	r0, #1
 8004a24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a28:	d03f      	beq.n	8004aaa <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8004a2a:	7871      	ldrb	r1, [r6, #1]
 8004a2c:	edd2 7a01 	vldr	s15, [r2, #4]
 8004a30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a34:	edd1 6a00 	vldr	s13, [r1]
 8004a38:	2802      	cmp	r0, #2
 8004a3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a3e:	d034      	beq.n	8004aaa <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8004a40:	78b1      	ldrb	r1, [r6, #2]
 8004a42:	edd2 7a02 	vldr	s15, [r2, #8]
 8004a46:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a4a:	edd1 6a00 	vldr	s13, [r1]
 8004a4e:	2803      	cmp	r0, #3
 8004a50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a54:	d029      	beq.n	8004aaa <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8004a56:	78f1      	ldrb	r1, [r6, #3]
 8004a58:	edd2 6a03 	vldr	s13, [r2, #12]
 8004a5c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a60:	edd1 7a00 	vldr	s15, [r1]
 8004a64:	2804      	cmp	r0, #4
 8004a66:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a6a:	d01e      	beq.n	8004aaa <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8004a6c:	7931      	ldrb	r1, [r6, #4]
 8004a6e:	edd2 6a04 	vldr	s13, [r2, #16]
 8004a72:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a76:	edd1 7a00 	vldr	s15, [r1]
 8004a7a:	2805      	cmp	r0, #5
 8004a7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a80:	d013      	beq.n	8004aaa <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8004a82:	7971      	ldrb	r1, [r6, #5]
 8004a84:	edd2 6a05 	vldr	s13, [r2, #20]
 8004a88:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004a8c:	edd1 7a00 	vldr	s15, [r1]
 8004a90:	2806      	cmp	r0, #6
 8004a92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a96:	d008      	beq.n	8004aaa <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8004a98:	edd2 7a06 	vldr	s15, [r2, #24]
 8004a9c:	79b2      	ldrb	r2, [r6, #6]
 8004a9e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004aa2:	edd2 6a00 	vldr	s13, [r2]
 8004aa6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004aaa:	1832      	adds	r2, r6, r0
 8004aac:	ecac 7a01 	vstmia	ip!, {s14}
 8004ab0:	45e6      	cmp	lr, ip
 8004ab2:	f63f af50 	bhi.w	8004956 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8004ab6:	9a05      	ldr	r2, [sp, #20]
 8004ab8:	eb09 0402 	add.w	r4, r9, r2
 8004abc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004abe:	b9a2      	cbnz	r2, 8004aea <forward_lite_dense_if32of32wf32_lut8+0x202>
 8004ac0:	9a02      	ldr	r2, [sp, #8]
 8004ac2:	42a2      	cmp	r2, r4
 8004ac4:	d924      	bls.n	8004b10 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8004ac6:	9a03      	ldr	r2, [sp, #12]
 8004ac8:	45ce      	cmp	lr, r9
 8004aca:	4490      	add	r8, r2
 8004acc:	4417      	add	r7, r2
 8004ace:	d927      	bls.n	8004b20 <forward_lite_dense_if32of32wf32_lut8+0x238>
 8004ad0:	9a01      	ldr	r2, [sp, #4]
 8004ad2:	46a1      	mov	r9, r4
 8004ad4:	eb09 0e02 	add.w	lr, r9, r2
 8004ad8:	45ce      	cmp	lr, r9
 8004ada:	f1a7 0b20 	sub.w	fp, r7, #32
 8004ade:	f63f af38 	bhi.w	8004952 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 8004ae2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004ae4:	464c      	mov	r4, r9
 8004ae6:	2a00      	cmp	r2, #0
 8004ae8:	d0ea      	beq.n	8004ac0 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8004aea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004aec:	2a00      	cmp	r2, #0
 8004aee:	d0e7      	beq.n	8004ac0 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8004af0:	9a01      	ldr	r2, [sp, #4]
 8004af2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004af4:	1aa2      	subs	r2, r4, r2
 8004af6:	edd2 7a00 	vldr	s15, [r2]
 8004afa:	ecb1 7a01 	vldmia	r1!, {s14}
 8004afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b02:	ece2 7a01 	vstmia	r2!, {s15}
 8004b06:	4294      	cmp	r4, r2
 8004b08:	d1f5      	bne.n	8004af6 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 8004b0a:	9a02      	ldr	r2, [sp, #8]
 8004b0c:	42a2      	cmp	r2, r4
 8004b0e:	d8da      	bhi.n	8004ac6 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 8004b10:	b007      	add	sp, #28
 8004b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b16:	4632      	mov	r2, r6
 8004b18:	e7c8      	b.n	8004aac <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 8004b1a:	4616      	mov	r6, r2
 8004b1c:	465a      	mov	r2, fp
 8004b1e:	e776      	b.n	8004a0e <forward_lite_dense_if32of32wf32_lut8+0x126>
 8004b20:	9b01      	ldr	r3, [sp, #4]
 8004b22:	1ae3      	subs	r3, r4, r3
 8004b24:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004b26:	461a      	mov	r2, r3
 8004b28:	ed92 7a00 	vldr	s14, [r2]
 8004b2c:	ecf1 7a01 	vldmia	r1!, {s15}
 8004b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b34:	ece2 7a01 	vstmia	r2!, {s15}
 8004b38:	42a2      	cmp	r2, r4
 8004b3a:	d1f5      	bne.n	8004b28 <forward_lite_dense_if32of32wf32_lut8+0x240>
 8004b3c:	e7f2      	b.n	8004b24 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 8004b3e:	bf00      	nop
 8004b40:	00000000 	.word	0x00000000

08004b44 <forward_lite_nl_relu_if32of32>:
 8004b44:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004b4e:	4561      	cmp	r1, ip
 8004b50:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8004b54:	d814      	bhi.n	8004b80 <forward_lite_nl_relu_if32of32+0x3c>
 8004b56:	1d11      	adds	r1, r2, #4
 8004b58:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004b84 <forward_lite_nl_relu_if32of32+0x40>
 8004b5c:	f10c 0304 	add.w	r3, ip, #4
 8004b60:	4408      	add	r0, r1
 8004b62:	ebac 0202 	sub.w	r2, ip, r2
 8004b66:	ed73 7a01 	vldmdb	r3!, {s15}
 8004b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b72:	bfb8      	it	lt
 8004b74:	eef0 7a47 	vmovlt.f32	s15, s14
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	ed60 7a01 	vstmdb	r0!, {s15}
 8004b7e:	d1f2      	bne.n	8004b66 <forward_lite_nl_relu_if32of32+0x22>
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	00000000 	.word	0x00000000

08004b88 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>:
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	f992 0000 	ldrsb.w	r0, [r2]
 8004b92:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8004b96:	f04f 0500 	mov.w	r5, #0
 8004b9a:	f360 0507 	bfi	r5, r0, #0, #8
 8004b9e:	f1b9 0f00 	cmp.w	r9, #0
 8004ba2:	f360 250f 	bfi	r5, r0, #8, #8
 8004ba6:	dd20      	ble.n	8004bea <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x62>
 8004ba8:	461c      	mov	r4, r3
 8004baa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bac:	1c9e      	adds	r6, r3, #2
 8004bae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bb0:	460f      	mov	r7, r1
 8004bb2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8004bb6:	fb06 fb04 	mul.w	fp, r6, r4
 8004bba:	f04f 0800 	mov.w	r8, #0
 8004bbe:	2c00      	cmp	r4, #0
 8004bc0:	dd08      	ble.n	8004bd4 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x4c>
 8004bc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bc4:	18f9      	adds	r1, r7, r3
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	3301      	adds	r3, #1
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	800d      	strh	r5, [r1, #0]
 8004bce:	4431      	add	r1, r6
 8004bd0:	d1fa      	bne.n	8004bc8 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x40>
 8004bd2:	445f      	add	r7, fp
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	4652      	mov	r2, sl
 8004bd8:	f108 0801 	add.w	r8, r8, #1
 8004bdc:	9001      	str	r0, [sp, #4]
 8004bde:	f000 fb19 	bl	8005214 <st_int8_fill>
 8004be2:	45c1      	cmp	r9, r8
 8004be4:	9801      	ldr	r0, [sp, #4]
 8004be6:	4457      	add	r7, sl
 8004be8:	d1e9      	bne.n	8004bbe <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x36>
 8004bea:	b003      	add	sp, #12
 8004bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004bf0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	f992 8000 	ldrsb.w	r8, [r2]
 8004bfa:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8004bfc:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8004c00:	461e      	mov	r6, r3
 8004c02:	f04f 0500 	mov.w	r5, #0
 8004c06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004c08:	9303      	str	r3, [sp, #12]
 8004c0a:	f368 0507 	bfi	r5, r8, #0, #8
 8004c0e:	2e06      	cmp	r6, #6
 8004c10:	460c      	mov	r4, r1
 8004c12:	f368 250f 	bfi	r5, r8, #8, #8
 8004c16:	d077      	beq.n	8004d08 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 8004c18:	2e03      	cmp	r6, #3
 8004c1a:	d04f      	beq.n	8004cbc <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xcc>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db05      	blt.n	8004c2c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x3c>
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	4608      	mov	r0, r1
 8004c24:	4641      	mov	r1, r8
 8004c26:	4414      	add	r4, r2
 8004c28:	f000 fcde 	bl	80055e8 <memset>
 8004c2c:	1e7b      	subs	r3, r7, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	f106 36ff 	add.w	r6, r6, #4294967295
 8004c36:	dd27      	ble.n	8004c88 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x98>
 8004c38:	9b03      	ldr	r3, [sp, #12]
 8004c3a:	f10a 0702 	add.w	r7, sl, #2
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	fb07 f306 	mul.w	r3, r7, r6
 8004c44:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8004c48:	9302      	str	r3, [sp, #8]
 8004c4a:	4643      	mov	r3, r8
 8004c4c:	f04f 0b00 	mov.w	fp, #0
 8004c50:	46c8      	mov	r8, r9
 8004c52:	4699      	mov	r9, r3
 8004c54:	2e00      	cmp	r6, #0
 8004c56:	eb04 010a 	add.w	r1, r4, sl
 8004c5a:	dd09      	ble.n	8004c70 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x80>
 8004c5c:	468c      	mov	ip, r1
 8004c5e:	2300      	movs	r3, #0
 8004c60:	3301      	adds	r3, #1
 8004c62:	42b3      	cmp	r3, r6
 8004c64:	f8ac 5000 	strh.w	r5, [ip]
 8004c68:	44bc      	add	ip, r7
 8004c6a:	d1f9      	bne.n	8004c60 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x70>
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	4419      	add	r1, r3
 8004c70:	4642      	mov	r2, r8
 8004c72:	4648      	mov	r0, r9
 8004c74:	eb01 0408 	add.w	r4, r1, r8
 8004c78:	f000 facc 	bl	8005214 <st_int8_fill>
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	f10b 0b01 	add.w	fp, fp, #1
 8004c82:	459b      	cmp	fp, r3
 8004c84:	d1e6      	bne.n	8004c54 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x64>
 8004c86:	46c8      	mov	r8, r9
 8004c88:	2e00      	cmp	r6, #0
 8004c8a:	eb04 000a 	add.w	r0, r4, sl
 8004c8e:	dd0a      	ble.n	8004ca6 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xb6>
 8004c90:	f10a 0702 	add.w	r7, sl, #2
 8004c94:	4602      	mov	r2, r0
 8004c96:	2300      	movs	r3, #0
 8004c98:	3301      	adds	r3, #1
 8004c9a:	429e      	cmp	r6, r3
 8004c9c:	8015      	strh	r5, [r2, #0]
 8004c9e:	443a      	add	r2, r7
 8004ca0:	d1fa      	bne.n	8004c98 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xa8>
 8004ca2:	fb07 0006 	mla	r0, r7, r6, r0
 8004ca6:	9b03      	ldr	r3, [sp, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	db2a      	blt.n	8004d02 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x112>
 8004cac:	461a      	mov	r2, r3
 8004cae:	3201      	adds	r2, #1
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	b005      	add	sp, #20
 8004cb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	f000 bc96 	b.w	80055e8 <memset>
 8004cbc:	fa5f f388 	uxtb.w	r3, r8
 8004cc0:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8004cc4:	b292      	uxth	r2, r2
 8004cc6:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004cd0:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8004cd4:	2f00      	cmp	r7, #0
 8004cd6:	ea42 0203 	orr.w	r2, r2, r3
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	dd11      	ble.n	8004d02 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x112>
 8004cde:	eb07 0987 	add.w	r9, r7, r7, lsl #2
 8004ce2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8004ce6:	4449      	add	r1, r9
 8004ce8:	6022      	str	r2, [r4, #0]
 8004cea:	80a3      	strh	r3, [r4, #4]
 8004cec:	f8a4 5009 	strh.w	r5, [r4, #9]
 8004cf0:	81e3      	strh	r3, [r4, #14]
 8004cf2:	f884 8013 	strb.w	r8, [r4, #19]
 8004cf6:	6162      	str	r2, [r4, #20]
 8004cf8:	f884 8018 	strb.w	r8, [r4, #24]
 8004cfc:	3419      	adds	r4, #25
 8004cfe:	428c      	cmp	r4, r1
 8004d00:	d1f2      	bne.n	8004ce8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xf8>
 8004d02:	b005      	add	sp, #20
 8004d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d08:	fa5f f388 	uxtb.w	r3, r8
 8004d0c:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8004d10:	b292      	uxth	r2, r2
 8004d12:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8004d16:	4313      	orrs	r3, r2
 8004d18:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004d1c:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8004d20:	2f00      	cmp	r7, #0
 8004d22:	ea43 0302 	orr.w	r3, r3, r2
 8004d26:	ddec      	ble.n	8004d02 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x112>
 8004d28:	340f      	adds	r4, #15
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	3201      	adds	r2, #1
 8004d2e:	4297      	cmp	r7, r2
 8004d30:	f844 3c0f 	str.w	r3, [r4, #-15]
 8004d34:	f844 3c0b 	str.w	r3, [r4, #-11]
 8004d38:	f804 8c07 	strb.w	r8, [r4, #-7]
 8004d3c:	8025      	strh	r5, [r4, #0]
 8004d3e:	8125      	strh	r5, [r4, #8]
 8004d40:	8225      	strh	r5, [r4, #16]
 8004d42:	8325      	strh	r5, [r4, #24]
 8004d44:	8425      	strh	r5, [r4, #32]
 8004d46:	f884 8028 	strb.w	r8, [r4, #40]	@ 0x28
 8004d4a:	f8c4 3029 	str.w	r3, [r4, #41]	@ 0x29
 8004d4e:	f8c4 302d 	str.w	r3, [r4, #45]	@ 0x2d
 8004d52:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 8004d56:	d1e9      	bne.n	8004d2c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x13c>
 8004d58:	b005      	add	sp, #20
 8004d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5e:	bf00      	nop

08004d60 <forward_lite_pad_constant>:
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	b085      	sub	sp, #20
 8004d66:	4616      	mov	r6, r2
 8004d68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d6a:	9201      	str	r2, [sp, #4]
 8004d6c:	4681      	mov	r9, r0
 8004d6e:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	@ 0x44
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	@ 0x3c
 8004d78:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	@ 0x4c
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	9002      	str	r0, [sp, #8]
 8004d80:	d052      	beq.n	8004e28 <forward_lite_pad_constant+0xc8>
 8004d82:	2a00      	cmp	r2, #0
 8004d84:	dd11      	ble.n	8004daa <forward_lite_pad_constant+0x4a>
 8004d86:	f8cd 8000 	str.w	r8, [sp]
 8004d8a:	f04f 0b00 	mov.w	fp, #0
 8004d8e:	46b8      	mov	r8, r7
 8004d90:	4617      	mov	r7, r2
 8004d92:	4621      	mov	r1, r4
 8004d94:	462a      	mov	r2, r5
 8004d96:	44ab      	add	fp, r5
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f000 f999 	bl	80050d0 <st_int8_copy>
 8004d9e:	455f      	cmp	r7, fp
 8004da0:	442c      	add	r4, r5
 8004da2:	dcf6      	bgt.n	8004d92 <forward_lite_pad_constant+0x32>
 8004da4:	4647      	mov	r7, r8
 8004da6:	f8dd 8000 	ldr.w	r8, [sp]
 8004daa:	9b01      	ldr	r3, [sp, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dd2a      	ble.n	8004e06 <forward_lite_pad_constant+0xa6>
 8004db0:	2300      	movs	r3, #0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	2f00      	cmp	r7, #0
 8004db6:	bfc8      	it	gt
 8004db8:	f04f 0b00 	movgt.w	fp, #0
 8004dbc:	dd08      	ble.n	8004dd0 <forward_lite_pad_constant+0x70>
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	462a      	mov	r2, r5
 8004dc2:	44ab      	add	fp, r5
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f983 	bl	80050d0 <st_int8_copy>
 8004dca:	455f      	cmp	r7, fp
 8004dcc:	442c      	add	r4, r5
 8004dce:	dcf6      	bgt.n	8004dbe <forward_lite_pad_constant+0x5e>
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4648      	mov	r0, r9
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	f000 f97b 	bl	80050d0 <st_int8_copy>
 8004dda:	f1b8 0f00 	cmp.w	r8, #0
 8004dde:	4454      	add	r4, sl
 8004de0:	44d1      	add	r9, sl
 8004de2:	dd0a      	ble.n	8004dfa <forward_lite_pad_constant+0x9a>
 8004de4:	f04f 0b00 	mov.w	fp, #0
 8004de8:	4621      	mov	r1, r4
 8004dea:	462a      	mov	r2, r5
 8004dec:	44ab      	add	fp, r5
 8004dee:	4630      	mov	r0, r6
 8004df0:	f000 f96e 	bl	80050d0 <st_int8_copy>
 8004df4:	45d8      	cmp	r8, fp
 8004df6:	442c      	add	r4, r5
 8004df8:	dcf6      	bgt.n	8004de8 <forward_lite_pad_constant+0x88>
 8004dfa:	9b00      	ldr	r3, [sp, #0]
 8004dfc:	9a01      	ldr	r2, [sp, #4]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	429a      	cmp	r2, r3
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	d1d6      	bne.n	8004db4 <forward_lite_pad_constant+0x54>
 8004e06:	9b02      	ldr	r3, [sp, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dd0a      	ble.n	8004e22 <forward_lite_pad_constant+0xc2>
 8004e0c:	2700      	movs	r7, #0
 8004e0e:	4698      	mov	r8, r3
 8004e10:	4621      	mov	r1, r4
 8004e12:	462a      	mov	r2, r5
 8004e14:	4630      	mov	r0, r6
 8004e16:	442f      	add	r7, r5
 8004e18:	f000 f95a 	bl	80050d0 <st_int8_copy>
 8004e1c:	45b8      	cmp	r8, r7
 8004e1e:	442c      	add	r4, r5
 8004e20:	dcf6      	bgt.n	8004e10 <forward_lite_pad_constant+0xb0>
 8004e22:	b005      	add	sp, #20
 8004e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e28:	f996 5000 	ldrsb.w	r5, [r6]
 8004e2c:	4414      	add	r4, r2
 8004e2e:	4628      	mov	r0, r5
 8004e30:	9403      	str	r4, [sp, #12]
 8004e32:	f000 f9ef 	bl	8005214 <st_int8_fill>
 8004e36:	9b01      	ldr	r3, [sp, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	dd26      	ble.n	8004e8a <forward_lite_pad_constant+0x12a>
 8004e3c:	eb08 030a 	add.w	r3, r8, sl
 8004e40:	eb03 0b07 	add.w	fp, r3, r7
 8004e44:	eb07 030a 	add.w	r3, r7, sl
 8004e48:	2600      	movs	r6, #0
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	46b0      	mov	r8, r6
 8004e50:	461e      	mov	r6, r3
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	463a      	mov	r2, r7
 8004e58:	f000 f9dc 	bl	8005214 <st_int8_fill>
 8004e5c:	19e1      	adds	r1, r4, r7
 8004e5e:	4648      	mov	r0, r9
 8004e60:	4652      	mov	r2, sl
 8004e62:	f000 f935 	bl	80050d0 <st_int8_copy>
 8004e66:	9b00      	ldr	r3, [sp, #0]
 8004e68:	4632      	mov	r2, r6
 8004e6a:	18e1      	adds	r1, r4, r3
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 f9d1 	bl	8005214 <st_int8_fill>
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	f108 0801 	add.w	r8, r8, #1
 8004e78:	4543      	cmp	r3, r8
 8004e7a:	44d1      	add	r9, sl
 8004e7c:	445c      	add	r4, fp
 8004e7e:	d1e8      	bne.n	8004e52 <forward_lite_pad_constant+0xf2>
 8004e80:	461a      	mov	r2, r3
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	fb0b 3302 	mla	r3, fp, r2, r3
 8004e88:	9303      	str	r3, [sp, #12]
 8004e8a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004e8e:	4628      	mov	r0, r5
 8004e90:	b005      	add	sp, #20
 8004e92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e96:	f000 b9bd 	b.w	8005214 <st_int8_fill>
 8004e9a:	bf00      	nop

08004e9c <forward_lite_pad_edge>:
 8004e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea0:	ed2d 8b02 	vpush	{d8}
 8004ea4:	b087      	sub	sp, #28
 8004ea6:	e9dd 4a14 	ldrd	r4, sl, [sp, #80]	@ 0x50
 8004eaa:	9305      	str	r3, [sp, #20]
 8004eac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004eae:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	@ 0x48
 8004eb2:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 8004eb6:	9103      	str	r1, [sp, #12]
 8004eb8:	18cd      	adds	r5, r1, r3
 8004eba:	1e13      	subs	r3, r2, #0
 8004ebc:	9504      	str	r5, [sp, #16]
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	dd37      	ble.n	8004f32 <forward_lite_pad_edge+0x96>
 8004ec2:	fb04 f308 	mul.w	r3, r4, r8
 8004ec6:	9302      	str	r3, [sp, #8]
 8004ec8:	ee08 aa10 	vmov	s16, sl
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4607      	mov	r7, r0
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	f1b9 0f00 	cmp.w	r9, #0
 8004ed6:	bfc8      	it	gt
 8004ed8:	2600      	movgt	r6, #0
 8004eda:	dd08      	ble.n	8004eee <forward_lite_pad_edge+0x52>
 8004edc:	4629      	mov	r1, r5
 8004ede:	4426      	add	r6, r4
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	f000 f8f4 	bl	80050d0 <st_int8_copy>
 8004ee8:	45b1      	cmp	r9, r6
 8004eea:	4425      	add	r5, r4
 8004eec:	dcf6      	bgt.n	8004edc <forward_lite_pad_edge+0x40>
 8004eee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	441f      	add	r7, r3
 8004ef8:	441d      	add	r5, r3
 8004efa:	f000 f8e9 	bl	80050d0 <st_int8_copy>
 8004efe:	f1b8 0f00 	cmp.w	r8, #0
 8004f02:	eba7 0a04 	sub.w	sl, r7, r4
 8004f06:	dd0c      	ble.n	8004f22 <forward_lite_pad_edge+0x86>
 8004f08:	46ab      	mov	fp, r5
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	3601      	adds	r6, #1
 8004f10:	4622      	mov	r2, r4
 8004f12:	4650      	mov	r0, sl
 8004f14:	f000 f8dc 	bl	80050d0 <st_int8_copy>
 8004f18:	4546      	cmp	r6, r8
 8004f1a:	44a3      	add	fp, r4
 8004f1c:	d1f6      	bne.n	8004f0c <forward_lite_pad_edge+0x70>
 8004f1e:	9b02      	ldr	r3, [sp, #8]
 8004f20:	441d      	add	r5, r3
 8004f22:	9b00      	ldr	r3, [sp, #0]
 8004f24:	9a01      	ldr	r2, [sp, #4]
 8004f26:	3301      	adds	r3, #1
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	d1d1      	bne.n	8004ed2 <forward_lite_pad_edge+0x36>
 8004f2e:	ee18 aa10 	vmov	sl, s16
 8004f32:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <forward_lite_pad_edge+0xb2>
 8004f3a:	461c      	mov	r4, r3
 8004f3c:	4615      	mov	r5, r2
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4652      	mov	r2, sl
 8004f42:	4628      	mov	r0, r5
 8004f44:	4454      	add	r4, sl
 8004f46:	f000 f8c3 	bl	80050d0 <st_int8_copy>
 8004f4a:	42a5      	cmp	r5, r4
 8004f4c:	d1f7      	bne.n	8004f3e <forward_lite_pad_edge+0xa2>
 8004f4e:	9a01      	ldr	r2, [sp, #4]
 8004f50:	9b05      	ldr	r3, [sp, #20]
 8004f52:	4413      	add	r3, r2
 8004f54:	9a03      	ldr	r2, [sp, #12]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	fb0a 2503 	mla	r5, sl, r3, r2
 8004f5c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8004f5e:	18ec      	adds	r4, r5, r3
 8004f60:	42a5      	cmp	r5, r4
 8004f62:	bf18      	it	ne
 8004f64:	f1ca 0600 	rsbne	r6, sl, #0
 8004f68:	d007      	beq.n	8004f7a <forward_lite_pad_edge+0xde>
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	4628      	mov	r0, r5
 8004f70:	4434      	add	r4, r6
 8004f72:	f000 f8ad 	bl	80050d0 <st_int8_copy>
 8004f76:	42a5      	cmp	r5, r4
 8004f78:	d1f7      	bne.n	8004f6a <forward_lite_pad_edge+0xce>
 8004f7a:	b007      	add	sp, #28
 8004f7c:	ecbd 8b02 	vpop	{d8}
 8004f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f84 <forward_lite_pad_reflect>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	b08f      	sub	sp, #60	@ 0x3c
 8004f8a:	460e      	mov	r6, r1
 8004f8c:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8004f8e:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	@ 0x80
 8004f92:	f9bd e084 	ldrsh.w	lr, [sp, #132]	@ 0x84
 8004f96:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	4684      	mov	ip, r0
 8004f9c:	9002      	str	r0, [sp, #8]
 8004f9e:	950c      	str	r5, [sp, #48]	@ 0x30
 8004fa0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8004fa2:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004fa6:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8004fa8:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
 8004fac:	f9bd 007c 	ldrsh.w	r0, [sp, #124]	@ 0x7c
 8004fb0:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 8004fb2:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8004fb6:	4437      	add	r7, r6
 8004fb8:	9307      	str	r3, [sp, #28]
 8004fba:	dd58      	ble.n	800506e <forward_lite_pad_reflect+0xea>
 8004fbc:	4408      	add	r0, r1
 8004fbe:	fb02 f200 	mul.w	r2, r2, r0
 8004fc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fc4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8004fc6:	9206      	str	r2, [sp, #24]
 8004fc8:	4403      	add	r3, r0
 8004fca:	442b      	add	r3, r5
 8004fcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fce:	197b      	adds	r3, r7, r5
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004fd4:	1e8b      	subs	r3, r1, #2
 8004fd6:	fb04 c303 	mla	r3, r4, r3, ip
 8004fda:	9304      	str	r3, [sp, #16]
 8004fdc:	fb08 2305 	mla	r3, r8, r5, r2
 8004fe0:	fb09 6303 	mla	r3, r9, r3, r6
 8004fe4:	9303      	str	r3, [sp, #12]
 8004fe6:	fb09 f308 	mul.w	r3, r9, r8
 8004fea:	fb04 f101 	mul.w	r1, r4, r1
 8004fee:	9308      	str	r3, [sp, #32]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ff4:	9305      	str	r3, [sp, #20]
 8004ff6:	f1c9 0a00 	rsb	sl, r9, #0
 8004ffa:	9b01      	ldr	r3, [sp, #4]
 8004ffc:	42bb      	cmp	r3, r7
 8004ffe:	d00a      	beq.n	8005016 <forward_lite_pad_reflect+0x92>
 8005000:	9e02      	ldr	r6, [sp, #8]
 8005002:	461d      	mov	r5, r3
 8005004:	4455      	add	r5, sl
 8005006:	4426      	add	r6, r4
 8005008:	4622      	mov	r2, r4
 800500a:	4629      	mov	r1, r5
 800500c:	4630      	mov	r0, r6
 800500e:	f000 f85f 	bl	80050d0 <st_int8_copy>
 8005012:	42bd      	cmp	r5, r7
 8005014:	d1f6      	bne.n	8005004 <forward_lite_pad_reflect+0x80>
 8005016:	9b02      	ldr	r3, [sp, #8]
 8005018:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800501a:	9901      	ldr	r1, [sp, #4]
 800501c:	4618      	mov	r0, r3
 800501e:	4413      	add	r3, r2
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	f000 f855 	bl	80050d0 <st_int8_copy>
 8005026:	9b06      	ldr	r3, [sp, #24]
 8005028:	4543      	cmp	r3, r8
 800502a:	da0d      	bge.n	8005048 <forward_lite_pad_reflect+0xc4>
 800502c:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 8005030:	461d      	mov	r5, r3
 8005032:	4659      	mov	r1, fp
 8005034:	4630      	mov	r0, r6
 8005036:	3501      	adds	r5, #1
 8005038:	4622      	mov	r2, r4
 800503a:	f000 f849 	bl	80050d0 <st_int8_copy>
 800503e:	45a8      	cmp	r8, r5
 8005040:	44cb      	add	fp, r9
 8005042:	eba6 0604 	sub.w	r6, r6, r4
 8005046:	d1f4      	bne.n	8005032 <forward_lite_pad_reflect+0xae>
 8005048:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800504a:	9901      	ldr	r1, [sp, #4]
 800504c:	9b05      	ldr	r3, [sp, #20]
 800504e:	4411      	add	r1, r2
 8005050:	4417      	add	r7, r2
 8005052:	9101      	str	r1, [sp, #4]
 8005054:	9a04      	ldr	r2, [sp, #16]
 8005056:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005058:	440a      	add	r2, r1
 800505a:	9204      	str	r2, [sp, #16]
 800505c:	9908      	ldr	r1, [sp, #32]
 800505e:	9a03      	ldr	r2, [sp, #12]
 8005060:	440a      	add	r2, r1
 8005062:	9203      	str	r2, [sp, #12]
 8005064:	9a07      	ldr	r2, [sp, #28]
 8005066:	3301      	adds	r3, #1
 8005068:	429a      	cmp	r2, r3
 800506a:	9305      	str	r3, [sp, #20]
 800506c:	d1c5      	bne.n	8004ffa <forward_lite_pad_reflect+0x76>
 800506e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005070:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005072:	fb03 f404 	mul.w	r4, r3, r4
 8005076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005078:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800507c:	42a3      	cmp	r3, r4
 800507e:	d00c      	beq.n	800509a <forward_lite_pad_reflect+0x116>
 8005080:	461d      	mov	r5, r3
 8005082:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005084:	425e      	negs	r6, r3
 8005086:	461f      	mov	r7, r3
 8005088:	4629      	mov	r1, r5
 800508a:	4620      	mov	r0, r4
 800508c:	463a      	mov	r2, r7
 800508e:	443d      	add	r5, r7
 8005090:	4434      	add	r4, r6
 8005092:	f000 f81d 	bl	80050d0 <st_int8_copy>
 8005096:	42a5      	cmp	r5, r4
 8005098:	d1f6      	bne.n	8005088 <forward_lite_pad_reflect+0x104>
 800509a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800509c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800509e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80050a0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80050a2:	3b01      	subs	r3, #1
 80050a4:	fb01 2403 	mla	r4, r1, r3, r2
 80050a8:	fb01 f505 	mul.w	r5, r1, r5
 80050ac:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 80050b0:	42ac      	cmp	r4, r5
 80050b2:	d00a      	beq.n	80050ca <forward_lite_pad_reflect+0x146>
 80050b4:	424e      	negs	r6, r1
 80050b6:	460f      	mov	r7, r1
 80050b8:	4621      	mov	r1, r4
 80050ba:	4628      	mov	r0, r5
 80050bc:	463a      	mov	r2, r7
 80050be:	4434      	add	r4, r6
 80050c0:	443d      	add	r5, r7
 80050c2:	f000 f805 	bl	80050d0 <st_int8_copy>
 80050c6:	42ac      	cmp	r4, r5
 80050c8:	d1f6      	bne.n	80050b8 <forward_lite_pad_reflect+0x134>
 80050ca:	b00f      	add	sp, #60	@ 0x3c
 80050cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080050d0 <st_int8_copy>:
 80050d0:	4288      	cmp	r0, r1
 80050d2:	d022      	beq.n	800511a <st_int8_copy+0x4a>
 80050d4:	b30a      	cbz	r2, 800511a <st_int8_copy+0x4a>
 80050d6:	4288      	cmp	r0, r1
 80050d8:	d312      	bcc.n	8005100 <st_int8_copy+0x30>
 80050da:	2a03      	cmp	r2, #3
 80050dc:	d81e      	bhi.n	800511c <st_int8_copy+0x4c>
 80050de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80050e2:	f801 3b01 	strb.w	r3, [r1], #1
 80050e6:	2a01      	cmp	r2, #1
 80050e8:	d017      	beq.n	800511a <st_int8_copy+0x4a>
 80050ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 80050ee:	f801 3b01 	strb.w	r3, [r1], #1
 80050f2:	2a02      	cmp	r2, #2
 80050f4:	d011      	beq.n	800511a <st_int8_copy+0x4a>
 80050f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80050fa:	f801 3b01 	strb.w	r3, [r1], #1
 80050fe:	4770      	bx	lr
 8005100:	1883      	adds	r3, r0, r2
 8005102:	4299      	cmp	r1, r3
 8005104:	d2e9      	bcs.n	80050da <st_int8_copy+0xa>
 8005106:	4298      	cmp	r0, r3
 8005108:	440a      	add	r2, r1
 800510a:	d206      	bcs.n	800511a <st_int8_copy+0x4a>
 800510c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8005110:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005114:	4298      	cmp	r0, r3
 8005116:	d1f9      	bne.n	800510c <st_int8_copy+0x3c>
 8005118:	4770      	bx	lr
 800511a:	4770      	bx	lr
 800511c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005120:	f001 0403 	and.w	r4, r1, #3
 8005124:	f1c4 0304 	rsb	r3, r4, #4
 8005128:	f000 0e03 	and.w	lr, r0, #3
 800512c:	eba2 0c03 	sub.w	ip, r2, r3
 8005130:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005134:	f801 3b01 	strb.w	r3, [r1], #1
 8005138:	2c03      	cmp	r4, #3
 800513a:	f1c4 0202 	rsb	r2, r4, #2
 800513e:	d00e      	beq.n	800515e <st_int8_copy+0x8e>
 8005140:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005144:	f801 3b01 	strb.w	r3, [r1], #1
 8005148:	2a00      	cmp	r2, #0
 800514a:	dd08      	ble.n	800515e <st_int8_copy+0x8e>
 800514c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005150:	f801 3b01 	strb.w	r3, [r1], #1
 8005154:	b91c      	cbnz	r4, 800515e <st_int8_copy+0x8e>
 8005156:	f810 3b01 	ldrb.w	r3, [r0], #1
 800515a:	f801 3b01 	strb.w	r3, [r1], #1
 800515e:	4574      	cmp	r4, lr
 8005160:	d02b      	beq.n	80051ba <st_int8_copy+0xea>
 8005162:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8005166:	1e5a      	subs	r2, r3, #1
 8005168:	b153      	cbz	r3, 8005180 <st_int8_copy+0xb0>
 800516a:	f850 3b04 	ldr.w	r3, [r0], #4
 800516e:	f850 4b04 	ldr.w	r4, [r0], #4
 8005172:	f850 5b04 	ldr.w	r5, [r0], #4
 8005176:	f850 6b04 	ldr.w	r6, [r0], #4
 800517a:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800517c:	3a01      	subs	r2, #1
 800517e:	d2f4      	bcs.n	800516a <st_int8_copy+0x9a>
 8005180:	f01c 0f08 	tst.w	ip, #8
 8005184:	d004      	beq.n	8005190 <st_int8_copy+0xc0>
 8005186:	f850 3b04 	ldr.w	r3, [r0], #4
 800518a:	f850 4b04 	ldr.w	r4, [r0], #4
 800518e:	c118      	stmia	r1!, {r3, r4}
 8005190:	f01c 0f04 	tst.w	ip, #4
 8005194:	d003      	beq.n	800519e <st_int8_copy+0xce>
 8005196:	f850 3b04 	ldr.w	r3, [r0], #4
 800519a:	f841 3b04 	str.w	r3, [r1], #4
 800519e:	f01c 0f02 	tst.w	ip, #2
 80051a2:	d003      	beq.n	80051ac <st_int8_copy+0xdc>
 80051a4:	f830 3b02 	ldrh.w	r3, [r0], #2
 80051a8:	f821 3b02 	strh.w	r3, [r1], #2
 80051ac:	f01c 0f01 	tst.w	ip, #1
 80051b0:	d001      	beq.n	80051b6 <st_int8_copy+0xe6>
 80051b2:	7803      	ldrb	r3, [r0, #0]
 80051b4:	700b      	strb	r3, [r1, #0]
 80051b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ba:	ea4f 139c 	mov.w	r3, ip, lsr #6
 80051be:	f103 39ff 	add.w	r9, r3, #4294967295
 80051c2:	b183      	cbz	r3, 80051e6 <st_int8_copy+0x116>
 80051c4:	4688      	mov	r8, r1
 80051c6:	4686      	mov	lr, r0
 80051c8:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80051cc:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80051d0:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80051d4:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80051d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80051dc:	f1b9 3fff 	cmp.w	r9, #4294967295
 80051e0:	4641      	mov	r1, r8
 80051e2:	4670      	mov	r0, lr
 80051e4:	d1ee      	bne.n	80051c4 <st_int8_copy+0xf4>
 80051e6:	f01c 0f20 	tst.w	ip, #32
 80051ea:	d007      	beq.n	80051fc <st_int8_copy+0x12c>
 80051ec:	4688      	mov	r8, r1
 80051ee:	4686      	mov	lr, r0
 80051f0:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80051f4:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80051f8:	4641      	mov	r1, r8
 80051fa:	4670      	mov	r0, lr
 80051fc:	f01c 0f10 	tst.w	ip, #16
 8005200:	d001      	beq.n	8005206 <st_int8_copy+0x136>
 8005202:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8005204:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8005206:	f01c 0f08 	tst.w	ip, #8
 800520a:	d0c1      	beq.n	8005190 <st_int8_copy+0xc0>
 800520c:	c818      	ldmia	r0!, {r3, r4}
 800520e:	c118      	stmia	r1!, {r3, r4}
 8005210:	e7be      	b.n	8005190 <st_int8_copy+0xc0>
 8005212:	bf00      	nop

08005214 <st_int8_fill>:
 8005214:	fa5f fc80 	uxtb.w	ip, r0
 8005218:	0203      	lsls	r3, r0, #8
 800521a:	b29b      	uxth	r3, r3
 800521c:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 8005220:	ea4c 0c03 	orr.w	ip, ip, r3
 8005224:	0403      	lsls	r3, r0, #16
 8005226:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800522a:	ea4c 0c03 	orr.w	ip, ip, r3
 800522e:	078b      	lsls	r3, r1, #30
 8005230:	d008      	beq.n	8005244 <st_int8_fill+0x30>
 8005232:	b90a      	cbnz	r2, 8005238 <st_int8_fill+0x24>
 8005234:	e02c      	b.n	8005290 <st_int8_fill+0x7c>
 8005236:	b362      	cbz	r2, 8005292 <st_int8_fill+0x7e>
 8005238:	f801 0b01 	strb.w	r0, [r1], #1
 800523c:	078b      	lsls	r3, r1, #30
 800523e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005242:	d1f8      	bne.n	8005236 <st_int8_fill+0x22>
 8005244:	0913      	lsrs	r3, r2, #4
 8005246:	d025      	beq.n	8005294 <st_int8_fill+0x80>
 8005248:	f841 cb04 	str.w	ip, [r1], #4
 800524c:	f841 cb04 	str.w	ip, [r1], #4
 8005250:	f841 cb04 	str.w	ip, [r1], #4
 8005254:	f841 cb04 	str.w	ip, [r1], #4
 8005258:	3b01      	subs	r3, #1
 800525a:	d1f5      	bne.n	8005248 <st_int8_fill+0x34>
 800525c:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8005260:	f002 0203 	and.w	r2, r2, #3
 8005264:	b14b      	cbz	r3, 800527a <st_int8_fill+0x66>
 8005266:	f841 cb04 	str.w	ip, [r1], #4
 800526a:	3b01      	subs	r3, #1
 800526c:	d005      	beq.n	800527a <st_int8_fill+0x66>
 800526e:	f841 cb04 	str.w	ip, [r1], #4
 8005272:	2b01      	cmp	r3, #1
 8005274:	d001      	beq.n	800527a <st_int8_fill+0x66>
 8005276:	f841 cb04 	str.w	ip, [r1], #4
 800527a:	b14a      	cbz	r2, 8005290 <st_int8_fill+0x7c>
 800527c:	f801 0b01 	strb.w	r0, [r1], #1
 8005280:	3a01      	subs	r2, #1
 8005282:	d005      	beq.n	8005290 <st_int8_fill+0x7c>
 8005284:	f801 0b01 	strb.w	r0, [r1], #1
 8005288:	2a01      	cmp	r2, #1
 800528a:	d001      	beq.n	8005290 <st_int8_fill+0x7c>
 800528c:	f801 0b01 	strb.w	r0, [r1], #1
 8005290:	4770      	bx	lr
 8005292:	4770      	bx	lr
 8005294:	0893      	lsrs	r3, r2, #2
 8005296:	f002 0203 	and.w	r2, r2, #3
 800529a:	e7e3      	b.n	8005264 <st_int8_fill+0x50>

0800529c <ai_sum>:
 800529c:	edd1 7a00 	vldr	s15, [r1]
 80052a0:	ed92 7a00 	vldr	s14, [r2]
 80052a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052a8:	edc0 7a00 	vstr	s15, [r0]
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop

080052b0 <ai_array_to_buffer_fmt>:
 80052b0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d055      	beq.n	8005364 <ai_array_to_buffer_fmt+0xb4>
 80052b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005370 <ai_array_to_buffer_fmt+0xc0>)
 80052ba:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80052be:	4293      	cmp	r3, r2
 80052c0:	d010      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 80052c2:	dc21      	bgt.n	8005308 <ai_array_to_buffer_fmt+0x58>
 80052c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005374 <ai_array_to_buffer_fmt+0xc4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00c      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 80052ca:	dd0f      	ble.n	80052ec <ai_array_to_buffer_fmt+0x3c>
 80052cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005378 <ai_array_to_buffer_fmt+0xc8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d008      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 80052d2:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d004      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 80052da:	4a28      	ldr	r2, [pc, #160]	@ (800537c <ai_array_to_buffer_fmt+0xcc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	bf0c      	ite	eq
 80052e0:	4613      	moveq	r3, r2
 80052e2:	2340      	movne	r3, #64	@ 0x40
 80052e4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80052e8:	4318      	orrs	r0, r3
 80052ea:	4770      	bx	lr
 80052ec:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d0f7      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 80052f4:	dd2c      	ble.n	8005350 <ai_array_to_buffer_fmt+0xa0>
 80052f6:	4a22      	ldr	r2, [pc, #136]	@ (8005380 <ai_array_to_buffer_fmt+0xd0>)
 80052f8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80052fc:	4293      	cmp	r3, r2
 80052fe:	bf0c      	ite	eq
 8005300:	4613      	moveq	r3, r2
 8005302:	2340      	movne	r3, #64	@ 0x40
 8005304:	4318      	orrs	r0, r3
 8005306:	4770      	bx	lr
 8005308:	4a1e      	ldr	r2, [pc, #120]	@ (8005384 <ai_array_to_buffer_fmt+0xd4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d0ea      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 800530e:	dd10      	ble.n	8005332 <ai_array_to_buffer_fmt+0x82>
 8005310:	4a1d      	ldr	r2, [pc, #116]	@ (8005388 <ai_array_to_buffer_fmt+0xd8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d0e6      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 8005316:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800531a:	4293      	cmp	r3, r2
 800531c:	d0e2      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 800531e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8005322:	4293      	cmp	r3, r2
 8005324:	bf0c      	ite	eq
 8005326:	4613      	moveq	r3, r2
 8005328:	2340      	movne	r3, #64	@ 0x40
 800532a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800532e:	4318      	orrs	r0, r3
 8005330:	4770      	bx	lr
 8005332:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8005336:	4293      	cmp	r3, r2
 8005338:	d0d4      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 800533a:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800533e:	4293      	cmp	r3, r2
 8005340:	d0d0      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 8005342:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8005346:	4293      	cmp	r3, r2
 8005348:	bf0c      	ite	eq
 800534a:	4613      	moveq	r3, r2
 800534c:	2340      	movne	r3, #64	@ 0x40
 800534e:	e7c9      	b.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 8005350:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8005354:	4293      	cmp	r3, r2
 8005356:	d0c5      	beq.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 8005358:	3280      	adds	r2, #128	@ 0x80
 800535a:	4293      	cmp	r3, r2
 800535c:	bf0c      	ite	eq
 800535e:	4613      	moveq	r3, r2
 8005360:	2340      	movne	r3, #64	@ 0x40
 8005362:	e7bf      	b.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 8005364:	4b09      	ldr	r3, [pc, #36]	@ (800538c <ai_array_to_buffer_fmt+0xdc>)
 8005366:	4003      	ands	r3, r0
 8005368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800536c:	e7ba      	b.n	80052e4 <ai_array_to_buffer_fmt+0x34>
 800536e:	bf00      	nop
 8005370:	00821040 	.word	0x00821040
 8005374:	00040840 	.word	0x00040840
 8005378:	00041040 	.word	0x00041040
 800537c:	0004084f 	.word	0x0004084f
 8005380:	00040447 	.word	0x00040447
 8005384:	00840447 	.word	0x00840447
 8005388:	0084084f 	.word	0x0084084f
 800538c:	00803fff 	.word	0x00803fff

08005390 <ai_array_get_byte_size>:
 8005390:	b319      	cbz	r1, 80053da <ai_array_get_byte_size+0x4a>
 8005392:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005396:	b500      	push	{lr}
 8005398:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800539c:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 80053a0:	fb03 f101 	mul.w	r1, r3, r1
 80053a4:	fa42 f20e 	asr.w	r2, r2, lr
 80053a8:	07d2      	lsls	r2, r2, #31
 80053aa:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80053ae:	f101 0107 	add.w	r1, r1, #7
 80053b2:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80053b6:	bf58      	it	pl
 80053b8:	f000 007f 	andpl.w	r0, r0, #127	@ 0x7f
 80053bc:	f021 0107 	bic.w	r1, r1, #7
 80053c0:	bf58      	it	pl
 80053c2:	fa40 f00c 	asrpl.w	r0, r0, ip
 80053c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80053ca:	bf54      	ite	pl
 80053cc:	4083      	lslpl	r3, r0
 80053ce:	2300      	movmi	r3, #0
 80053d0:	3107      	adds	r1, #7
 80053d2:	4419      	add	r1, r3
 80053d4:	08c8      	lsrs	r0, r1, #3
 80053d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80053da:	4608      	mov	r0, r1
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop

080053e0 <ai_array_get_data_byte_size>:
 80053e0:	b169      	cbz	r1, 80053fe <ai_array_get_data_byte_size+0x1e>
 80053e2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80053e6:	fb03 f101 	mul.w	r1, r3, r1
 80053ea:	1dcb      	adds	r3, r1, #7
 80053ec:	f023 0307 	bic.w	r3, r3, #7
 80053f0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80053f4:	fa23 f000 	lsr.w	r0, r3, r0
 80053f8:	3007      	adds	r0, #7
 80053fa:	08c0      	lsrs	r0, r0, #3
 80053fc:	4770      	bx	lr
 80053fe:	4608      	mov	r0, r1
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop

08005404 <ai_version_get>:
 8005404:	0212      	lsls	r2, r2, #8
 8005406:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800540a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800540e:	4770      	bx	lr

08005410 <get_tensor_byte_size>:
 8005410:	b410      	push	{r4}
 8005412:	6983      	ldr	r3, [r0, #24]
 8005414:	68c4      	ldr	r4, [r0, #12]
 8005416:	6941      	ldr	r1, [r0, #20]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68e0      	ldr	r0, [r4, #12]
 800541c:	4a07      	ldr	r2, [pc, #28]	@ (800543c <get_tensor_byte_size+0x2c>)
 800541e:	68c9      	ldr	r1, [r1, #12]
 8005420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005424:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8005428:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800542c:	fb01 f000 	mul.w	r0, r1, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	bf04      	itt	eq
 8005434:	3007      	addeq	r0, #7
 8005436:	08c0      	lsreq	r0, r0, #3
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	000400c0 	.word	0x000400c0

08005440 <core_compute_offsets>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	e9d1 4600 	ldrd	r4, r6, [r1]
 8005448:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 800544c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005450:	6871      	ldr	r1, [r6, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	bf28      	it	cs
 8005456:	6935      	ldrcs	r5, [r6, #16]
 8005458:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800545c:	f8d0 b000 	ldr.w	fp, [r0]
 8005460:	bf2e      	itee	cs
 8005462:	fb05 fe01 	mulcs.w	lr, r5, r1
 8005466:	468e      	movcc	lr, r1
 8005468:	2501      	movcc	r5, #1
 800546a:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 800546e:	bf28      	it	cs
 8005470:	f8d9 2010 	ldrcs.w	r2, [r9, #16]
 8005474:	e9d6 4802 	ldrd	r4, r8, [r6, #8]
 8005478:	e9d9 6902 	ldrd	r6, r9, [r9, #8]
 800547c:	bf38      	it	cc
 800547e:	2201      	movcc	r2, #1
 8005480:	b083      	sub	sp, #12
 8005482:	ebb4 0a06 	subs.w	sl, r4, r6
 8005486:	bf18      	it	ne
 8005488:	f04f 0a01 	movne.w	sl, #1
 800548c:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 8005490:	9201      	str	r2, [sp, #4]
 8005492:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8005496:	d308      	bcc.n	80054aa <core_compute_offsets+0x6a>
 8005498:	6847      	ldr	r7, [r0, #4]
 800549a:	4561      	cmp	r1, ip
 800549c:	bf0c      	ite	eq
 800549e:	461a      	moveq	r2, r3
 80054a0:	2200      	movne	r2, #0
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	6802      	ldr	r2, [r0, #0]
 80054a6:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80054aa:	9f01      	ldr	r7, [sp, #4]
 80054ac:	42bd      	cmp	r5, r7
 80054ae:	d03f      	beq.n	8005530 <core_compute_offsets+0xf0>
 80054b0:	eba1 0b0c 	sub.w	fp, r1, ip
 80054b4:	fabb fb8b 	clz	fp, fp
 80054b8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80054bc:	fb01 fb0b 	mul.w	fp, r1, fp
 80054c0:	f1cb 0b00 	rsb	fp, fp, #0
 80054c4:	2a04      	cmp	r2, #4
 80054c6:	d906      	bls.n	80054d6 <core_compute_offsets+0x96>
 80054c8:	6847      	ldr	r7, [r0, #4]
 80054ca:	fb0b f203 	mul.w	r2, fp, r3
 80054ce:	613a      	str	r2, [r7, #16]
 80054d0:	6802      	ldr	r2, [r0, #0]
 80054d2:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80054d6:	42b4      	cmp	r4, r6
 80054d8:	d03a      	beq.n	8005550 <core_compute_offsets+0x110>
 80054da:	f04f 0b00 	mov.w	fp, #0
 80054de:	2a02      	cmp	r2, #2
 80054e0:	fb0e fa0a 	mul.w	sl, lr, sl
 80054e4:	d90e      	bls.n	8005504 <core_compute_offsets+0xc4>
 80054e6:	9a01      	ldr	r2, [sp, #4]
 80054e8:	6847      	ldr	r7, [r0, #4]
 80054ea:	1aaa      	subs	r2, r5, r2
 80054ec:	bf18      	it	ne
 80054ee:	2201      	movne	r2, #1
 80054f0:	ebab 0b0a 	sub.w	fp, fp, sl
 80054f4:	fb01 bb02 	mla	fp, r1, r2, fp
 80054f8:	fb03 f20b 	mul.w	r2, r3, fp
 80054fc:	60ba      	str	r2, [r7, #8]
 80054fe:	6802      	ldr	r2, [r0, #0]
 8005500:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8005504:	45c8      	cmp	r8, r9
 8005506:	d019      	beq.n	800553c <core_compute_offsets+0xfc>
 8005508:	2100      	movs	r1, #0
 800550a:	2a03      	cmp	r2, #3
 800550c:	d90d      	bls.n	800552a <core_compute_offsets+0xea>
 800550e:	ebb8 0809 	subs.w	r8, r8, r9
 8005512:	fb0e f404 	mul.w	r4, lr, r4
 8005516:	bf18      	it	ne
 8005518:	f04f 0801 	movne.w	r8, #1
 800551c:	fb08 1114 	mls	r1, r8, r4, r1
 8005520:	6842      	ldr	r2, [r0, #4]
 8005522:	4451      	add	r1, sl
 8005524:	fb03 f101 	mul.w	r1, r3, r1
 8005528:	60d1      	str	r1, [r2, #12]
 800552a:	b003      	add	sp, #12
 800552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005530:	ebb1 0b0c 	subs.w	fp, r1, ip
 8005534:	bf18      	it	ne
 8005536:	f04f 0b01 	movne.w	fp, #1
 800553a:	e7c3      	b.n	80054c4 <core_compute_offsets+0x84>
 800553c:	42b4      	cmp	r4, r6
 800553e:	d0e3      	beq.n	8005508 <core_compute_offsets+0xc8>
 8005540:	9e01      	ldr	r6, [sp, #4]
 8005542:	42b5      	cmp	r5, r6
 8005544:	d0e0      	beq.n	8005508 <core_compute_offsets+0xc8>
 8005546:	ebb1 010c 	subs.w	r1, r1, ip
 800554a:	bf18      	it	ne
 800554c:	2101      	movne	r1, #1
 800554e:	e7dc      	b.n	800550a <core_compute_offsets+0xca>
 8005550:	9f01      	ldr	r7, [sp, #4]
 8005552:	42bd      	cmp	r5, r7
 8005554:	d0c1      	beq.n	80054da <core_compute_offsets+0x9a>
 8005556:	ebb1 0b0c 	subs.w	fp, r1, ip
 800555a:	bf18      	it	ne
 800555c:	f04f 0b01 	movne.w	fp, #1
 8005560:	e7bd      	b.n	80054de <core_compute_offsets+0x9e>
 8005562:	bf00      	nop

08005564 <bnl_kernel_if32of32>:
 8005564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005568:	9e07      	ldr	r6, [sp, #28]
 800556a:	b306      	cbz	r6, 80055ae <bnl_kernel_if32of32+0x4a>
 800556c:	b1eb      	cbz	r3, 80055aa <bnl_kernel_if32of32+0x46>
 800556e:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8005572:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8005576:	2700      	movs	r7, #0
 8005578:	46bc      	mov	ip, r7
 800557a:	4417      	add	r7, r2
 800557c:	4567      	cmp	r7, ip
 800557e:	d911      	bls.n	80055a4 <bnl_kernel_if32of32+0x40>
 8005580:	9c06      	ldr	r4, [sp, #24]
 8005582:	eba5 0008 	sub.w	r0, r5, r8
 8005586:	46b6      	mov	lr, r6
 8005588:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800558c:	ecf0 6a01 	vldmia	r0!, {s13}
 8005590:	ecb4 7a01 	vldmia	r4!, {s14}
 8005594:	ecfe 7a01 	vldmia	lr!, {s15}
 8005598:	eee6 7a87 	vfma.f32	s15, s13, s14
 800559c:	42a8      	cmp	r0, r5
 800559e:	ecec 7a01 	vstmia	ip!, {s15}
 80055a2:	d1f3      	bne.n	800558c <bnl_kernel_if32of32+0x28>
 80055a4:	42bb      	cmp	r3, r7
 80055a6:	4445      	add	r5, r8
 80055a8:	d8e6      	bhi.n	8005578 <bnl_kernel_if32of32+0x14>
 80055aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0fb      	beq.n	80055aa <bnl_kernel_if32of32+0x46>
 80055b2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80055b6:	0097      	lsls	r7, r2, #2
 80055b8:	4634      	mov	r4, r6
 80055ba:	4416      	add	r6, r2
 80055bc:	42b4      	cmp	r4, r6
 80055be:	d20d      	bcs.n	80055dc <bnl_kernel_if32of32+0x78>
 80055c0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80055c4:	1bc4      	subs	r4, r0, r7
 80055c6:	460d      	mov	r5, r1
 80055c8:	ecf4 7a01 	vldmia	r4!, {s15}
 80055cc:	ecbc 7a01 	vldmia	ip!, {s14}
 80055d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055d4:	4284      	cmp	r4, r0
 80055d6:	ece5 7a01 	vstmia	r5!, {s15}
 80055da:	d1f5      	bne.n	80055c8 <bnl_kernel_if32of32+0x64>
 80055dc:	42b3      	cmp	r3, r6
 80055de:	4439      	add	r1, r7
 80055e0:	4438      	add	r0, r7
 80055e2:	d8e9      	bhi.n	80055b8 <bnl_kernel_if32of32+0x54>
 80055e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055e8 <memset>:
 80055e8:	4402      	add	r2, r0
 80055ea:	4603      	mov	r3, r0
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d100      	bne.n	80055f2 <memset+0xa>
 80055f0:	4770      	bx	lr
 80055f2:	f803 1b01 	strb.w	r1, [r3], #1
 80055f6:	e7f9      	b.n	80055ec <memset+0x4>

080055f8 <__libc_init_array>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005630 <__libc_init_array+0x38>)
 80055fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005634 <__libc_init_array+0x3c>)
 80055fe:	1b64      	subs	r4, r4, r5
 8005600:	10a4      	asrs	r4, r4, #2
 8005602:	2600      	movs	r6, #0
 8005604:	42a6      	cmp	r6, r4
 8005606:	d109      	bne.n	800561c <__libc_init_array+0x24>
 8005608:	4d0b      	ldr	r5, [pc, #44]	@ (8005638 <__libc_init_array+0x40>)
 800560a:	4c0c      	ldr	r4, [pc, #48]	@ (800563c <__libc_init_array+0x44>)
 800560c:	f000 f818 	bl	8005640 <_init>
 8005610:	1b64      	subs	r4, r4, r5
 8005612:	10a4      	asrs	r4, r4, #2
 8005614:	2600      	movs	r6, #0
 8005616:	42a6      	cmp	r6, r4
 8005618:	d105      	bne.n	8005626 <__libc_init_array+0x2e>
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005620:	4798      	blx	r3
 8005622:	3601      	adds	r6, #1
 8005624:	e7ee      	b.n	8005604 <__libc_init_array+0xc>
 8005626:	f855 3b04 	ldr.w	r3, [r5], #4
 800562a:	4798      	blx	r3
 800562c:	3601      	adds	r6, #1
 800562e:	e7f2      	b.n	8005616 <__libc_init_array+0x1e>
 8005630:	0802b0d8 	.word	0x0802b0d8
 8005634:	0802b0d8 	.word	0x0802b0d8
 8005638:	0802b0d8 	.word	0x0802b0d8
 800563c:	0802b0dc 	.word	0x0802b0dc

08005640 <_init>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr

0800564c <_fini>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr
